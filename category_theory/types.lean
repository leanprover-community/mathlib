-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison, Johannes Hรถlzl

import category_theory.functor_category category_theory.embedding

namespace category_theory

universes u v u' v' w

instance types : large_category (Type u) :=
{ hom     := ฮป a b, (a โ b),
  id      := ฮป a, id,
  comp    := ฮป _ _ _ f g, g โ f }

@[simp] lemma types_hom {ฮฑ ฮฒ : Type u} : (ฮฑ โถ ฮฒ) = (ฮฑ โ ฮฒ) := rfl
@[simp] lemma types_id {ฮฑ : Type u} (a : ฮฑ) : (๐ ฮฑ : ฮฑ โ ฮฑ) a = a := rfl
@[simp] lemma types_comp {ฮฑ ฮฒ ฮณ : Type u} (f : ฮฑ โ ฮฒ) (g : ฮฒ โ ฮณ) (a : ฮฑ) : (((f : ฮฑ โถ ฮฒ) โซ (g : ฮฒ โถ ฮณ)) : ฮฑ โถ ฮณ) a = g (f a) := rfl

namespace functor_to_types
variables {C : Type u} [๐ : category.{u v} C] (F G H : C โฅค (Type w)) {X Y Z : C}
include ๐
variables (ฯ : F โน G) (ฯ : G โน H)

@[simp] lemma map_comp (f : X โถ Y) (g : Y โถ Z) (a : F.obj X) : (F.map (f โซ g)) a = (F.map g) ((F.map f) a) :=
by simp

@[simp] lemma map_id (a : F.obj X) : (F.map (๐ X)) a = a :=
by simp

lemma naturality (f : X โถ Y) (x : F.obj X) : ฯ.app Y ((F.map f) x) = (G.map f) (ฯ.app X x) :=
congr_fun (ฯ.naturality f) x

@[simp] lemma vcomp (x : F.obj X) : (ฯ โ ฯ).app X x = ฯ.app X (ฯ.app X x) := rfl

variables {D : Type u'} [๐ : category.{u' v'} D] (I J : D โฅค C) (ฯ : I โน J) {W : D}

@[simp] lemma hcomp (x : (I โ F).obj W) : (ฯ โซ ฯ).app W x = (G.map (ฯ.app W)) (ฯ.app (I.obj W) x) := rfl

end functor_to_types

def ulift_functor : (Type u) โฅค (Type (max u v)) :=
{ obj := ฮป X, ulift.{v} X,
  map := ฮป X Y f, ฮป x : ulift.{v} X, ulift.up (f x.down) }

section forget
variables (C : Type u โ Type v) {hom : โฮฑ ฮฒ, C ฮฑ โ C ฮฒ โ (ฮฑ โ ฮฒ) โ Prop} [i : concrete_category hom]
include i

/-- The forgetful functor from a bundled category to `Type`. -/
def forget : bundled C โฅค Type u := { obj := bundled.ฮฑ, map := ฮปa b h, h.1 }

instance forget.faithful : faithful (forget C) := {}

end forget

end category_theory