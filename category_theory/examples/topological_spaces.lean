-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Patrick Massot, Scott Morrison, Mario Carneiro

import category_theory.full_subcategory
import category_theory.functor_category
import category_theory.natural_isomorphism
import analysis.topology.topological_space
import analysis.topology.continuity
import order.galois_connection

open category_theory
open category_theory.nat_iso

universe u

namespace category_theory.examples

/-- The category of topological spaces and continuous maps. -/
@[reducible] def Top : Type (u+1) := bundled topological_space

instance (x : Top) : topological_space x := x.str

namespace Top
instance : concrete_category @continuous := ‚ü®@continuous_id, @continuous.comp‚ü©

-- local attribute [class] continuous
-- instance {R S : Top} (f : R ‚ü∂ S) : continuous (f : R ‚Üí S) := f.2
end Top

structure open_set (X : Top.{u}) : Type u :=
(s : set X.Œ±)
(is_open : topological_space.is_open X.str s)

variables {X : Top.{u}}

namespace open_set
open topological_space lattice
instance : has_coe (open_set X) (set X.Œ±) := { coe := Œª U, U.s }

instance : has_subset (open_set X) :=
{ subset := Œª U V, U.s ‚äÜ V.s }

instance : has_mem X.Œ± (open_set X) :=
{ mem := Œª a V, a ‚àà V.s }

@[extensionality] lemma ext {U V : open_set X} (h : U.s = V.s) : U = V :=
by cases U; cases V; congr; exact h

instance : partial_order (open_set X) := by refine { le := (‚äÜ), .. } ; tidy

instance open_sets : small_category (open_set X) := by apply_instance

def interior (s : set X) : open_set X :=
{ s := interior s,
  is_open := is_open_interior }

def gc : galois_connection (@s X) interior :=
Œª U s, ‚ü®Œª h, interior_maximal h U.is_open, Œª h, le_trans h interior_subset‚ü©

def gi : @galois_insertion (order_dual (set X)) (order_dual (open_set X)) _ _ interior (@s X) :=
{ choice := Œª s hs, { s := s, is_open := interior_eq_iff_open.mp $ le_antisymm interior_subset hs },
  gc := gc.dual,
  le_l_u := Œª _, interior_subset,
  choice_eq := Œª s hs, le_antisymm interior_subset hs }

instance : complete_lattice (open_set X) :=
@order_dual.lattice.complete_lattice _
  (@galois_insertion.lift_complete_lattice
    (order_dual (set X)) (order_dual (open_set X)) _ interior (@s X) _ gi)

@[simp] lemma Sup_s {Us : set (open_set X)} : (Sup Us).s = ‚ãÉ‚ÇÄ (open_set.s '' Us) :=
by rw [@galois_connection.l_Sup _ _ _ _ (@open_set.s X) interior (gc) Us, set.sUnion_image]

def nbhd (x : X.Œ±) := { U : open_set X // x ‚àà U }
def nbhds (x : X.Œ±) : small_category (nbhd x) := begin unfold nbhd, apply_instance end

/-- `open_set.map f` gives the functor from open sets in Y to open set in X,
    given by taking preimages under f. -/
def map
  {X Y : Top.{u}} (f : X ‚ü∂ Y) : open_set Y ‚•§ open_set X :=
{ obj := Œª U, ‚ü® f.val ‚Åª¬π' U.s, f.property _ U.is_open ‚ü©,
  map' := Œª U V i, ‚ü® ‚ü® Œª a b, i.down.down b ‚ü© ‚ü© }.

@[simp] lemma map_id_obj (X : Top.{u}) (U : open_set X) : map (ùüô X) U = U :=
begin
  cases U, tidy
end

@[simp] def map_id (X : Top.{u}) : map (ùüô X) ‚âÖ functor.id (open_set X) :=
{ hom := { app := Œª U, ùüô U },
  inv := { app := Œª U, ùüô U } }

-- We could make f g implicit here, but it's nice to be able to see when they are the identity (often!)
def map_iso {X Y : Top.{u}} (f g : X ‚ü∂ Y) (h : f = g) : map f ‚âÖ map g :=
nat_iso.of_components (Œª U, eq_to_iso (congr_fun (congr_arg _ (congr_arg _ h)) _) ) (by obviously)

@[simp] def map_iso_id {X : Top.{u}} (h) : map_iso (ùüô X) (ùüô X) h = iso.refl (map _) := rfl

def is_basis (B : set (open_set X)) : Prop := is_topological_basis (open_set.s '' B)

lemma is_basis_iff_nbhd {B : set (open_set X)} :
is_basis B ‚Üî ‚àÄ {U : open_set X} {x : X}, x ‚àà U ‚Üí ‚àÉ U' ‚àà B, x ‚àà U' ‚àß U' ‚äÜ U :=
begin
split; intro h,
{ rintros ‚ü®sU, hU‚ü© x hx,
  rcases (mem_nhds_of_is_topological_basis h).mp (mem_nhds_sets hU hx) with ‚ü®sV,‚ü®‚ü®V,H‚ÇÅ,H‚ÇÇ‚ü©,hsV‚ü©‚ü©,
  refine ‚ü®V,H‚ÇÅ,_‚ü©,
  cases V, dsimp at H‚ÇÇ, subst H‚ÇÇ, exact hsV },
{ refine is_topological_basis_of_open_of_nhds _ _,
  { rintros sU ‚ü®U,‚ü®H‚ÇÅ,H‚ÇÇ‚ü©‚ü©, subst H‚ÇÇ, exact U.is_open },
  { intros x sU hx hsU,
    rcases @h (‚ü®sU,hsU‚ü© : open_set X) x hx with ‚ü®V,hV,H‚ü©,
    refine ‚ü®V, ‚ü®V,hV,rfl‚ü©, H‚ü© } }
end

lemma is_basis_iff_cover {B : set (open_set X)} :
is_basis B ‚Üî ‚àÄ U : open_set X, ‚àÉ Us ‚äÜ B, U = Sup Us :=
begin
  split,
  { intros hB U,
    rcases sUnion_basis_of_is_open hB U.is_open with ‚ü®sUs, H, hU‚ü©,
    existsi {U : open_set X | U ‚àà B ‚àß U.s ‚àà sUs},
    split,
    { intros U hU, exact hU.left },
    { apply ext, rw [Sup_s, hU], congr,
      ext s; split; intro hs,
      { rcases H hs with ‚ü®V,hV‚ü©,
        rw ‚Üê hV.right at hs,
        refine ‚ü®V,‚ü®‚ü®hV.left,hs‚ü©,hV.right‚ü©‚ü© },
      { rcases hs with ‚ü®V,‚ü®‚ü®H‚ÇÅ,H‚ÇÇ‚ü©,H‚ÇÉ‚ü©‚ü©,
        subst H‚ÇÉ, exact H‚ÇÇ } } },
  { intro h,
    rw is_basis_iff_nbhd,
    intros U x hx,
    rcases h U with ‚ü®Us, hUs, H‚ü©,
    replace H := congr_arg open_set.s H,
    rw Sup_s at H,
    change x ‚àà U.s at hx,
    rw H at hx,
    rcases set.mem_sUnion.mp hx with ‚ü®sV, ‚ü®‚ü®V,H‚ÇÅ,H‚ÇÇ‚ü©,hsV‚ü©‚ü©,
    refine ‚ü®V,hUs H‚ÇÅ,_‚ü©,
    cases V, dsimp at H‚ÇÇ, subst H‚ÇÇ,
    refine ‚ü®hsV,_‚ü©,
    change V_s ‚äÜ U.s, rw H,
    exact set.subset_sUnion_of_mem ‚ü®‚ü®V_s,V_is_open‚ü©,‚ü®H‚ÇÅ,rfl‚ü©‚ü© }
end

end open_set

end category_theory.examples
