-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Stephen Morgan, Scott Morrison

import data.ulift
import category_theory.natural_transformation
import category_theory.isomorphism
import category_theory.functor_category

namespace category_theory

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ

def discrete (Œ± : Type u‚ÇÅ) := Œ±

@[extensionality] lemma plift.ext {P : Prop} (a b : plift P) : a = b :=
begin
  cases a, cases b, refl
end

instance discrete_category (Œ± : Type u‚ÇÅ) : small_category (discrete Œ±) :=
{ hom  := Œª X Y, ulift (plift (X = Y)),
  id   := by obviously,
  comp := by obviously }

instance pempty_category : small_category pempty :=
(by apply_instance : small_category (discrete pempty))

instance punit_category : small_category punit :=
{ hom  := Œª X Y, punit,
  id   := by obviously,
  comp := by obviously }

-- TODO this needs to wait for equivalences to arrive
-- example : equivalence.{u‚ÇÅ u‚ÇÅ u‚ÇÅ u‚ÇÅ} punit (discrete punit) := by obviously

def discrete.lift {Œ± : Type u‚ÇÅ} {Œ≤ : Type u‚ÇÇ} (f : Œ± ‚Üí Œ≤) : (discrete Œ±) ‚•§ (discrete Œ≤) :=
{ obj := f,
  map := Œª X Y g, begin cases g, cases g, cases g, exact ùüô (f X) end }

variables (J : Type v‚ÇÇ) [small_category J]

variables (C : Type u‚ÇÇ) [ùíû : category.{u‚ÇÇ v‚ÇÇ} C]
include ùíû

section forget

@[simp] def discrete.forget : (J ‚•§ C) ‚•§ (discrete J ‚•§ C) :=
{ obj := Œª F,
  { obj := F.obj,
    map := Œª X Y f, begin cases f, cases f, cases f, exact ùüô _ end },
  map := Œª F G Œ±,
  { app := Œ±.app } }

end forget

@[simp] lemma discrete.functor_map_id
  (F : discrete J ‚•§ C) (j : discrete J) (f : j ‚ü∂ j) : F.map f = ùüô (F.obj j) :=
begin
  have h : f = ùüô j, cases f, cases f, ext,
  rw h,
  simp,
end

namespace functor
def empty : pempty ‚•§ C := by obviously

variables {C}

-- punit.{u} : Sort u, so punit.{v‚ÇÇ+1} is a small_category.{v‚ÇÇ}.
def of_obj (X : C) : punit.{v‚ÇÇ+1} ‚•§ C :=
{ obj := Œª Y, X,
  map := Œª Y Z f, ùüô X }

@[simp] lemma of_obj_obj (X : C) (a : punit) : ((of_obj X).obj a) = X := rfl

@[simp] def of_function {I : Type u‚ÇÅ} (F : I ‚Üí C) : (discrete I) ‚•§ C :=
{ obj := F,
  map := Œª X Y f, begin cases f, cases f, cases f, exact ùüô (F X) end }

end functor

namespace nat_trans

variables {C}

@[simp] def of_function {I : Type u‚ÇÅ} {F G : I ‚Üí C} (f : Œ† i : I, F i ‚ü∂ G i) :
  (functor.of_function F) ‚üπ (functor.of_function G) :=
{ app := Œª i, f i,
  naturality' := Œª X Y g,
  begin
    cases g, cases g, cases g,
    dsimp [functor.of_function],
    simp,
  end }

end nat_trans

end category_theory
