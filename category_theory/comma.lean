-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.types
import category_theory.isomorphism
import category_theory.whiskering

namespace category_theory

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ
variables {A : Type u‚ÇÅ} [ùíú : category.{u‚ÇÅ v‚ÇÅ} A]
variables {B : Type u‚ÇÇ} [‚Ñ¨ : category.{u‚ÇÇ v‚ÇÇ} B]
variables {T : Type u‚ÇÉ} [ùíØ : category.{u‚ÇÉ v‚ÇÉ} T]
include ùíú ‚Ñ¨ ùíØ

structure comma (L : A ‚•§ T) (R : B ‚•§ T) :=
(left : A . obviously)
(right : B . obviously)
(hom : L.obj left ‚ü∂ R.obj right)

variables {L : A ‚•§ T} {R : B ‚•§ T}

structure comma_morphism (X Y : comma L R) :=
(left : X.left ‚ü∂ Y.left . obviously)
(right : X.right ‚ü∂ Y.right . obviously)
(w' : L.map left ‚â´ Y.hom = X.hom ‚â´ R.map right . obviously)

restate_axiom comma_morphism.w'
attribute [simp] comma_morphism.w

namespace comma_morphism
@[extensionality] lemma ext
  {X Y : comma L R} {f g : comma_morphism X Y}
  (l : f.left = g.left) (r : f.right = g.right) : f = g :=
begin
  cases f, cases g,
  congr; assumption
end
end comma_morphism

instance comma_category : category (comma L R) :=
{ hom := comma_morphism,
  id := Œª X,
  { left := ùüô X.left,
    right := ùüô X.right },
  comp := Œª X Y Z f g,
  { left := f.left ‚â´ g.left,
    right := f.right ‚â´ g.right,
    w' :=
    begin
      rw [functor.map_comp,
          category.assoc,
          g.w,
          ‚Üêcategory.assoc,
          f.w,
          functor.map_comp,
          category.assoc],
    end }}

namespace comma

variables (L) (R)

def fst : comma L R ‚•§ A :=
{ obj := Œª X, X.left,
  map := Œª _ _ f, f.left }

def snd : comma L R ‚•§ B :=
{ obj := Œª X, X.right,
  map := Œª _ _ f, f.right }

@[simp] lemma fst_obj {X : comma L R} : (fst L R).obj X = X.left := rfl
@[simp] lemma snd_obj {X : comma L R} : (snd L R).obj X = X.right := rfl
@[simp] lemma fst_map {X Y : comma L R} {f : X ‚ü∂ Y} : (fst L R).map f = f.left := rfl
@[simp] lemma snd_map {X Y : comma L R} {f : X ‚ü∂ Y} : (snd L R).map f = f.right := rfl

def nat_trans : fst L R ‚ãô L ‚üπ snd L R ‚ãô R :=
{ app := Œª X, X.hom }

variables {L‚ÇÅ : A ‚•§ T} {L‚ÇÇ : A ‚•§ T}
variables {R‚ÇÅ : B ‚•§ T} {R‚ÇÇ : B ‚•§ T}

def map_left (l : L‚ÇÅ ‚üπ L‚ÇÇ) : comma L‚ÇÇ R ‚•§ comma L‚ÇÅ R :=
{ obj := Œª X,
  { left  := X.left,
    right := X.right,
    hom   := l.app X.left ‚â´ X.hom },
  map := Œª X Y f,
  { left  := f.left,
    right := f.right,
    w' := by tidy; rw [‚Üêcategory.assoc, l.naturality f.left, category.assoc]; tidy } }

def map_right (r : R‚ÇÅ ‚üπ R‚ÇÇ) : comma L R‚ÇÅ ‚•§ comma L R‚ÇÇ :=
{ obj := Œª X,
  { left  := X.left,
    right := X.right,
    hom   := X.hom ‚â´ r.app X.right },
  map := Œª X Y f,
  { left  := f.left,
    right := f.right,
    w' := by tidy; rw [‚Üêr.naturality f.right, ‚Üêcategory.assoc]; tidy } }

end comma

end category_theory
