-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

/- The Yoneda embedding, as a functor `yoneda : C ‚•§ ((C·µí·µñ) ‚•§ (Type v‚ÇÅ))`,
   along with instances that it is `full` and `faithful`.
   
   Also the Yoneda lemma, `yoneda_lemma : (yoneda_pairing C) ‚âÖ (yoneda_evaluation C)`. -/

import category_theory.natural_transformation
import category_theory.opposites
import category_theory.types
import category_theory.embedding
import category_theory.natural_isomorphism

namespace category_theory

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ

variables (C : Type u‚ÇÅ) [ùíû : category.{u‚ÇÅ v‚ÇÅ} C]
include ùíû

def yoneda : C ‚•§ ((C·µí·µñ) ‚•§ (Type v‚ÇÅ)) := 
{ obj := Œª X,
  { obj := Œª Y : C, Y ‚ü∂ X,
    map' := Œª Y Y' f g, f ‚â´ g,
    map_comp' := begin intros X_1 Y Z f g, ext1, dsimp at *, erw [category.assoc] end,
    map_id' := begin intros X_1, ext1, dsimp at *, erw [category.id_comp] end },
  map' := Œª X X' f, { app := Œª Y g, g ‚â´ f } }

namespace yoneda
@[simp] lemma obj_obj (X Y : C) : ((yoneda C) X) Y = (Y ‚ü∂ X) := rfl
@[simp] lemma obj_map (X : C) {Y Y' : C} (f : Y ‚ü∂ Y') : ((yoneda C) X).map f = Œª g, f ‚â´ g := rfl
@[simp] lemma map_app {X X' : C} (f : X ‚ü∂ X') (Y : C) : ((yoneda C).map f) Y = Œª g, g ‚â´ f := rfl

lemma obj_map_id {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : ((yoneda C) X).map f (ùüô X) = ((yoneda C).map f) Y (ùüô Y) := 
by obviously

@[simp] lemma naturality {X Y : C} (Œ± : (yoneda C) X ‚ü∂ (yoneda C) Y) 
  {Z Z' : C} (f : Z ‚ü∂ Z') (h : Z' ‚ü∂ X) : f ‚â´ Œ± Z' h = Œ± Z (f ‚â´ h) :=
begin erw [functor_to_types.naturality], refl end

instance full : full (yoneda C) := 
{ preimage := Œª X Y f, (f X) (ùüô X) }.

instance faithful : faithful (yoneda C) := 
begin
  fsplit, 
  intros X Y f g p, 
  injection p with h,
  convert (congr_fun (congr_fun h X) (ùüô X)) ; simp
end

/-- Extensionality via Yoneda. The typical usage would be
```
-- Goal is `X ‚âÖ Y`
apply yoneda.ext,
-- Goals are now functions `(Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)`, `(Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X)`, and the fact that these
functions are inverses and natural in `Z`.
```
-/
def ext (X Y : C)
  (p : Œ† {Z : C}, (Z ‚ü∂ X) ‚Üí (Z ‚ü∂ Y)) (q : Œ† {Z : C}, (Z ‚ü∂ Y) ‚Üí (Z ‚ü∂ X))
  (h‚ÇÅ : Œ† {Z : C} (f : Z ‚ü∂ X), q (p f) = f) (h‚ÇÇ : Œ† {Z : C} (f : Z ‚ü∂ Y), p (q f) = f) 
  (n : Œ† {Z Z' : C} (f : Z' ‚ü∂ Z) (g : Z ‚ü∂ X), p (f ‚â´ g) = f ‚â´ p g) : X ‚âÖ Y := 
@preimage_iso _ _ _ _ (yoneda C) _ _ _ _ 
  (nat_iso.of_components (Œª Z, { hom := p, inv := q, }) (by tidy))

-- We need to help typeclass inference with some awkward universe levels here.
instance prod_category_instance_1 : category (((C·µí·µñ) ‚•§ Type v‚ÇÅ) √ó (C·µí·µñ)) := 
category_theory.prod.{(max u‚ÇÅ (v‚ÇÅ+1)) (max u‚ÇÅ v‚ÇÅ) u‚ÇÅ v‚ÇÅ} (C·µí·µñ ‚•§ Type v‚ÇÅ) (C·µí·µñ)

instance prod_category_instance_2 : category ((C·µí·µñ) √ó ((C·µí·µñ) ‚•§ Type v‚ÇÅ)) := 
category_theory.prod.{u‚ÇÅ v‚ÇÅ (max u‚ÇÅ (v‚ÇÅ+1)) (max u‚ÇÅ v‚ÇÅ)} (C·µí·µñ) (C·µí·µñ ‚•§ Type v‚ÇÅ) 

end yoneda

open yoneda

def yoneda_evaluation : (((C·µí·µñ) ‚•§ (Type v‚ÇÅ)) √ó (C·µí·µñ)) ‚•§ (Type (max u‚ÇÅ v‚ÇÅ)) := 
(evaluation (C·µí·µñ) (Type v‚ÇÅ)) ‚ãô ulift_functor.{v‚ÇÅ u‚ÇÅ}

@[simp] lemma yoneda_evaluation_map_down
  (P Q : (C·µí·µñ ‚•§ Type v‚ÇÅ) √ó  (C·µí·µñ)) (Œ± : P ‚ü∂ Q) (x : (yoneda_evaluation C) P) : 
  ((yoneda_evaluation C).map Œ± x).down = (Œ±.1) (Q.2) ((P.1).map (Œ±.2) (x.down)) := rfl

def yoneda_pairing : (((C·µí·µñ) ‚•§ (Type v‚ÇÅ)) √ó (C·µí·µñ)) ‚•§ (Type (max u‚ÇÅ v‚ÇÅ)) := 
let F := (category_theory.prod.swap ((C·µí·µñ) ‚•§ (Type v‚ÇÅ)) (C·µí·µñ)) in
let G := (functor.prod ((yoneda C).op) (functor.id ((C·µí·µñ) ‚•§ (Type v‚ÇÅ)))) in
let H := (functor.hom ((C·µí·µñ) ‚•§ (Type v‚ÇÅ))) in
  (F ‚ãô G ‚ãô H)      

@[simp] lemma yoneda_pairing_map
  (P Q : (C·µí·µñ ‚•§ Type v‚ÇÅ) √ó  (C·µí·µñ)) (Œ± : P ‚ü∂ Q) (Œ≤ : (yoneda_pairing C) (P.1, P.2)) : 
  (yoneda_pairing C).map Œ± Œ≤ = (yoneda C).map (Œ±.snd) ‚â´ Œ≤ ‚â´ Œ±.fst := rfl

def yoneda_lemma : (yoneda_pairing C) ‚âÖ (yoneda_evaluation C) := 
{ hom := 
  { app := Œª F x, ulift.up ((x.app F.2) (ùüô F.2)),
    naturality' := begin intros X Y f, ext1, ext1, cases f, cases Y, cases X, dsimp at *, simp at *, 
      erw [‚Üêfunctor_to_types.naturality, obj_map_id, functor_to_types.naturality, functor_to_types.map_id] end },
  inv := 
  { app := Œª F x, 
    { app := Œª X a, (F.1.map a) x.down,
      naturality' := begin intros X Y f, ext1, cases x, cases F, dsimp at *, erw [functor_to_types.map_comp], refl end },
    naturality' := begin intros X Y f, ext1, ext1, ext1, cases x, cases f, cases Y, cases X, 
      dsimp at *, simp at *, erw [‚Üêfunctor_to_types.naturality, functor_to_types.map_comp] end },
  hom_inv_id' := begin ext1, ext1, ext1, ext1, cases X, dsimp at *, simp at *, 
    erw [‚Üêfunctor_to_types.naturality, obj_map_id, functor_to_types.naturality, functor_to_types.map_id] end,
  inv_hom_id' := begin ext1, ext1, ext1, cases x, cases X, dsimp at *, erw [functor_to_types.map_id] end }.

end category_theory