-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.functor_category

namespace category_theory

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ u‚ÇÑ v‚ÇÑ

variables (C : Type u‚ÇÅ) [ùíû : category.{u‚ÇÅ v‚ÇÅ} C] 
          (D : Type u‚ÇÇ) [ùíü : category.{u‚ÇÇ v‚ÇÇ} D] 
          (E : Type u‚ÇÉ) [‚Ñ∞ : category.{u‚ÇÉ v‚ÇÉ} E]
include ùíû ùíü ‚Ñ∞

def whiskering_left : (C ‚•§ D) ‚•§ ((D ‚•§ E) ‚•§ (C ‚•§ E)) := 
{ obj := Œª F,
  { obj := Œª G, F ‚ãô G,
    map' := Œª G H Œ±,
    { app := Œª c, Œ± (F c),
      naturality' := by intros X Y f; rw [functor.comp_map, functor.comp_map, Œ±.naturality] } },
  map' := Œª F G œÑ, 
  { app := Œª H,
    { app := Œª c, H.map (œÑ c), 
      naturality' := begin intros X Y f, dsimp at *, rw [‚ÜêH.map_comp, ‚ÜêH.map_comp, ‚ÜêœÑ.naturality] end },
    naturality' := begin intros X Y f, ext1, dsimp at *, rw [‚Üênat_trans.naturality] end } }

def whiskering_right : (D ‚•§ E) ‚•§ ((C ‚•§ D) ‚•§ (C ‚•§ E)) :=
{ obj := Œª H,
  { obj := Œª F, F ‚ãô H,
    map' := Œª _ _ Œ±,
    { app := Œª c, H.map (Œ± c),
      naturality' := by intros X Y f;
        rw [functor.comp_map, functor.comp_map, ‚ÜêH.map_comp, ‚ÜêH.map_comp, Œ±.naturality] } },
  map' := Œª G H œÑ, 
  { app := Œª F, 
    { app := Œª c, œÑ (F c),
      naturality' := begin intros X Y f, dsimp at *, rw [œÑ.naturality] end },
    naturality' := begin intros X Y f, ext1, dsimp at *, rw [‚Üênat_trans.naturality] end } }

variables {C} {D} {E}

def whisker_left (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚üπ H) : (F ‚ãô G) ‚üπ (F ‚ãô H) :=
((whiskering_left C D E) F).map Œ±

@[simp] lemma whisker_left.app (F : C ‚•§ D) {G H : D ‚•§ E} (Œ± : G ‚üπ H) (X : C) : 
  (whisker_left F Œ±) X = Œ± (F X) := 
rfl

def whisker_right {G H : C ‚•§ D} (Œ± : G ‚üπ H) (F : D ‚•§ E) : (G ‚ãô F) ‚üπ (H ‚ãô F) := 
((whiskering_right C D E) F).map Œ±

@[simp] lemma whisker_right.app {G H : C ‚•§ D} (Œ± : G ‚üπ H) (F : D ‚•§ E) (X : C) :
   (whisker_right Œ± F) X = F.map (Œ± X) := 
rfl

@[simp] lemma whisker_left_vcomp (F : C ‚•§ D) {G H K : D ‚•§ E} (Œ± : G ‚üπ H) (Œ≤ : H ‚üπ K) : 
  whisker_left F (Œ± ‚äü Œ≤) = ((whisker_left F Œ±) ‚äü (whisker_left F Œ≤)) :=
((whiskering_left C D E) F).map_comp Œ± Œ≤

@[simp] lemma whisker_right_vcomp {G H K : C ‚•§ D} (Œ± : G ‚üπ H) (Œ≤ : H ‚üπ K) (F : D ‚•§ E)  : 
  whisker_right (Œ± ‚äü Œ≤) F = ((whisker_right Œ± F) ‚äü (whisker_right Œ≤ F)) :=
((whiskering_right C D E) F).map_comp Œ± Œ≤

variables {B : Type u‚ÇÑ} [‚Ñ¨ : category.{u‚ÇÑ v‚ÇÑ} B]
include ‚Ñ¨ 

local attribute [elab_simple] whisker_left whisker_right

@[simp] lemma whisker_left_twice (F : B ‚•§ C) (G : C ‚•§ D) {H K : D ‚•§ E} (Œ± : H ‚üπ K) :
  whisker_left F (whisker_left G Œ±) = whisker_left (F ‚ãô G) Œ± :=
rfl

@[simp] lemma whisker_right_twice {H K : B ‚•§ C} (F : C ‚•§ D) (G : D ‚•§ E) (Œ± : H ‚üπ K) :
  whisker_right (whisker_right Œ± F) G = whisker_right Œ± (F ‚ãô G) :=
rfl

lemma whisker_right_left (F : B ‚•§ C) {G H : C ‚•§ D} (Œ± : G ‚üπ H) (K : D ‚•§ E) :
  whisker_right (whisker_left F Œ±) K = whisker_left F (whisker_right Œ± K) :=
rfl

end category_theory
