/-
Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Johannes H√∂lzl, Reid Barton, Sean Leather

Bundled type and type class instance.
-/

import category_theory.category

universes u v

namespace category_theory

/-- `bundled` is a type bundled with a type class instance for that type. Only
the type class is exposed as a parameter. -/
structure bundled (c : Type u ‚Üí Type v) : Type (max (u+1) v) :=
(Œ± : Type u)
(inst : c Œ±)

/-
Note on the definition of `bundled`:

It is possible to define `bundled` with square brackets for the instance:

  structure bundled (c : Type u ‚Üí Type v) :=
  (Œ± : Type u)
  [inst : c Œ±]

The result is a constructor with this type:

  mk : ‚àÄ (c : Type u ‚Üí Type v) (Œ± : Type u) [c Œ±], bundled c

However, that leads to needing `@mk` in practice and does not appear to provide
any benefit. Therefore, we defined the constructor without square brackets.
-/

namespace bundled
variables {c d : Type u ‚Üí Type v} {Œ± : Type u}

instance : has_coe_to_sort (bundled c) :=
{ S := Type u, coe := bundled.Œ± }

/-- Map over the bundled instance -/
def map (f : ‚àÄ {Œ±}, c Œ± ‚Üí d Œ±) (b : bundled c) : bundled d :=
‚ü®b.Œ±, f b.inst‚ü©

section concrete_category
variables (hom : ‚àÄ {Œ± Œ≤ : Type u}, c Œ± ‚Üí c Œ≤ ‚Üí (Œ± ‚Üí Œ≤) ‚Üí Prop)
variables [h : concrete_category @hom]
include h

instance : category (bundled c) :=
{ hom   := Œªa b, subtype (hom a.2 b.2),
  id    := Œªa, ‚ü®@id a.1, h.hom_id a.2‚ü©,
  comp  := Œªa b c f g, ‚ü®g.1 ‚àò f.1, h.hom_comp a.2 b.2 c.2 f.2 g.2‚ü© }

@[simp] lemma concrete_category_id (X : bundled c) : subtype.val (ùüô X) = id :=
rfl

@[simp] lemma concrete_category_comp {X Y Z : bundled c} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  subtype.val (f ‚â´ g) = g.val ‚àò f.val :=
rfl

instance {R S : bundled c} : has_coe_to_fun (R ‚ü∂ S) :=
{ F   := Œª f, R ‚Üí S,
  coe := Œª f, f.1 }

end concrete_category

end bundled

end category_theory
