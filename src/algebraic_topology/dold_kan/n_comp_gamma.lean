/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import algebraic_topology.dold_kan.gamma_comp_n
import algebraic_topology.dold_kan.n_reflects_iso

/-! The unit isomorphism of the Dold-Kan equivalence

In order to construct the unit isomorphism of the Dold-Kan equivalence,
we first construct natural transformations
`Œì‚ÇÇN‚ÇÅ.nat_trans : N‚ÇÅ ‚ãô Œì‚ÇÇ ‚ü∂ to_karoubi (simplicial_object C)` and
`Œì‚ÇÇN‚ÇÇ.nat_trans : N‚ÇÇ ‚ãô Œì‚ÇÇ ‚ü∂ ùü≠ (simplicial_object C)` (TODO).
It is then shown that `Œì‚ÇÇN‚ÇÇ.nat_trans` is an isomorphism by using
that it becomes an isomorphism after the application of the functor
`N‚ÇÇ : karoubi (simplicial_object C) ‚•§ karoubi (chain_complex C ‚Ñï)`
which reflects isomorphisms (TODO).

-/

noncomputable theory

open category_theory category_theory.category category_theory.limits
  category_theory.idempotents simplex_category opposite simplicial_object
open_locale simplicial dold_kan

namespace algebraic_topology

namespace dold_kan

variables {C : Type*} [category C] [preadditive C]

lemma P_infty_comp_map_mono_eq_zero (X : simplicial_object C) {n : ‚Ñï}
  {Œî' : simplex_category} (i : Œî' ‚ü∂ [n]) [hi : mono i] (h‚ÇÅ : Œî'.len ‚â† n) (h‚ÇÇ : ¬¨is_Œ¥‚ÇÄ i) :
  P_infty.f n ‚â´ X.map i.op = 0 :=
begin
  unfreezingI { induction Œî' using simplex_category.rec with m, },
  obtain ‚ü®k, hk‚ü© := nat.exists_eq_add_of_lt (len_lt_of_mono i
    (Œª h, by { rw ‚Üê h at h‚ÇÅ,  exact h‚ÇÅ rfl, })),
  simp only [len_mk] at hk,
  cases k,
  { change n = m + 1 at hk,
    unfreezingI { subst hk, obtain ‚ü®j, rfl‚ü© := eq_Œ¥_of_mono i, },
    rw is_Œ¥‚ÇÄ.iff at h‚ÇÇ,
    have h‚ÇÉ : 1 ‚â§ (j : ‚Ñï),
    { by_contra,
      exact h‚ÇÇ (by simpa only [fin.ext_iff, not_le, nat.lt_one_iff] using h), },
    exact (higher_faces_vanish.of_P (m+1) m).comp_Œ¥_eq_zero j h‚ÇÇ (by linarith), },
  { simp only [nat.succ_eq_add_one, ‚Üê add_assoc] at hk,
    clear h‚ÇÇ hi,
    subst hk,
    obtain ‚ü®j‚ÇÅ, i, rfl‚ü© := eq_comp_Œ¥_of_not_surjective i (Œª h, begin
      have h' := len_le_of_epi (simplex_category.epi_iff_surjective.2 h),
      dsimp at h',
      linarith,
    end),
    obtain ‚ü®j‚ÇÇ, i, rfl‚ü© := eq_comp_Œ¥_of_not_surjective i (Œª h, begin
      have h' := len_le_of_epi (simplex_category.epi_iff_surjective.2 h),
      dsimp at h',
      linarith,
    end),
    by_cases hj‚ÇÅ : j‚ÇÅ = 0,
    { unfreezingI { subst hj‚ÇÅ, },
      rw [assoc, ‚Üê simplex_category.Œ¥_comp_Œ¥'' (fin.zero_le _)],
      simp only [op_comp, X.map_comp, assoc, P_infty_f],
      erw [(higher_faces_vanish.of_P _ _).comp_Œ¥_eq_zero_assoc _ j‚ÇÇ.succ_ne_zero, zero_comp],
      rw fin.coe_succ,
      linarith, },
    { simp only [op_comp, X.map_comp, assoc, P_infty_f],
      erw [(higher_faces_vanish.of_P _ _).comp_Œ¥_eq_zero_assoc _ hj‚ÇÅ, zero_comp],
      by_contra,
      exact hj‚ÇÅ (by { simp only [fin.ext_iff, fin.coe_zero], linarith, }), }, },
end

@[reassoc]
lemma Œì‚ÇÄ_obj_termwise_map_mono_comp_P_infty (X : simplicial_object C) {Œî Œî' : simplex_category}
  (i : Œî ‚ü∂ Œî') [mono i] :
  Œì‚ÇÄ.obj.termwise.map_mono (alternating_face_map_complex.obj X) i ‚â´ P_infty.f (Œî.len) =
    P_infty.f (Œî'.len) ‚â´ X.map i.op :=
begin
  unfreezingI
  { induction Œî using simplex_category.rec with n,
    induction Œî' using simplex_category.rec with n', },
  dsimp,
  /- We start with the case `i` is an identity -/
  by_cases n = n',
  { unfreezingI { subst h, },
    simp only [simplex_category.eq_id_of_mono i, Œì‚ÇÄ.obj.termwise.map_mono_id, op_id, X.map_id],
    dsimp,
    simp only [id_comp, comp_id], },
  by_cases hi : is_Œ¥‚ÇÄ i,
  /- The case `i = Œ¥ 0` -/
  { have h' : n' = n + 1 := hi.left,
    unfreezingI { subst h', },
    simp only [Œì‚ÇÄ.obj.termwise.map_mono_Œ¥‚ÇÄ' _ i hi],
    dsimp,
    rw [‚Üê P_infty.comm' _ n rfl, alternating_face_map_complex.obj_d_eq],
    simp only [eq_self_iff_true, id_comp, if_true, preadditive.comp_sum],
    rw finset.sum_eq_single (0 : fin (n+2)), rotate,
    { intros b hb hb',
      rw preadditive.comp_zsmul,
      erw [P_infty_comp_map_mono_eq_zero X (simplex_category.Œ¥ b) h
        (by { rw is_Œ¥‚ÇÄ.iff, exact hb', }), zsmul_zero], },
    { simp only [finset.mem_univ, not_true, is_empty.forall_iff], },
    { simpa only [hi.eq_Œ¥‚ÇÄ, fin.coe_zero, pow_zero, one_zsmul], }, },
  /- The case `i ‚â† Œ¥ 0` -/
  { rw [Œì‚ÇÄ.obj.termwise.map_mono_eq_zero _ i _ hi, zero_comp], swap,
    { by_contradiction h',
      exact h (congr_arg simplex_category.len h'.symm), },
    rw P_infty_comp_map_mono_eq_zero,
    { exact h, },
    { by_contradiction h',
      exact hi h', }, },
end

variable [has_finite_coproducts C]

namespace Œì‚ÇÇN‚ÇÅ

/-- The natural transformation `N‚ÇÅ ‚ãô Œì‚ÇÇ ‚ü∂ to_karoubi (simplicial_object C)`. -/
@[simps]
def nat_trans : (N‚ÇÅ : simplicial_object C ‚•§ _) ‚ãô Œì‚ÇÇ ‚ü∂ to_karoubi _ :=
{ app := Œª X,
  { f :=
    { app := Œª Œî, (Œì‚ÇÄ.splitting K[X]).desc Œî (Œª A, P_infty.f A.1.unop.len ‚â´ X.map (A.e.op)),
      naturality' := Œª Œî Œî' Œ∏, begin
        apply (Œì‚ÇÄ.splitting K[X]).hom_ext',
        intro A,
        change _ ‚â´ (Œì‚ÇÄ.obj K[X]).map Œ∏  ‚â´ _ = _,
        simp only [splitting.Œπ_desc_assoc, assoc,
          Œì‚ÇÄ.obj.map_on_summand'_assoc, splitting.Œπ_desc],
        erw Œì‚ÇÄ_obj_termwise_map_mono_comp_P_infty_assoc X (image.Œπ (Œ∏.unop ‚â´ A.e)),
        dsimp only [to_karoubi],
        simp only [‚Üê X.map_comp],
        congr' 2,
        simp only [eq_to_hom_refl, id_comp, comp_id, ‚Üê op_comp],
        exact quiver.hom.unop_inj (A.fac_pull Œ∏),
      end, },
    comm := begin
      apply (Œì‚ÇÄ.splitting K[X]).hom_ext,
      intro n,
      dsimp [N‚ÇÅ],
      simp only [‚Üê splitting.Œπ_summand_id, splitting.Œπ_desc,
        comp_id, splitting.Œπ_desc_assoc, assoc, P_infty_f_idem_assoc],
    end, },
  naturality' := Œª X Y f, begin
    ext1,
    apply (Œì‚ÇÄ.splitting K[X]).hom_ext,
    intro n,
    dsimp [N‚ÇÅ, to_karoubi],
    simpa only [‚Üêsplitting.Œπ_summand_id, splitting.Œπ_desc, splitting.Œπ_desc_assoc,
      assoc, P_infty_f_idem_assoc, karoubi.comp_f, nat_trans.comp_app, Œì‚ÇÇ_map_f_app,
      homological_complex.comp_f, alternating_face_map_complex.map_f,
      P_infty_f_naturality_assoc, nat_trans.naturality],
  end, }

end Œì‚ÇÇN‚ÇÅ

end dold_kan

end algebraic_topology
