/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Eric Wieser
-/
import algebraic_geometry.projective_spectrum.topology
import topology.sheaves.local_predicate
import ring_theory.localization.at_prime
import algebraic_geometry.locally_ringed_space

/-!
# The structure sheaf on `projective_spectrum ùíú`.

In `src/algebraic_geometry/topology.lean`, we have given a topology on `projective_spectrum ùíú`; in
this file we will construct a sheaf on `projective_spectrum ùíú`.

## Notation
- `R` is a commutative semiring;
- `A` is a commutative ring and an `R`-algebra;
- `ùíú : ‚Ñï ‚Üí submodule R A` is the grading of `A`;
- `U` is opposite object of some open subset of `projective_spectrum.Top`.

## Main definitions and results
* `projective_spectrum.Top`: the topological space of `projective_spectrum ùíú` endowed with the
  zariski topology
* `algebraic_geometry.projective_spectrum.structure_sheaf.homogeneous_localization`: given `x` in
  `projective_spectrum.Top ùíú`, homogeneous localization at `x` is the subring of `A‚Çì` (`A` localized
  at prime `x`) where the numerator and denominator have same grading.

Then we define the structure sheaf as the subsheaf of all dependent function
`f : Œ† x : U, homogeneous_localization x` such that `f` is locally expressible as ratio of two
elements of the *same grading*, i.e. `‚àÄ y ‚àà U, ‚àÉ (V ‚äÜ U) (i : ‚Ñï) (a b ‚àà ùíú i), ‚àÄ z ‚àà V, f z = a / b`.

* `algebraic_geometry.projective_spectrum.structure_sheaf.is_locally_fraction`: the predicate that
  a dependent function is locally expressible as ration of two elements of the same grading.
* `algebraic_geometry.projective_spectrum.structure_sheaf.sections_subring`: the dependent functions
  satisfying the above local property forms a subring of all dependent functions
  `Œ† x : U, homogeneous_localization x`.
* `algebraic_geometry.Proj.structure_sheaf`: the sheaf with `U ‚Ü¶ sections_subring U` and natural
  restriction map.

Then we establish that `Proj ùíú` is a `LocallyRingedSpace`:
* `algebraic_geometry.homogeneous_localization.is_local`: for any `x : projective_spectrum ùíú`,
  `homogeneous_localization x` is a local ring.
* `algebraic_geometry.Proj.stalk_iso'`: for any `x : projective_spectrum ùíú`, the stalk of
  `Proj.structure_sheaf` at `x` is isomorphic to `homogeneous_localization x`.
* `algebraic_geometry.Proj.to_LocallyRingedSpace`: `Proj` as a locally ringed space.

## References

* [Robin Hartshorne, *Algebraic Geometry*][Har77]


-/

noncomputable theory

namespace algebraic_geometry

open_locale direct_sum big_operators pointwise
open direct_sum set_like

variables {R A: Type*}
variables [comm_ring R] [comm_ring A] [algebra R A]
variables (ùíú : ‚Ñï ‚Üí submodule R A) [graded_algebra ùíú]

local notation `at ` x := localization.at_prime x.as_homogeneous_ideal.to_ideal

open Top topological_space category_theory opposite

/--
The underlying topology of `Proj` is the projective spectrum of graded ring `A`.
-/
def projective_spectrum.Top : Top := Top.of (projective_spectrum ùíú)

namespace projective_spectrum.structure_sheaf

namespace homogeneous_localization

open set_like.graded_monoid submodule

variables {ùíú} (x : projective_spectrum.Top ùíú)

/--
If `x` is a point in `Proj ùíú`, then `y ‚àà A‚Çì` is said to satisfy `num_denom_same_deg` if and only if
`y = a / b` where `a` and `b` are both in `ùíú i` for some `i`.
-/
@[nolint has_inhabited_instance]
structure num_denom_same_deg :=
(deg : ‚Ñï)
(num denom : ùíú deg)
(denom_not_mem : denom.1 ‚àâ x.as_homogeneous_ideal)

@[ext] lemma ext {c1 c2 : num_denom_same_deg x} (hdeg : c1.deg = c2.deg)
  (hnum : c1.num.1 = c2.num.1) (hdenom : c1.denom.1 = c2.denom.1) :
  c1 = c2 :=
begin
  rcases c1 with ‚ü®i1, ‚ü®n1, hn1‚ü©, ‚ü®d1, hd1‚ü©, h1‚ü©,
  rcases c2 with ‚ü®i2, ‚ü®n2, hn2‚ü©, ‚ü®d2, hd2‚ü©, h2‚ü©,
  dsimp only at *,
  simp only,
  exact ‚ü®hdeg, by subst hdeg; subst hnum, by subst hdeg; subst hdenom‚ü©,
end

instance : has_one (num_denom_same_deg x) :=
{ one :=
  { deg := 0,
    num := ‚ü®1, one_mem‚ü©,
    denom := ‚ü®1, one_mem‚ü©,
    denom_not_mem := Œª rid, x.is_prime.ne_top $ (ideal.eq_top_iff_one _).mpr rid } }

@[simp] lemma deg_one : (1 : num_denom_same_deg x).deg = 0 := rfl
@[simp] lemma num_one : ((1 : num_denom_same_deg x).num : A) = 1 := rfl
@[simp] lemma denom_one : ((1 : num_denom_same_deg x).denom : A) = 1 := rfl

instance : has_zero (num_denom_same_deg x) :=
{ zero :=
  { deg := 0,
    num := 0,
    denom := ‚ü®1, one_mem‚ü©,
    denom_not_mem := Œª r, x.is_prime.ne_top $ (ideal.eq_top_iff_one _).mpr r } }

@[simp] lemma deg_zero : (0 : num_denom_same_deg x).deg = 0 := rfl
@[simp] lemma num_zero : (0 : num_denom_same_deg x).num = 0 := rfl
@[simp] lemma denom_zero : ((0 : num_denom_same_deg x).denom : A) = 1 := rfl

instance : has_mul (num_denom_same_deg x) :=
{ mul := Œª p q,
  { deg := p.deg + q.deg,
    num := ‚ü®p.num * q.num, mul_mem p.num.prop q.num.prop‚ü©,
    denom := ‚ü®p.denom * q.denom, mul_mem p.denom.prop q.denom.prop‚ü©,
    denom_not_mem := Œª r, or.elim (x.is_prime.mem_or_mem r) p.denom_not_mem q.denom_not_mem } }

lemma deg_mul (c1 c2 : num_denom_same_deg x) : (c1 * c2).deg = c1.deg + c2.deg := rfl
lemma num_mul (c1 c2 : num_denom_same_deg x) : ((c1 * c2).num : A) = c1.num * c2.num := rfl
lemma denom_mul (c1 c2 : num_denom_same_deg x) : ((c1 * c2).denom : A) = c1.denom * c2.denom := rfl

instance : has_add (num_denom_same_deg x) :=
{ add := Œª c1 c2,
  { deg := c1.deg + c2.deg,
    num := ‚ü®c1.denom.1 * c2.num.1 + c2.denom.1 * c1.num.1,
      add_mem _ (mul_mem c1.denom.2 c2.num.2)
        (add_comm c2.deg c1.deg ‚ñ∏ mul_mem c2.denom.2 c1.num.2)‚ü©,
    denom := ‚ü®c1.denom.1 * c2.denom.1, mul_mem c1.denom.2 c2.denom.2‚ü©,
    denom_not_mem := Œª r, or.elim (x.is_prime.mem_or_mem r) c1.denom_not_mem c2.denom_not_mem } }

lemma deg_add (c1 c2 : num_denom_same_deg x) : (c1 + c2).deg = c1.deg + c2.deg := rfl
lemma num_add (c1 c2 : num_denom_same_deg x) :
  ((c1 + c2).num : A) = c1.denom * c2.num + c2.denom * c1.num := rfl
lemma denom_add (c1 c2 : num_denom_same_deg x) :
  ((c1 + c2).denom : A) = c1.denom * c2.denom := rfl

instance : has_neg (num_denom_same_deg x) :=
{ neg := Œª c, ‚ü®c.deg, ‚ü®-c.num.1, neg_mem _ c.num.2‚ü©, c.denom, c.denom_not_mem‚ü© }

lemma deg_neg (c : num_denom_same_deg x) : (-c).deg = c.deg := rfl
lemma num_neg (c : num_denom_same_deg x) : (-c).num.1 = -c.num.1 := rfl
lemma denom_neg (c : num_denom_same_deg x) : (-c).denom.1 = c.denom.1 := rfl

instance : comm_monoid (num_denom_same_deg x) :=
{ one := 1,
  mul := (*),
  mul_assoc := Œª c1 c2 c3, ext _ (add_assoc _ _ _) (mul_assoc _ _ _) (mul_assoc _ _ _),
  one_mul := Œª c, ext _ (zero_add _) (one_mul _) (one_mul _),
  mul_one := Œª c, ext _ (add_zero _) (mul_one _) (mul_one _),
  mul_comm := Œª c1 c2, ext _ (add_comm _ _) (mul_comm _ _) (mul_comm _ _) }

def num_denom_same_deg.embedding (p : num_denom_same_deg x) : at x :=
localization.mk p.num ‚ü®p.denom, p.denom_not_mem‚ü©

def homogeneous_localization : Type* := quotient (setoid.ker $ num_denom_same_deg.embedding x)

variable {x}
def homogeneous_localization.val (y : homogeneous_localization x) : at x :=
quotient.lift_on' y (num_denom_same_deg.embedding x) $ Œª _ _, id

variable (x)
lemma homogeneous_localization.val_injective :
  function.injective (@homogeneous_localization.val _ _ _ _ _ ùíú _ x) :=
Œª a b, quotient.rec_on_subsingleton‚ÇÇ' a b $ Œª a b h, quotient.sound' h

instance : has_pow (homogeneous_localization x) ‚Ñï :=
{ pow := Œª z n, quotient.lift_on' z
    (Œª c, @@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x)
      { deg := n ‚Ä¢ c.deg,
        num := ‚ü®c.num.1 ^ n, pow_mem n c.num.2‚ü©,
        denom := ‚ü®c.denom.1 ^ n, pow_mem n c.denom.2‚ü©,
        denom_not_mem := Œª r, begin
          dsimp only at r,
          cases n,
          { erw [pow_zero, ‚Üê ideal.eq_top_iff_one] at r,
            exact x.is_prime.ne_top r, },
          { apply c.denom_not_mem ((x.is_prime.pow_mem_iff_mem n.succ (nat.zero_lt_succ _)).mp r) }
        end }) $ Œª y1 y2 (h : localization.mk _ _ = localization.mk _ _), begin
          rw quotient.eq,
          change localization.mk _ _ = localization.mk _ _,
          simp only [‚Üê subtype.val_eq_coe] at h ‚ä¢,
          erw [‚Üê localization.mk_pow n y1.num.1 (‚ü®y1.denom, y1.denom_not_mem‚ü© :
            x.as_homogeneous_ideal.to_ideal.prime_compl),
            ‚Üê localization.mk_pow n y2.num.1 (‚ü®y2.denom, y2.denom_not_mem‚ü© :
            x.as_homogeneous_ideal.to_ideal.prime_compl), h],
          refl,
        end }

instance : has_scalar ‚Ñ§ (homogeneous_localization x) :=
{ smul := Œª m z, quotient.lift_on' z
    (Œª c, @@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x)
      { deg := c.deg,
        num := ‚ü®m ‚Ä¢ c.num.1, begin
          rw zsmul_eq_mul,
          suffices : (m : A) ‚àà ùíú 0,
          { simpa only [zero_add] using mul_mem this c.num.2 },
          { induction m using int.induction_on with m ih m ih,
            { exact zero_mem _ },
            { exact add_mem _ ih one_mem, },
            { push_cast at ih ‚ä¢,
              exact sub_mem _ ih one_mem, } },
        end‚ü©,
        denom := c.denom,
        denom_not_mem := c.denom_not_mem }) $
    Œª y1 y2 (h : localization.mk _ _ = localization.mk _ _), begin
      rw quotient.eq,
      change localization.mk _ _ = localization.mk _ _,
      simp only [‚Üê subtype.val_eq_coe] at h ‚ä¢,
      erw [show (localization.mk (m ‚Ä¢ y1.num.val) ‚ü®y1.denom.1, y1.denom_not_mem‚ü© : at x) =
        localization.mk m 1 * localization.mk y1.num.1 ‚ü®y1.denom.1, y1.denom_not_mem‚ü©,
          by rw [localization.mk_mul _ _, one_mul, zsmul_eq_mul],
        show (localization.mk (m ‚Ä¢ y2.num.val) ‚ü®y2.denom.1, y2.denom_not_mem‚ü© : at x) =
        localization.mk m 1 * localization.mk y2.num.1 ‚ü®y2.denom.1, y2.denom_not_mem‚ü©,
          by rw [localization.mk_mul _ _, one_mul, zsmul_eq_mul], h],
      refl,
    end }

instance nat_scalar : has_scalar ‚Ñï (homogeneous_localization x) :=
{ smul := Œª n z, (n : ‚Ñ§) ‚Ä¢ z }

instance : has_neg (homogeneous_localization x) :=
{ neg := Œª z, quotient.lift_on' z
    (Œª c, @@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x) (-c)) $
    Œª y1 y2 (h : localization.mk _ _ = localization.mk _ _), begin
      rw quotient.eq,
      change localization.mk _ _ = localization.mk _ _,
      simp only [‚Üê subtype.val_eq_coe] at h ‚ä¢,
      erw [‚Üê localization.neg_mk, ‚Üê localization.neg_mk],
      congr' 1,
    end }

instance : has_add (homogeneous_localization x) :=
{ add := Œª z1 z2, quotient.lift_on‚ÇÇ' z1 z2
    (Œª c1 c2, @@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x) (c1 + c2)) $
    Œª c1 c2 c1' c2' (h1 : localization.mk _ _ = localization.mk _ _)
      (h2 : localization.mk _ _ = localization.mk _ _), begin
        rw quotient.eq,
        change localization.mk _ _ = localization.mk _ _,
        simp only [num_add, denom_add],
        have h3 := congr_arg2 (+) h1 h2,
        erw [localization.add_mk, localization.add_mk] at h3,
        convert h3,
      end }

instance : has_sub (homogeneous_localization x) :=
{ sub := Œª z1 z2, z1 + (-z2) }

instance : has_mul (homogeneous_localization x) :=
{ mul := Œª z1 z2, quotient.lift_on‚ÇÇ' z1 z2
    (Œª c1 c2, @@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x) (c1 * c2)) $
    Œª c1 c2 c1' c2' (h1 : localization.mk _ _ = localization.mk _ _)
      (h2 : localization.mk _ _ = localization.mk _ _), begin
        rw quotient.eq,
        change localization.mk _ _ = localization.mk _ _,
        simp only [num_mul, denom_mul],
        have h3 := congr_arg2 (*) h1 h2,
        erw [localization.mk_mul, localization.mk_mul] at h3,
        convert h3,
      end  }

instance : has_one (homogeneous_localization x) :=
{ one := @@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x) 1 }

instance : has_zero (homogeneous_localization x) :=
{ zero := @@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x) 0 }

lemma homogeneous_localization.zero_eq :
  (0 : homogeneous_localization x) =@@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x) 0 :=
rfl

lemma homogeneous_localization.one_eq :
  (1 : homogeneous_localization x) =@@quotient.mk (setoid.ker $ num_denom_same_deg.embedding x) 1 :=
rfl

variable {x}
lemma zero_val : (0 : homogeneous_localization x).val= 0 :=
begin
  rw [homogeneous_localization.zero_eq, homogeneous_localization.val, quotient.lift_on'_mk],
  change localization.mk _ _ = _,
  convert localization.mk_zero _,
end

lemma one_val : (1 : homogeneous_localization x).val= 1 :=
begin
  rw [homogeneous_localization.one_eq, homogeneous_localization.val, quotient.lift_on'_mk],
  change localization.mk _ _ = _,
  simp only [num_one, denom_one],
  convert localization.mk_self _,
  refl,
end

lemma add_val (y1 y2 : homogeneous_localization x) :
  (y1 + y2).val = y1.val + y2.val :=
begin
  induction y1 using quotient.induction_on,
  induction y2 using quotient.induction_on,
  unfold homogeneous_localization.val has_add.add,
  simp only [quotient.lift_on‚ÇÇ'_mk, quotient.lift_on'_mk],
  change localization.mk _ _ = localization.mk _ _ + localization.mk _ _,
  dsimp only,
  rw [localization.add_mk],
  refl,
end

lemma mul_val (y1 y2 : homogeneous_localization x) :
  (y1 * y2).val = y1.val * y2.val :=
begin
  induction y1 using quotient.induction_on,
  induction y2 using quotient.induction_on,
  unfold homogeneous_localization.val has_mul.mul,
  simp only [quotient.lift_on‚ÇÇ'_mk, quotient.lift_on'_mk],
  change localization.mk _ _ = localization.mk _ _ * localization.mk _ _,
  dsimp only,
  rw [localization.mk_mul],
  refl,
end

lemma neg_val (y : homogeneous_localization x) :
  (-y).val = -y.val :=
begin
  induction y using quotient.induction_on,
  unfold homogeneous_localization.val has_neg.neg,
  simp only [quotient.lift_on‚ÇÇ'_mk, quotient.lift_on'_mk],
  change localization.mk _ _ = - localization.mk _ _,
  dsimp only,
  rw [localization.neg_mk],
  refl,
end

lemma sub_val (y1 y2 : homogeneous_localization x) :
  (y1 - y2).val = y1.val - y2.val :=
begin
  rw [show y1 - y2 = y1 + (-y2), from rfl, add_val, neg_val],
  refl,
end

lemma nsmul_val (y : homogeneous_localization x) (n : ‚Ñï) :
  (n ‚Ä¢ y).val = n ‚Ä¢ y.val :=
begin
  induction y using quotient.induction_on,
  unfold homogeneous_localization.val has_scalar.smul,
  simp only [quotient.lift_on‚ÇÇ'_mk, quotient.lift_on'_mk],
  change localization.mk _ _ = n ‚Ä¢ localization.mk _ _,
  dsimp only,
  rw [nsmul_eq_mul, show (n : at x) = localization.mk n 1, begin
    induction n with n ih,
    { erw localization.mk_zero, refl, },
    { rw [nat.succ_eq_add_one],
      push_cast,
      rw [ih, ‚Üê localization.mk_one, localization.add_mk, mul_one, one_mul, add_comm],
      congr' 1,
      erw one_mul,
      refl, },
  end, localization.mk_mul, one_mul],
  congr' 1,
  simp only [‚Üê subtype.val_eq_coe],
  rw [show ‚Üën * y.num.val = ‚Üë(n : ‚Ñ§) * y.num.val, by norm_cast, ‚Üê zsmul_eq_mul],
  refl,
end

lemma zsmul_val (y : homogeneous_localization x) (n : ‚Ñ§) :
  (n ‚Ä¢ y).val = n ‚Ä¢ y.val :=
begin
  induction y using quotient.induction_on,
  unfold homogeneous_localization.val has_scalar.smul,
  simp only [quotient.lift_on‚ÇÇ'_mk, quotient.lift_on'_mk],
  change localization.mk _ _ = n ‚Ä¢ localization.mk _ _,
  dsimp only,
  rw [zsmul_eq_mul, show (n : at x) = localization.mk n 1, begin
    induction n using int.induction_on with n ih n ih,
    { erw localization.mk_zero, refl, },
    { push_cast,
      erw [ih, ‚Üê localization.mk_one, localization.add_mk, mul_one, one_mul, add_comm, one_mul],
      congr' 1, },
    { push_cast at ih ‚ä¢,
      rw neg_eq_iff_neg_eq at ih,
      erw [show -(n : at x) - 1 = - (n + 1), by ring, ‚Üê ih,
        show -(n : A) - 1 = - (n + 1), by ring, localization.neg_mk, neg_neg, ‚Üê localization.mk_one,
        localization.add_mk, one_mul, mul_one, localization.neg_mk, one_mul, add_comm], },
  end, localization.mk_mul, one_mul],
  congr' 1,
  simp only [‚Üê subtype.val_eq_coe],
  rw [‚Üê zsmul_eq_mul],
  refl,
end

lemma pow_val (n : ‚Ñï) (y : homogeneous_localization x) :
  (y ^ n).val = y.val ^ n :=
begin
  induction y using quotient.induction_on,
  unfold homogeneous_localization.val has_pow.pow,
  simp only [quotient.lift_on‚ÇÇ'_mk, quotient.lift_on'_mk],
  change localization.mk _ _ = (localization.mk _ _) ^ n,
  rw localization.mk_pow,
  dsimp only,
  congr' 1,
end

instance : comm_ring (homogeneous_localization x) :=
(homogeneous_localization.val_injective x).comm_ring _ zero_val one_val add_val mul_val neg_val
  sub_val nsmul_val zsmul_val pow_val

-- def homogeneous_localization := set.range (embedding x)

-- instance : comm_ring (homogeneous_localization x) := sorry

#exit
attribute [simp] num_denom_same_deg.eq

variable (x)
/--
Auxiliary definition of `homogeneous_localization`: its underlying set.
-/
def carrier : set (at x) :=
{y | nonempty (num_denom_same_deg y)}

variable {x}
lemma one_mem' : (1 : at x) ‚àà carrier x := nonempty.intro
{ num := 1,
  denom := 1,
  denom_not_mem := (ideal.ne_top_iff_one _).mp x.is_prime.ne_top,
  deg := 0,
  num_mem := one_mem,
  denom_mem := one_mem,
  eq := by simp }

lemma zero_mem' : (0 : at x) ‚àà carrier x := nonempty.intro
{ num := 0,
  denom := 1,
  denom_not_mem := (ideal.ne_top_iff_one _).mp x.is_prime.ne_top,
  deg := 0,
  num_mem := zero_mem _,
  denom_mem := one_mem,
  eq := by simp }

lemma mul_mem' {y1 y2} (hy1 : y1 ‚àà carrier x) (hy2 : y2 ‚àà carrier x) : y1 * y2 ‚àà carrier x :=
match hy1, hy2 with
| ‚ü®c1‚ü©, ‚ü®c2‚ü© := nonempty.intro
  { num := c1.num * c2.num,
    denom := c1.denom * c2.denom,
    denom_not_mem := Œª r, or.elim (x.is_prime.mem_or_mem r) c1.denom_not_mem c2.denom_not_mem,
    deg := c1.deg + c2.deg,
    num_mem := mul_mem c1.num_mem c2.num_mem,
    denom_mem := mul_mem c1.denom_mem c2.denom_mem,
    eq := by simpa only [‚Üê c1.eq, ‚Üê c2.eq, localization.mk_mul] }
end

lemma add_mem' {y1 y2} (hy1 : y1 ‚àà carrier x) (hy2 : y2 ‚àà carrier x) : y1 + y2 ‚àà carrier x :=
match hy1, hy2 with
| ‚ü®c1‚ü©, ‚ü®c2‚ü© := nonempty.intro
  { num := c1.denom * c2.num + c2.denom * c1.num,
    denom := c1.denom * c2.denom,
    denom_not_mem := Œª r, or.elim (x.is_prime.mem_or_mem r) c1.denom_not_mem c2.denom_not_mem,
    deg := c1.deg + c2.deg,
    num_mem := add_mem _ (mul_mem c1.denom_mem c2.num_mem)
      (add_comm c2.deg c1.deg ‚ñ∏ mul_mem c2.denom_mem c1.num_mem),
    denom_mem := mul_mem c1.denom_mem c2.denom_mem,
    eq := by simpa only [‚Üê c1.eq, ‚Üê c2.eq, localization.add_mk] }
end

lemma neg_mem' {y} (hy : y ‚àà carrier x) : -y ‚àà carrier x :=
match hy with
| ‚ü®c‚ü© := nonempty.intro
  { num := -c.num,
    denom := c.denom,
    denom_not_mem := c.denom_not_mem,
    deg := c.deg,
    num_mem := neg_mem _ c.num_mem,
    denom_mem := c.denom_mem,
    eq := by simp only [‚Üê c.eq, localization.neg_mk] }
end

end homogeneous_localization

section
variable {ùíú}
open homogeneous_localization

/-- given `x` in `projective_spectrum.Top ùíú`, homogeneous localization at `x` is the subring of `A‚Çì`
(`A` localized at prime `x`) where the numerator and denominator have same grading. -/
@[derive [comm_ring], nolint has_inhabited_instance]
def homogeneous_localization (x : projective_spectrum.Top ùíú) : Type* :=
subring.mk (carrier x) (Œª _ _, mul_mem') one_mem' (Œª _ _, add_mem') zero_mem'  (Œª _, neg_mem')

end

namespace homogeneous_localization
variables {ùíú} {x : projective_spectrum.Top ùíú}

/-- numerator of an element in `homogeneous_localization x`-/
def num (f : homogeneous_localization x) : A := (nonempty.some f.2).num
/-- denominator of an element in `homogeneous_localization x`-/
def denom (f : homogeneous_localization x) : A := (nonempty.some f.2).denom
/-- For an element in `homogeneous_localization x`, degree is the natural number `i` such that
  `ùíú i` contains both numerator and denominator. -/
def deg (f : homogeneous_localization x) : ‚Ñï := (nonempty.some f.2).deg

lemma denom_not_mem (f : homogeneous_localization x) : f.denom ‚àâ x.as_homogeneous_ideal :=
(nonempty.some f.2).denom_not_mem

lemma num_mem (f : homogeneous_localization x) : f.num ‚àà ùíú f.deg := (nonempty.some f.2).num_mem
lemma denom_mem (f : homogeneous_localization x) : f.denom ‚àà ùíú f.deg :=
(nonempty.some f.2).denom_mem

lemma eq_num_div_denom (f : homogeneous_localization x) :
  f.1 = localization.mk f.num ‚ü®f.denom, f.denom_not_mem‚ü© :=
(nonempty.some f.2).eq.symm

lemma val_add (f g : homogeneous_localization x) : (f + g).1 = f.val + g.val := rfl

lemma val_neg (f : homogeneous_localization x) : (-f).val = -f.val := rfl

lemma val_mul (f g : homogeneous_localization x) : (f * g).val = f.val * g.val := rfl

lemma val_sub (f g : homogeneous_localization x) : (f - g).val = f.val - g.val := rfl

lemma val_zero : (0 : homogeneous_localization x).val = localization.mk 0 1 :=
by rw localization.mk_zero; refl

lemma val_one : (1 : homogeneous_localization x).val = localization.mk 1 1 :=
by rw localization.mk_one; refl

lemma ext_iff_val (f g : homogeneous_localization x) : f = g ‚Üî f.1 = g.1:= subtype.ext_iff_val

end homogeneous_localization

end projective_spectrum.structure_sheaf

end algebraic_geometry
