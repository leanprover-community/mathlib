/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin, Scott Morrison
-/
import algebraic_geometry.prime_spectrum
import algebra.category.CommRing.limits
import topology.sheaves.local_predicate
import topology.sheaves.forget
import ring_theory.localization
import ring_theory.subring

/-!
# The structure sheaf on `prime_spectrum R`.

We define the structure sheaf on `Top.of (prime_spectrum R)`, for a commutative ring `R`.
We define this as a subsheaf of the sheaf of dependent functions into the localizations,
cut out by the condition that the function must be locally equal to a ratio of elements of `R`.

Because the condition "is equal to a fraction" passes to smaller open subsets,
the subset of functions satisfying this condition is automatically a subpresheaf.
Because the condition "is locally equal to a fraction" is local,
it is also a subsheaf.

(It may be helpful to refer back to `topology.sheaves.sheaf_of_functions`,
where we show that dependent functions into any type family form a sheaf,
and also `topology.sheaves.local_predicate`, where we characterise the predicates
which pick out sub-presheaves and sub-sheaves of these sheaves.)

We also set up the ring structure, obtaining
`structure_sheaf R : sheaf CommRing (Top.of (prime_spectrum R))`.
-/

universe u

noncomputable theory

variables (R : Type u) [comm_ring R]

open Top
open topological_space
open category_theory
open opposite

namespace algebraic_geometry

/--
$Spec R$, just as a topological space.
-/
def Spec.Top : Top := Top.of (prime_spectrum R)

namespace structure_sheaf

/--
The type family over `prime_spectrum R` consisting of the localization over each point.
-/
@[derive [comm_ring, local_ring]]
def localizations (P : Spec.Top R) : Type u := localization.at_prime P.as_ideal

instance (P : Spec.Top R) : inhabited (localizations R P) :=
‚ü®(localization.of _).to_map 1‚ü©

variables {R}

/--
The predicate saying that a dependent function on an open `U` is realised as a fixed fraction
`r / s` in each of the stalks (which are localizations at various prime ideals).
-/
def is_fraction {U : opens (Spec.Top R)} (f : Œ† x : U, localizations R x) : Prop :=
‚àÉ (r s : R), ‚àÄ x : U,
  ¬¨ (s ‚àà x.1.as_ideal) ‚àß f x * (localization.of _).to_map s = (localization.of _).to_map r

variables (R)

/--
The predicate `is_fraction` is "prelocal",
in the sense that if it holds on `U` it holds on any open subset `V` of `U`.
-/
def is_fraction_prelocal : prelocal_predicate (localizations R) :=
{ pred := Œª U f, is_fraction f,
  res := by { rintro V U i f ‚ü®r, s, w‚ü©, exact ‚ü®r, s, Œª x, w (i x)‚ü© } }

/--
We will define the structure sheaf as
the subsheaf of all dependent functions in `Œ† x : U, localizations R x`
consisting of those functions which can locally be expressed as a ratio of
(the images in the localization of) elements of `R`.

Quoting Hartshorne:

For an open set $$U ‚äÜ Spec A$$, we define $$ùí™(U)$$ to be the set of functions
$$s : U ‚Üí ‚®Ü_{ùî≠ ‚àà U} A_ùî≠$$, such that $s(ùî≠) ‚àà A_ùî≠$$ for each $$ùî≠$$,
and such that $$s$$ is locally a quotient of elements of $$A$$:
to be precise, we require that for each $$ùî≠ ‚àà U$$, there is a neighborhood $$V$$ of $$ùî≠$$,
contained in $$U$$, and elements $$a, f ‚àà A$$, such that for each $$ùîÆ ‚àà V, f ‚àâ ùîÆ$$,
and $$s(ùîÆ) = a/f$$ in $$A_ùîÆ$$.

Now Hartshorne had the disadvantage of not knowing about dependent functions,
so we replace his circumlocution about functions into a disjoint union with
`Œ† x : U, localizations x`.
-/
def is_locally_fraction : local_predicate (localizations R) :=
(is_fraction_prelocal R).sheafify

@[simp]
lemma is_locally_fraction_pred
  {U : opens (Spec.Top R)} (f : Œ† x : U, localizations R x) :
  (is_locally_fraction R).pred f =
  ‚àÄ x : U, ‚àÉ (V) (m : x.1 ‚àà V) (i : V ‚ü∂ U),
  ‚àÉ (r s : R), ‚àÄ y : V,
  ¬¨ (s ‚àà y.1.as_ideal) ‚àß
    f (i y : U) * (localization.of _).to_map s = (localization.of _).to_map r :=
rfl

/--
The functions satisfying `is_locally_fraction` form a submonoid.
-/
def sections_subring (U : (opens (Spec.Top R))·µí·µñ) :
  subring (Œ† x : unop U, localizations R x) :=
{ carrier := { f | (is_locally_fraction R).pred f },
  zero_mem' :=
  begin
    refine Œª x, ‚ü®unop U, x.2, ùüô _, 0, 1, Œª y, ‚ü®_, _‚ü©‚ü©,
    { rw ‚Üêideal.ne_top_iff_one, exact y.1.is_prime.1, },
    { simp, },
  end,
  one_mem' :=
  begin
    refine Œª x, ‚ü®unop U, x.2, ùüô _, 1, 1, Œª y, ‚ü®_, _‚ü©‚ü©,
    { rw ‚Üêideal.ne_top_iff_one, exact y.1.is_prime.1, },
    { simp, },
  end,
  add_mem' :=
  begin
    intros a b ha hb x,
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©,
    rcases hb x with ‚ü®Vb, mb, ib, rb, sb, wb‚ü©,
    refine ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, opens.inf_le_left _ _ ‚â´ ia, ra * sb + rb * sa, sa * sb, _‚ü©,
    intro y,
    rcases wa (opens.inf_le_left _ _ y) with ‚ü®nma, wa‚ü©,
    rcases wb (opens.inf_le_right _ _ y) with ‚ü®nmb, wb‚ü©,
    fsplit,
    { intro H, cases y.1.is_prime.mem_or_mem H; contradiction, },
    { simp only [add_mul, ring_hom.map_add, pi.add_apply, ring_hom.map_mul],
      erw [‚Üêwa, ‚Üêwb],
      simp only [mul_assoc],
      congr' 2,
      rw [mul_comm], refl, }
  end,
  neg_mem' :=
  begin
    intros a ha x,
    rcases ha x with ‚ü®V, m, i, r, s, w‚ü©,
    refine ‚ü®V, m, i, -r, s, _‚ü©,
    intro y,
    rcases w y with ‚ü®nm, w‚ü©,
    fsplit,
    { exact nm, },
    { simp only [ring_hom.map_neg, pi.neg_apply],
      erw [‚Üêw],
      simp only [neg_mul_eq_neg_mul_symm], }
  end,
  mul_mem' :=
  begin
    intros a b ha hb x,
    rcases ha x with ‚ü®Va, ma, ia, ra, sa, wa‚ü©,
    rcases hb x with ‚ü®Vb, mb, ib, rb, sb, wb‚ü©,
    refine ‚ü®Va ‚äì Vb, ‚ü®ma, mb‚ü©, opens.inf_le_left _ _ ‚â´ ia, ra * rb, sa * sb, _‚ü©,
    intro y,
    rcases wa (opens.inf_le_left _ _ y) with ‚ü®nma, wa‚ü©,
    rcases wb (opens.inf_le_right _ _ y) with ‚ü®nmb, wb‚ü©,
    fsplit,
    { intro H, cases y.1.is_prime.mem_or_mem H; contradiction, },
    { simp only [pi.mul_apply, ring_hom.map_mul],
      erw [‚Üêwa, ‚Üêwb],
      simp only [mul_left_comm, mul_assoc, mul_comm],
      refl, }
  end, }

end structure_sheaf

open structure_sheaf

/--
The structure sheaf (valued in `Type`, not yet `CommRing`) is the subsheaf consisting of
functions satisfying `is_locally_fraction`.
-/
def structure_sheaf_in_Type : sheaf (Type u) (Spec.Top R):=
subsheaf_to_Types (is_locally_fraction R)

instance comm_ring_structure_sheaf_in_Type_obj (U : (opens (Spec.Top R))·µí·µñ) :
  comm_ring ((structure_sheaf_in_Type R).presheaf.obj U) :=
(sections_subring R U).to_comm_ring

open prime_spectrum

/--
The `stalk_to_fiber` map for the structure sheaf is surjective.
(In fact, an isomorphism, as constructed below in `stalk_iso_Type`.)
-/
lemma structure_sheaf_stalk_to_fiber_surjective (x : Top.of (prime_spectrum R)) :
  function.surjective (stalk_to_fiber (is_locally_fraction R) x) :=
begin
  apply stalk_to_fiber_surjective,
  intro t,
  obtain ‚ü®r, ‚ü®s, hs‚ü©, rfl‚ü© := (localization.of _).mk'_surjective t,
  exact ‚ü®‚ü®‚ü®basic_open s, basic_open_open‚ü©, hs‚ü©, Œª y, (localization.of _).mk' r ‚ü®s, y.2‚ü©,
    ‚ü®prelocal_predicate.sheafify_of ‚ü®r, s, Œª y, ‚ü®y.2, localization_map.mk'_spec _ _ _‚ü©‚ü©, rfl‚ü©‚ü©,
end

/--
The `stalk_to_fiber` map for the structure sheaf is injective.
(In fact, an isomorphism, as constructed below in `stalk_iso_Type`.)

The proof here follows the argument in Hartshorne's Algebraic Geometry, Proposition II.2.2.
-/
lemma structure_sheaf_stalk_to_fiber_injective (x : Top.of (prime_spectrum R)) :
  function.injective (stalk_to_fiber (is_locally_fraction R) x) :=
begin
  apply stalk_to_fiber_injective,
  intros U V fU hU fV hV e,
  rcases hU ‚ü®x, U.2‚ü© with ‚ü®U', mU, iU, ‚ü®a, b, wU‚ü©‚ü©,
  rcases hV ‚ü®x, V.2‚ü© with ‚ü®V', mV, iV, ‚ü®c, d, wV‚ü©‚ü©,

  have wUx := (wU ‚ü®x, mU‚ü©).2,
  dsimp at wUx,
  have wVx := (wV ‚ü®x, mV‚ü©).2,
  dsimp at wVx,
  have e' := congr_arg (Œª z, z * ((localization.of _).to_map (b * d))) e,
  dsimp at e',
  simp only [‚Üêmul_assoc, ring_hom.map_mul] at e',
  rw [mul_right_comm (fV _)] at e',
  erw [wUx, wVx] at e',
  simp only [‚Üêring_hom.map_mul] at e',
  have := @localization_map.mk'_eq_iff_eq _ _ _ _ _
    (localization.of (as_ideal x).prime_compl) a c ‚ü®b, (wU ‚ü®x, mU‚ü©).1‚ü© ‚ü®d, (wV ‚ü®x, mV‚ü©).1‚ü©,
  dsimp at this,
  rw ‚Üêthis at e',
  rw localization_map.eq at e',
  rcases e' with ‚ü®‚ü®h, hh‚ü©, e''‚ü©,
  dsimp at e'',

  let Wb : opens _ := ‚ü®basic_open b, basic_open_open‚ü©,
  let Wd : opens _ := ‚ü®basic_open d, basic_open_open‚ü©,
  let Wh : opens _ := ‚ü®basic_open h, basic_open_open‚ü©,
  use ((Wb ‚äì Wd) ‚äì Wh) ‚äì (U' ‚äì V'),
  refine ‚ü®‚ü®‚ü®(wU ‚ü®x, mU‚ü©).1, (wV ‚ü®x, mV‚ü©).1‚ü©, hh‚ü©, ‚ü®mU, mV‚ü©‚ü©,

  refine ‚ü®_, _, _‚ü©,
  change _ ‚ü∂ U.val,
  exact (opens.inf_le_right _ _) ‚â´ (opens.inf_le_left _ _) ‚â´ iU,
  change _ ‚ü∂ V.val,
  exact (opens.inf_le_right _ _) ‚â´ (opens.inf_le_right _ _) ‚â´ iV,

  intro w,

  dsimp,
  have wU' := (wU ‚ü®w.1, w.2.2.1‚ü©).2,
  dsimp at wU',
  have wV' := (wV ‚ü®w.1, w.2.2.2‚ü©).2,
  dsimp at wV',
  -- We need to prove `fU w = fV w`.
  -- First we show that is suffices to prove `fU w * b * d * h = fV w * b * d * h`.
  -- Then we calculate (at w) as follows:
  --   fU w * b * d * h
  --       = a * d * h        : wU'
  --   ... = c * b * h        : e''
  --   ... = fV w * d * b * h : wV'
  have u : is_unit ((localization.of (as_ideal w.1).prime_compl).to_map (b * d * h)),
  { simp only [ring_hom.map_mul],
    apply is_unit.mul, apply is_unit.mul,
    exact (localization.of (as_ideal w.1).prime_compl).map_units ‚ü®b, (wU ‚ü®w, w.2.2.1‚ü©).1‚ü©,
    exact (localization.of (as_ideal w.1).prime_compl).map_units ‚ü®d, (wV ‚ü®w, w.2.2.2‚ü©).1‚ü©,
    exact (localization.of (as_ideal w.1).prime_compl).map_units ‚ü®h, w.2.1.2‚ü©, },
  apply (is_unit.mul_left_inj u).1,
  conv_rhs { rw [mul_comm b d] },
  simp only [ring_hom.map_mul, ‚Üêmul_assoc],
  erw [wU', wV'],
  dsimp,
  simp only [‚Üêring_hom.map_mul, ‚Üêmul_assoc],
  rw e'',
end


/--
The structure presheaf, valued in `CommRing`, constructed by dressing up the `Type` valued
structure presheaf.
-/
@[simps]
def structure_presheaf_in_CommRing : presheaf CommRing (Spec.Top R) :=
{ obj := Œª U, CommRing.of ((structure_sheaf_in_Type R).presheaf.obj U),
  map := Œª U V i,
  { to_fun := ((structure_sheaf_in_Type R).presheaf.map i),
    map_zero' := rfl,
    map_add' := Œª x y, rfl,
    map_one' := rfl,
    map_mul' := Œª x y, rfl, }, }

/--
Some glue, verifying that that structure presheaf valued in `CommRing` agrees
with the `Type` valued structure presheaf.
-/
def structure_presheaf_comp_forget :
  structure_presheaf_in_CommRing R ‚ãô (forget CommRing) ‚âÖ (structure_sheaf_in_Type R).presheaf :=
nat_iso.of_components
  (Œª U, iso.refl _)
  (by tidy)

/--
The structure sheaf on $Spec R$, valued in `CommRing`.

This is provided as a bundled `SheafedSpace` as `Spec.SheafedSpace R` later.
-/
def structure_sheaf : sheaf CommRing (Spec.Top R) :=
{ presheaf := structure_presheaf_in_CommRing R,
  sheaf_condition :=
    -- We check the sheaf condition under `forget CommRing`.
    (sheaf_condition_equiv_sheaf_condition_comp _ _).symm
      (sheaf_condition_equiv_of_iso (structure_presheaf_comp_forget R).symm
        (structure_sheaf_in_Type R).sheaf_condition), }

/--
The stalk at `x` is equivalent (just as a type) to the localization at `x`.
-/
def stalk_iso_Type (x : prime_spectrum R) :
  (structure_sheaf_in_Type R).presheaf.stalk x ‚âÖ localization.at_prime x.as_ideal :=
(equiv.of_bijective _
  ‚ü®structure_sheaf_stalk_to_fiber_injective R x,
   structure_sheaf_stalk_to_fiber_surjective R x‚ü©).to_iso

-- PROJECT: Improve this to an isomorphism of rings.
/-
/--
TODO: this should follow easily from `forget CommRing` preserving filtered colimits.
-/
def compare_stalks (x : prime_spectrum R) :
  (forget CommRing).obj ((structure_sheaf R).presheaf.stalk x) ‚âÖ (structure_sheaf_in_Type R).presheaf.stalk x :=
sorry

/--
TODO:
-/
def stalk_to_fiber_ring_hom (x : prime_spectrum R) :
  (structure_sheaf R).presheaf.stalk x ‚ü∂ CommRing.of (localization.at_prime x.as_ideal) :=
{ to_fun := (compare_stalks R x).hom ‚â´ stalk_to_fiber (is_locally_fraction_local R) x,
  map_zero' := sorry,
  map_add' := sorry,
  map_one' := sorry,
  map_mul' := sorry }

/--
The stalk at `x` is equivalent, as a commutative ring, to the localization at `x`.
-/
def stalk_iso (x : prime_spectrum R) :
  (structure_sheaf R).presheaf.stalk x ‚âÖ CommRing.of (localization.at_prime x.as_ideal) :=
({ ..stalk_to_fiber_ring_hom R x,
   ..(compare_stalks R x ‚â™‚â´ stalk_iso_Type R x).to_equiv } : _ ‚âÉ+* _).to_CommRing_iso
-/

end algebraic_geometry
