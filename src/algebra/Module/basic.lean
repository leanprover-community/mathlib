/-
Copyright (c) 2019 Robert A. Spencer. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Robert A. Spencer
-/
import algebra.module
import algebra.punit_instances
import category_theory.types
import linear_algebra.basic
open category_theory

universe u

variables (R : Type u) [ring R]

/-- The category of R-modules and their morphisms. -/
structure Module :=
  (carrier : Type)
  (prop_add_comm_group : add_comm_group carrier)
  (prop_module : module R carrier)

namespace Module
  instance : has_coe_to_sort (Module R) :=
    { S := Type, coe := Module.carrier}

  instance add_comm_group (M : Module R) : add_comm_group M := M.prop_add_comm_group
  instance R_module (M : Module R) : module R M := M.prop_module

  def of (X : Type) [h‚ÇÅ : add_comm_group X] [h‚ÇÇ : module R X] : Module R := ‚ü® X , h‚ÇÅ , h‚ÇÇ‚ü©

  instance : has_zero (Module R) := ‚ü® of R punit ‚ü©

  variables (M N U : Module R)

  instance : category (Module R) := {
    hom := Œª M N, M ‚Üí‚Çó[R] N,
    id := Œª M, 1 ,
    comp := Œª A B C f g, g.comp f ,
  }

  @[simp] lemma module_id : linear_map.to_fun (ùüô M) = id := rfl

  @[simp] lemma module_hom_comp (f : M ‚ü∂ N) (g : N ‚ü∂ U) :
    ((f ‚â´ g) : M ‚Üí U) = g.to_fun ‚àò f.to_fun := rfl

  instance : has_coe_to_fun (M ‚ü∂ N) :=
    { F   := Œª f, M ‚Üí N,
      coe := Œª f, (f : M ‚Üí N) }

  @[extensionality] lemma hom_ext  {f g : M ‚ü∂ N} : (‚àÄ x : M, f x = g x) ‚Üí f = g :=
    Œª w, linear_map.ext w

  @[extensionality] lemma hom_ext'  {f g : M ‚ü∂ N} : (f : M ‚Üí N) = g ‚Üí f = g :=
    Œª w, hom_ext R M N (function.funext_iff.1 w)

  @[simp] lemma coe_id {M : Module R} : ((ùüô M) : M ‚Üí M) = id := rfl

  instance hom_is_module_hom {M‚ÇÅ M‚ÇÇ : Module R} (f : M‚ÇÅ ‚ü∂ M‚ÇÇ) :
    is_linear_map R (f : M‚ÇÅ ‚Üí M‚ÇÇ) := linear_map.is_linear _

end Module

instance (M : Type) [add_comm_group M] [module R M] : has_coe (submodule R M) (Module R) :=
‚ü® Œª N, Module.of R N ‚ü©
