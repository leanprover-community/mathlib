/-
Copyright (c) 2021 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin
-/
import topology.subset_properties
import topology.connected
import topology.algebra.monoid
import tactic.tfae

/-!
# Locally constant functions

This file sets up the theory of locally constant function from a topological space to a type.

## Main definitions and constructions

* `is_locally_constant f` : a map `f : X ‚Üí Y` where `X` is a topological space is locally
                            constant if every set in `Y` has an open preimage.
* `locally_constant X Y` : the type of locally constant maps from `X` to `Y`
* `locally_constant.map` : push-forward of locally constant maps
* `locally_constant.comap` : pull-back of locally constant maps

-/

variables {X Y Z Œ± : Type*} [topological_space X]

open set filter
open_locale topological_space

/-- A function between topological spaces is locally constant if the preimage of any set is open. -/
def is_locally_constant (f : X ‚Üí Y) : Prop := ‚àÄ s : set Y, is_open (f ‚Åª¬π' s)

namespace is_locally_constant

protected lemma tfae (f : X ‚Üí Y) :
  tfae [is_locally_constant f,
    ‚àÄ x, ‚àÄ·∂† x' in ùìù x, f x' = f x,
    ‚àÄ x, is_open {x' | f x' = f x},
    ‚àÄ y, is_open (f ‚Åª¬π' {y}),
    ‚àÄ x, ‚àÉ (U : set X) (hU : is_open U) (hx : x ‚àà U), ‚àÄ x' ‚àà U, f x' = f x] :=
begin
  tfae_have : 1 ‚Üí 4, from Œª h y, h {y},
  tfae_have : 4 ‚Üí 3, from Œª h x, h (f x),
  tfae_have : 3 ‚Üí 2, from Œª h x, mem_nhds_sets (h x) rfl,
  tfae_have : 2 ‚Üí 5,
  { intros h x,
    rcases mem_nhds_sets_iff.1 (h x) with ‚ü®U, eq, hU, hx‚ü©,
    exact ‚ü®U, hU, hx, eq‚ü© },
  tfae_have : 5 ‚Üí 1,
  { intros h s,
    refine is_open_iff_forall_mem_open.2 (Œª x hx, _),
    rcases h x with ‚ü®U, hU, hxU, eq‚ü©,
    exact ‚ü®U, Œª x' hx', mem_preimage.2 $ (eq x' hx').symm ‚ñ∏ hx, hU, hxU‚ü© },
  tfae_finish
end

@[nontriviality] lemma of_discrete [discrete_topology X] (f : X ‚Üí Y) :
  is_locally_constant f :=
Œª s, is_open_discrete _

lemma is_open_fiber {f : X ‚Üí Y} (hf : is_locally_constant f) (y : Y) :
  is_open {x | f x = y} :=
hf {y}

lemma iff_exists_open (f : X ‚Üí Y) :
  is_locally_constant f ‚Üî ‚àÄ x, ‚àÉ (U : set X) (hU : is_open U) (hx : x ‚àà U), ‚àÄ x' ‚àà U, f x' = f x :=
(is_locally_constant.tfae f).out 0 4

lemma iff_eventually_eq (f : X ‚Üí Y) :
  is_locally_constant f ‚Üî ‚àÄ x, ‚àÄ·∂† y in ùìù x, f y = f x :=
(is_locally_constant.tfae f).out 0 1

lemma exists_open {f : X ‚Üí Y} (hf : is_locally_constant f) (x : X) :
  ‚àÉ (U : set X) (hU : is_open U) (hx : x ‚àà U), ‚àÄ x' ‚àà U, f x' = f x :=
(iff_exists_open f).1 hf x

protected lemma eventually_eq {f : X ‚Üí Y} (hf : is_locally_constant f) (x : X) :
  ‚àÄ·∂† y in ùìù x, f y = f x :=
(iff_eventually_eq f).1 hf x

protected lemma continuous [topological_space Y] {f : X ‚Üí Y} (hf : is_locally_constant f) :
  continuous f :=
‚ü®Œª U hU, hf _‚ü©

lemma iff_continuous {_ : topological_space Y} [discrete_topology Y] (f : X ‚Üí Y) :
  is_locally_constant f ‚Üî continuous f :=
‚ü®is_locally_constant.continuous, Œª h s, h.is_open_preimage s (is_open_discrete _)‚ü©

lemma iff_continuous_bot (f : X ‚Üí Y) :
  is_locally_constant f ‚Üî @continuous X Y _ ‚ä• f :=
iff_continuous f

lemma of_constant (f : X ‚Üí Y) (h : ‚àÄ x y, f x = f y) :
  is_locally_constant f :=
(iff_eventually_eq f).2 $ Œª x, eventually_of_forall $ Œª x', h _ _

lemma const (y : Y) : is_locally_constant (function.const X y) :=
of_constant _ $ Œª _ _, rfl

lemma comp {f : X ‚Üí Y} (hf : is_locally_constant f) (g : Y ‚Üí Z) :
  is_locally_constant (g ‚àò f) :=
Œª s, by { rw set.preimage_comp, exact hf _ }

lemma prod_mk {Y'} {f : X ‚Üí Y} {f' : X ‚Üí Y'} (hf : is_locally_constant f)
  (hf' : is_locally_constant f') :
  is_locally_constant (Œª x, (f x, f' x)) :=
(iff_eventually_eq _).2 $ Œª x, (hf.eventually_eq x).mp $ (hf'.eventually_eq x).mono $
  Œª x' hf' hf, prod.ext hf hf'

lemma comp‚ÇÇ {Y‚ÇÅ Y‚ÇÇ Z : Type*} {f : X ‚Üí Y‚ÇÅ} {g : X ‚Üí Y‚ÇÇ}
  (hf : is_locally_constant f) (hg : is_locally_constant g) (h : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) :
  is_locally_constant (Œª x, h (f x) (g x)) :=
(hf.prod_mk hg).comp (Œª x : Y‚ÇÅ √ó Y‚ÇÇ, h x.1 x.2)

lemma comp_continuous [topological_space Y] {g : Y ‚Üí Z} {f : X ‚Üí Y}
  (hg : is_locally_constant g) (hf : continuous f) :
  is_locally_constant (g ‚àò f) :=
Œª s, by { rw set.preimage_comp, exact hf.is_open_preimage _ (hg _) }

/-- A locally constant function is constant on any preconnected set. -/
lemma apply_eq_of_is_preconnected {f : X ‚Üí Y} (hf : is_locally_constant f)
  {s : set X} (hs : is_preconnected s) {x y : X} (hx : x ‚àà s) (hy : y ‚àà s) :
  f x = f y :=
begin
  let U := f ‚Åª¬π' {f y},
  suffices : x ‚àâ U·∂ú, from not_not.1 this,
  intro hxV,
  specialize hs U U·∂ú (hf {f y}) (hf {f y}·∂ú) _ ‚ü®y, ‚ü®hy, rfl‚ü©‚ü© ‚ü®x, ‚ü®hx, hxV‚ü©‚ü©,
  { simpa only [inter_empty, not_nonempty_empty, inter_compl_self] using hs },
  { simp only [union_compl_self, subset_univ] }
end

lemma iff_is_const [preconnected_space X] {f : X ‚Üí Y} :
  is_locally_constant f ‚Üî ‚àÄ x y, f x = f y :=
‚ü®Œª h x y, h.apply_eq_of_is_preconnected is_preconnected_univ trivial trivial, of_constant _‚ü©

lemma range_finite [compact_space X] {f : X ‚Üí Y} (hf : is_locally_constant f) :
  (set.range f).finite :=
begin
  letI : topological_space Y := ‚ä•,
  haveI : discrete_topology Y := ‚ü®rfl‚ü©,
  rw @iff_continuous X Y ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫ at hf,
  exact finite_of_is_compact_of_discrete _ (compact_range hf)
end

@[to_additive] lemma one [has_one Y] : is_locally_constant (1 : X ‚Üí Y) := const 1

@[to_additive] lemma inv [has_inv Y] ‚¶Éf : X ‚Üí Y‚¶Ñ (hf : is_locally_constant f) :
  is_locally_constant f‚Åª¬π :=
hf.comp (Œª x, x‚Åª¬π)

@[to_additive]
lemma mul [has_mul Y] ‚¶Éf g : X ‚Üí Y‚¶Ñ (hf : is_locally_constant f) (hg : is_locally_constant g) :
  is_locally_constant (f * g) :=
hf.comp‚ÇÇ hg (*)

@[to_additive]
lemma div [has_div Y] ‚¶Éf g : X ‚Üí Y‚¶Ñ (hf : is_locally_constant f) (hg : is_locally_constant g) :
  is_locally_constant (f / g) :=
hf.comp‚ÇÇ hg (/)

end is_locally_constant

/-- A (bundled) locally constant function from a topological space `X` to a type `Y`. -/
structure locally_constant (X Y : Type*) [topological_space X] :=
(to_fun : X ‚Üí Y)
(is_locally_constant : is_locally_constant to_fun)

namespace locally_constant

instance [inhabited Y] : inhabited (locally_constant X Y) :=
‚ü®‚ü®_, is_locally_constant.const (default Y)‚ü©‚ü©

instance : has_coe_to_fun (locally_constant X Y) := ‚ü®_, locally_constant.to_fun‚ü©

initialize_simps_projections locally_constant (to_fun ‚Üí apply)

@[simp] lemma to_fun_eq_coe (f : locally_constant X Y) : f.to_fun = f := rfl

@[simp] lemma coe_mk (f : X ‚Üí Y) (h) : ‚áë(‚ü®f, h‚ü© : locally_constant X Y) = f := rfl

theorem congr_fun {f g : locally_constant X Y} (h : f = g) (x : X) : f x = g x :=
congr_arg (Œª h : locally_constant X Y, h x) h

theorem congr_arg (f : locally_constant X Y) {x y : X} (h : x = y) : f x = f y :=
congr_arg (Œª x : X, f x) h

theorem coe_injective : function.injective (Œª (f : locally_constant X Y) (x : X), f x)
| ‚ü®f, hf‚ü© ‚ü®g, hg‚ü© h := have f = g, from h, by subst f

@[simp, norm_cast] theorem coe_inj {f g : locally_constant X Y} : (f : X ‚Üí Y) = g ‚Üî f = g :=
coe_injective.eq_iff

@[ext] theorem ext ‚¶Éf g : locally_constant X Y‚¶Ñ (h : ‚àÄ x, f x = g x) : f = g :=
coe_injective (funext h)

theorem ext_iff {f g : locally_constant X Y} : f = g ‚Üî ‚àÄ x, f x = g x :=
‚ü®Œª h x, h ‚ñ∏ rfl, Œª h, ext h‚ü©

protected lemma continuous [topological_space Y] (f : locally_constant X Y) : continuous f :=
f.is_locally_constant.continuous

/-- The constant locally constant function on `X` with value `y : Y`. -/
def const (X : Type*) {Y : Type*} [topological_space X] (y : Y) :
  locally_constant X Y :=
‚ü®function.const X y, is_locally_constant.const _‚ü©

lemma range_finite [compact_space X] (f : locally_constant X Y) :
  (set.range f).finite :=
f.is_locally_constant.range_finite

lemma apply_eq_of_is_preconnected (f : locally_constant X Y) {s : set X} (hs : is_preconnected s)
  {x y : X} (hx : x ‚àà s) (hy : y ‚àà s) :
  f x = f y :=
f.is_locally_constant.apply_eq_of_is_preconnected hs hx hy

lemma apply_eq_of_preconnected_space [preconnected_space X] (f : locally_constant X Y) (x y : X) :
  f x = f y :=
f.is_locally_constant.apply_eq_of_is_preconnected is_preconnected_univ trivial trivial

lemma eq_const [preconnected_space X] (f : locally_constant X Y) (x : X) :
  f = const X (f x) :=
ext $ Œª y, apply_eq_of_preconnected_space f _ _

lemma exists_eq_const [preconnected_space X] [nonempty Y] (f : locally_constant X Y) :
  ‚àÉ y, f = const X y :=
begin
  rcases classical.em (nonempty X) with ‚ü®‚ü®x‚ü©‚ü©|hX,
  { exact ‚ü®f x, f.eq_const x‚ü© },
  { exact ‚ü®classical.arbitrary Y, ext $ Œª x, (hX ‚ü®x‚ü©).elim‚ü© }
end

/-- Push forward of locally constant maps under any map, by post-composition. -/
def map (f : Y ‚Üí Z) : locally_constant X Y ‚Üí locally_constant X Z :=
Œª g, ‚ü®f ‚àò g, Œª s, by { rw set.preimage_comp, apply g.is_locally_constant }‚ü©

@[simp] lemma map_apply (f : Y ‚Üí Z) (g : locally_constant X Y) : ‚áë(map f g) = f ‚àò g := rfl

@[simp] lemma map_id : @map X Y Y _ id = id := by { ext, refl }

@[simp] lemma map_comp {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : Type*} (g : Y‚ÇÇ ‚Üí Y‚ÇÉ) (f : Y‚ÇÅ ‚Üí Y‚ÇÇ) :
  @map X _ _ _ g ‚àò map f = map (g ‚àò f) := by { ext, refl }

section comap

open_locale classical

variables [topological_space Y]

/-- Pull back of locally constant maps under any map, by pre-composition.

This definition only makes sense if `f` is continuous,
in which case it sends locally constant functions to their precomposition with `f`.
See also `locally_constant.coe_comap`. -/
noncomputable
def comap (f : X ‚Üí Y) :
  locally_constant Y Z ‚Üí locally_constant X Z :=
if hf : continuous f
then Œª g, ‚ü®g ‚àò f, g.is_locally_constant.comp_continuous hf‚ü©
else
begin
  by_cases H : nonempty X,
  { introsI g, exact const X (g $ f $ classical.arbitrary X) },
  { intro g, refine ‚ü®Œª x, (H ‚ü®x‚ü©).elim, _‚ü©,
    intro s, rw is_open_iff_nhds, intro x, exact (H ‚ü®x‚ü©).elim }
end

@[simp] lemma coe_comap (f : X ‚Üí Y) (g : locally_constant Y Z) (hf : continuous f) :
  ‚áë(comap f g) = g ‚àò f :=
by { rw [comap, dif_pos hf], refl }

@[simp] lemma comap_id : @comap X X Z _ _ id = id :=
by { ext, simp only [continuous_id, id.def, function.comp.right_id, coe_comap] }

lemma comap_comp [topological_space Z]
  (f : X ‚Üí Y) (g : Y ‚Üí Z) (hf : continuous f) (hg : continuous g) :
  @comap _ _ Œ± _ _ f ‚àò comap g = comap (g ‚àò f) :=
by { ext, simp only [hf, hg, hg.comp hf, coe_comap] }

lemma comap_const (f : X ‚Üí Y) (y : Y) (h : ‚àÄ x, f x = y) :
  (comap f : locally_constant Y Z ‚Üí locally_constant X Z) =
  Œª g, ‚ü®Œª x, g y, is_locally_constant.const _‚ü© :=
begin
  ext, rw coe_comap,
  { simp only [h, coe_mk, function.comp_app] },
  { rw show f = Œª x, y, by ext; apply h,
    exact continuous_const }
end

end comap

end locally_constant
