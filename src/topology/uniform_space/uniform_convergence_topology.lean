/-
Copyright (c) 2022 Anatole Dedecker. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anatole Dedecker
-/
import topology.uniform_space.uniform_convergence
import topology.uniform_space.pi

/-!
# TODO
-/
noncomputable theory
open_locale topological_space classical uniformity filter

local attribute [-instance] Pi.uniform_space

open set filter

namespace uniform_convergence

variables (Œ± Œ≤ : Type*) {Œ≥ Œπ : Type*} [uniform_space Œ≤]
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}

protected def gen (V : set (Œ≤ √ó Œ≤)) : set ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤)) :=
  {uv : (Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤) | ‚àÄ x, (uv.1 x, uv.2 x) ‚àà V}

protected lemma is_basis_gen :
  is_basis (Œª V : set (Œ≤ √ó Œ≤), V ‚àà ùì§ Œ≤) (uniform_convergence.gen Œ± Œ≤) :=
‚ü®‚ü®univ, univ_mem‚ü©, Œª U V hU hV, ‚ü®U ‚à© V, inter_mem hU hV, Œª uv huv,
  ‚ü®Œª x, (huv x).left, Œª x, (huv x).right‚ü©‚ü©‚ü©

protected def uniformity_basis : filter_basis ((Œ± ‚Üí Œ≤) √ó (Œ± ‚Üí Œ≤)) :=
(uniform_convergence.is_basis_gen Œ± Œ≤).filter_basis

protected def uniform_core : uniform_space.core (Œ± ‚Üí Œ≤) :=
uniform_space.core.mk_of_basis (uniform_convergence.uniformity_basis Œ± Œ≤)
  (Œª U ‚ü®V, hV, hVU‚ü© f, hVU ‚ñ∏ Œª x, refl_mem_uniformity hV)
  (Œª U ‚ü®V, hV, hVU‚ü©, hVU ‚ñ∏ ‚ü®uniform_convergence.gen Œ± Œ≤ (prod.swap ‚Åª¬π' V),
    ‚ü®prod.swap ‚Åª¬π' V, tendsto_swap_uniformity hV, rfl‚ü©, Œª uv huv x, huv x‚ü©)
  (Œª U ‚ü®V, hV, hVU‚ü©, hVU ‚ñ∏ let ‚ü®W, hW, hWV‚ü© := comp_mem_uniformity_sets hV in
    ‚ü®uniform_convergence.gen Œ± Œ≤ W, ‚ü®W, hW, rfl‚ü©, Œª uv ‚ü®w, huw, hwv‚ü© x, hWV
      ‚ü®w x, by exact ‚ü®huw x, hwv x‚ü©‚ü©‚ü©)

protected def uniform_space : uniform_space (Œ± ‚Üí Œ≤) :=
uniform_space.of_core (uniform_convergence.uniform_core Œ± Œ≤)

protected lemma has_basis_uniformity :
  (@uniformity (Œ± ‚Üí Œ≤) (uniform_convergence.uniform_space Œ± Œ≤)).has_basis (Œª V, V ‚àà ùì§ Œ≤)
  (uniform_convergence.gen Œ± Œ≤) :=
(uniform_convergence.is_basis_gen Œ± Œ≤).has_basis

protected def topological_space : topological_space (Œ± ‚Üí Œ≤) :=
(uniform_convergence.uniform_core Œ± Œ≤).to_topological_space

variables {Œ± Œ≤}

lemma uniform_continuous_eval (x : Œ±) : @uniform_continuous _ _
  (uniform_convergence.uniform_space Œ± Œ≤) _ (function.eval x) :=
begin
  change _ ‚â§ _,
  rw [map_le_iff_le_comap,
      (uniform_convergence.has_basis_uniformity Œ± Œ≤).le_basis_iff ((ùì§ _).basis_sets.comap _)],
  exact Œª U hU, ‚ü®U, hU, Œª uv huv, huv x‚ü©
end

protected lemma le_Pi : uniform_convergence.uniform_space Œ± Œ≤ ‚â§ Pi.uniform_space (Œª _, Œ≤) :=
begin
  rw [le_iff_uniform_continuous_id, uniform_continuous_pi],
  intros x,
  exact uniform_continuous_eval x
end

variable {Œ±}

end uniform_convergence

namespace uniform_convergence_on

variables (Œ± Œ≤ : Type*) {Œ≥ Œπ : Type*} [uniform_space Œ≤] (ùîñ : set (set Œ±))
variables {F : Œπ ‚Üí Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≤} {s s' : set Œ±} {x : Œ±} {p : filter Œπ} {g : Œπ ‚Üí Œ±}

protected def uniform_space : uniform_space (Œ± ‚Üí Œ≤) :=
‚®Ö (s : set Œ±) (hs : s ‚àà ùîñ), uniform_space.comap (Œª f, s.restrict f)
  (uniform_convergence.uniform_space s Œ≤)

protected lemma uniform_continuous_restrict (h : s ‚àà ùîñ) :
  @uniform_continuous _ _ (uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ)
  (uniform_convergence.uniform_space s Œ≤) s.restrict :=
begin
  change _ ‚â§ _,
  rw [uniform_convergence_on.uniform_space, map_le_iff_le_comap, uniformity, infi_uniformity],
  refine infi_le_of_le s _,
  rw infi_uniformity,
  exact infi_le _ h,
end

protected lemma uniform_space_antitone : antitone (uniform_convergence_on.uniform_space Œ± Œ≤) :=
Œª ùîñ‚ÇÅ ùîñ‚ÇÇ h‚ÇÅ‚ÇÇ, infi_le_infi_of_subset h‚ÇÅ‚ÇÇ

variables {Œ± Œ≤}

lemma uniform_continuous_eval_of_mem {x : Œ±} (hxs : x ‚àà s) (hs : s ‚àà ùîñ) :
  @uniform_continuous _ _ (uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ) _ (function.eval x) :=
begin
  change _ ‚â§ _,
  rw [map_le_iff_le_comap, ((ùì§ _).basis_sets.comap _).ge_iff,
      uniform_convergence_on.uniform_space, infi_uniformity'],
  intros U hU,
  refine mem_infi_of_mem s _,
  rw infi_uniformity',
  exact mem_infi_of_mem hs (mem_comap.mpr
    ‚ü® uniform_convergence.gen s Œ≤ U,
      (uniform_convergence.has_basis_uniformity s Œ≤).mem_of_mem hU,
      Œª uv huv, huv ‚ü®x, hxs‚ü© ‚ü©)
end

protected lemma le_Pi_of_covering (h : ‚ãÉ‚ÇÄ ùîñ = univ) :
  uniform_convergence_on.uniform_space Œ± Œ≤ ùîñ ‚â§ Pi.uniform_space (Œª _, Œ≤) :=
begin
  rw [le_iff_uniform_continuous_id, uniform_continuous_pi],
  intros x,
  obtain ‚ü®s, hs, hxs‚ü© : ‚àÉ s ‚àà ùîñ, x ‚àà s := mem_sUnion.mp (h.symm ‚ñ∏ true.intro),
  exact uniform_continuous_eval_of_mem ùîñ hxs hs
end

end uniform_convergence_on
