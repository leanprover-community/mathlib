import category_theory.monoidal.internal.functor_category
import algebra.category.Group.monoidal
import algebra.category.Group.limits
import algebra.category.Group.filtered_colimits
import category_theory.functor.equivalence
import category_theory.closed.functor_category
import category_theory.preadditive.functor_category
import topology.sheaves.sheaf
import category_theory.sites.sheafification

noncomputable theory

open category_theory category_theory.monoidal category_theory.limits

namespace Top.presheaf

namespace monoidal


universes w u‚ÇÅ v‚ÇÅ
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]

local attribute [instance] AddCommGroup.monoidal.tensor_monoidal_category

@[simps] def Mon_presheaf_Ab_equiv_presheaf_ring :
  Mon_ (C·µí·µñ ‚•§ AddCommGroup.{w}) ‚âå (C·µí·µñ ‚•§ Ring.{w}) :=
(Mon_functor_category_equivalence C·µí·µñ AddCommGroup).trans $
  category_theory.functor.equivalence_of_target_equivalence _ _ _ $
    AddCommGroup.monoidal.Mon_equiv_Ring

end monoidal

section

universe u

variables {X : Top.{u}}

open topological_space Top opposite

@[simps] def emb (U : opens X) : Top.of U ‚ü∂ X :=
{ to_fun := (coe : U ‚Üí X),
  continuous_to_fun := continuous_subtype_val }

def emb.to_global_subset {U : opens X} (V : opens (Top.of U)) : opens X :=
‚ü®subtype.val '' V.1, (is_open.open_embedding_subtype_coe U.2).is_open_map _ V.2‚ü©

def emb.of_subset {U V : opens X} (inc : U ‚ü∂ V) (W : opens (Top.of U)) : opens (Top.of V) :=
{ val := (Œª p, ‚ü®p.1, le_of_hom inc p.2‚ü© : U ‚Üí V) '' W.1,
  property := let ‚ü®O, hO1, hO2‚ü© := is_open_induced_iff.mp W.2 in
    is_open_induced_iff.mpr ‚ü®subtype.val '' W.1,
    begin
      apply_fun set.image subtype.val at hO2,
      rw ‚ÜêhO2,
      apply (is_open.open_embedding_subtype_coe U.2).is_open_map,
      apply is_open.preimage,
      continuity,
    end, begin
      ext ‚ü®x, hx‚ü©, split,
      { rintros ‚ü®p, hp1, hp2‚ü©,
        rw set.mem_image,
        refine ‚ü®p, hp1, subtype.ext_iff_val.mpr hp2‚ü©, },
      { rintros ‚ü®p, hp1, hp2‚ü©,
        rw [‚Üêhp2, set.mem_preimage, set.mem_image],
        refine ‚ü®p, hp1, rfl‚ü©, },
    end‚ü© }

def emb.of_subset_hom {U V : opens X} (inc : U ‚ü∂ V) {W‚ÇÅ W‚ÇÇ : opens (Top.of U)} (i : W‚ÇÅ ‚ü∂ W‚ÇÇ) :
  emb.of_subset inc W‚ÇÅ ‚ü∂ emb.of_subset inc W‚ÇÇ :=
hom_of_le $ Œª _ ‚ü®q, hq1, hq2‚ü©, ‚ü®q, le_of_hom i hq1, hq2‚ü©

def emb.of_subset_id (U : opens X) (W : opens (Top.of U)) :
  emb.of_subset (ùüô U) W = W :=
begin
  ext x, split,
  { rintros ‚ü®p, hp, rfl‚ü©, dsimp, erw opens.mem_coe at hp, convert hp, ext, refl, },
  { intros h, rw opens.mem_coe at h, refine ‚ü®x, h, _‚ü©, ext, refl, },
end

def emb.of_subset_comp {U V W : opens X} (iUV : U ‚ü∂ V) (iVW : V ‚ü∂ W) (W : opens (Top.of U)) :
  emb.of_subset (iUV ‚â´ iVW) W = emb.of_subset iVW (emb.of_subset iUV W) :=
begin
  ext x, split,
  { rintros ‚ü®p, hp, rfl‚ü©, exact ‚ü®‚ü®p, le_of_hom iUV p.2‚ü©, ‚ü®p, hp, rfl‚ü©, rfl‚ü©, },
  { rintros ‚ü®p, ‚ü®q, hq, rfl‚ü©, rfl‚ü©, exact ‚ü®q, hq, rfl‚ü©, },
end

lemma emb.open_embedding (U : opens X) : open_embedding (emb U) :=
is_open.open_embedding_subtype_coe U.2

@[simps] def restrict (F : presheaf AddCommGroup.{u} X) (U : opens X) : presheaf AddCommGroup (Top.of U) :=
(emb.open_embedding U).is_open_map.functor.op ‚ãô F

@[simps] def restrict_top {F G : presheaf AddCommGroup.{u} X} {U : opens X}
  (Œ± : restrict F U ‚ü∂ restrict G U) : F.obj (op U) ‚ü∂ G.obj (op U) :=
F.map (hom_of_le $ by { rintros _ ‚ü®x, hx, rfl‚ü©, exact x.2 } :
  (emb.open_embedding U).is_open_map.functor.obj ‚ä§ ‚ü∂ U).op ‚â´ Œ±.app (op ‚ä§) ‚â´
  G.map (hom_of_le $ Œª x hx, ‚ü®‚ü®x, hx‚ü©, ‚ü®‚ü©, rfl‚ü© :
    U ‚ü∂ (emb.open_embedding U).is_open_map.functor.obj ‚ä§).op

@[simps] def restrict_functor (U : opens X) : presheaf AddCommGroup.{u} X ‚•§ presheaf AddCommGroup (Top.of U) :=
{ obj := Œª F, restrict F U,
  map := Œª F G Œ±,
  { app := Œª V, Œ±.app _,
    naturality' := Œª V W inc,
    begin
      ext x,
      erw [restrict_map, Œ±.naturality, restrict_map, comp_apply],
    end },
  map_id' := Œª F,
  begin
    ext U x,
    simp only [nat_trans.id_app, id_apply],
  end,
  map_comp' := Œª F G H Œ± Œ≤,
  begin
    ext U x,
    simp only [nat_trans.comp_app],
  end }

@[reducible] def restrict_subset_sections (F : presheaf AddCommGroup.{u} X) {U V : opens X} (inc : U ‚ü∂ V)
  (W : opens (Top.of U)) :
  (restrict F U).obj (op W) ‚âÖ (restrict F V).obj (op $ emb.of_subset inc W) :=
{ hom := F.map (quiver.hom.op $ hom_of_le
    begin
      rintros p ‚ü®‚ü®q, hq1‚ü©, ‚ü®x, hx1, hx2‚ü©, rfl‚ü©,
      dsimp only at hx2,
      refine ‚ü®x, hx1, _‚ü©,
      rw ‚Üêhx2,
      refl,
    end : op ((emb.open_embedding U).is_open_map.functor.obj W) ‚ü∂
      op ((emb.open_embedding V).is_open_map.functor.obj (emb.of_subset inc W))),
  inv := F.map (quiver.hom.op $ hom_of_le
    begin
      rintros p ‚ü®q, hq, rfl‚ü©,
      refine ‚ü®‚ü®q.1, le_of_hom inc q.2‚ü©, ‚ü®q, hq, rfl‚ü©, rfl‚ü©,
    end : op ((emb.open_embedding V).is_open_map.functor.obj (emb.of_subset inc W)) ‚ü∂
      op ((emb.open_embedding U).is_open_map.functor.obj W)),
  hom_inv_id' := by { rw [‚ÜêF.map_comp, ‚Üêop_comp], convert F.map_id _ },
  inv_hom_id' := by { rw [‚ÜêF.map_comp, ‚Üêop_comp], convert F.map_id _ } }

@[simps] def restrict_subset_sections_map.app {F G : presheaf AddCommGroup.{u} X}
  {U V : opens X} (inc : U ‚ü∂ V)
  (Œ± : restrict F V ‚ü∂ restrict G V) (W : opens (Top.of U)):
  (restrict F U).obj (op W) ‚ü∂ (restrict G U).obj (op W) :=
{ to_fun := Œª s, (restrict_subset_sections G inc W).inv $ Œ±.app _ $
      (restrict_subset_sections F inc W).hom s,
  map_zero' := by rw [map_zero, map_zero, map_zero],
  map_add' := Œª x y, by rw [map_add, map_add, map_add] }

lemma restrict_subset_sections_map.naturality {F G : presheaf AddCommGroup.{u} X}
  {U V : opens X} (inc : U ‚ü∂ V)
  (Œ± : restrict F V ‚ü∂ restrict G V)
  (W‚ÇÅ W‚ÇÇ : (opens (Top.of U)))
  (i : W‚ÇÅ ‚ü∂ W‚ÇÇ) :
  (restrict F U).map i.op ‚â´ restrict_subset_sections_map.app inc Œ± W‚ÇÅ =
    restrict_subset_sections_map.app inc Œ± W‚ÇÇ ‚â´ (restrict G U).map i.op :=
begin
  ext x,
  simp only [restrict_map, quiver.hom.unop_op, restrict_subset_sections_map.app, comp_apply,
    add_monoid_hom.coe_mk],
  simp only [‚Üêcomp_apply],
  simp only [‚Üêcomp_apply, ‚ÜêF.map_comp, ‚Üêop_comp],
  generalize_proofs h1 h2 h3 h4 h5 h6,
  rw [show hom_of_le h3 ‚â´ h1.functor.map i = h2.functor.map (emb.of_subset_hom inc i) ‚â´
    hom_of_le h5, from rfl, op_comp, F.map_comp, category.assoc _ _ (Œ±.app _)],
  have := Œ±.naturality (emb.of_subset_hom inc i).op,
  dsimp at this,
  erw this,
  simp only [category.assoc],
  congr' 3,
  rw [‚ÜêG.map_comp, ‚ÜêG.map_comp, ‚Üêop_comp, ‚Üêop_comp],
  congr' 1,
end

@[simps] def restrict_subset_sections_map {F G : presheaf AddCommGroup.{u} X}
  {U V : opens X} (inc : U ‚ü∂ V)
  (Œ± : restrict F V ‚ü∂ restrict G V) :
  restrict F U ‚ü∂ restrict G U :=
{ app := Œª W, restrict_subset_sections_map.app inc Œ± W.unop,
  naturality' := Œª W‚ÇÅ W‚ÇÇ i, restrict_subset_sections_map.naturality inc Œ± _ _ i.unop }

instance (F G : presheaf AddCommGroup.{u} X) (U : opens X) :
  add_comm_group (restrict F U ‚ü∂ restrict G U) :=
begin
  haveI i1 : preadditive (presheaf AddCommGroup (Top.of U)) :=
    category_theory.functor_category_preadditive,
  exactI i1.1 (restrict F U) (restrict G U),
end

lemma restrict_top_zero {F G : presheaf AddCommGroup.{u} X} {U : opens X} :
  restrict_top (0 : restrict F U ‚ü∂ restrict G U) = 0 :=
begin
  ext,
  simp only [restrict_top_apply, nat_trans.app_zero, AddCommGroup.monoidal.ihom_obj'_str_zero_apply,
    map_zero],
end

lemma restrict_top_add {F G : presheaf AddCommGroup.{u} X} {U : opens X}
  (Œ± Œ≤ : restrict F U ‚ü∂ restrict G U) :
  restrict_top (Œ± + Œ≤) = restrict_top Œ± + restrict_top Œ≤ :=
begin
  ext,
  simp only [restrict_top_apply, nat_trans.app_add, AddCommGroup.monoidal.ihom_obj'_str_add_apply,
    map_add],
end

@[simps] def restrict_top_add_monoid_hom (F G : presheaf AddCommGroup.{u} X) (U : opens X) :
  AddCommGroup.of (restrict F U ‚ü∂ restrict G U) ‚ü∂ AddCommGroup.of (F.obj (op U) ‚ü∂ G.obj (op U)) :=
{ to_fun := restrict_top,
  map_zero' := restrict_top_zero,
  map_add' := restrict_top_add }

lemma restrict_subset_sections_map_zero {F G : presheaf AddCommGroup.{u} X}
  {U V : opens X} (inc : U ‚ü∂ V) :
  restrict_subset_sections_map inc (0 : restrict F V ‚ü∂ restrict G V) = 0 :=
by { ext, simp }

lemma restrict_subset_sections_map_add {F G : presheaf AddCommGroup.{u} X}
  {U V : opens X} (inc : U ‚ü∂ V) (Œ± Œ≤ : restrict F V ‚ü∂ restrict G V) :
  restrict_subset_sections_map inc (Œ± + Œ≤) = restrict_subset_sections_map inc Œ± +
  restrict_subset_sections_map inc Œ≤ :=
by { ext, simp }

lemma restrict_subset_sections_map_id {F G : presheaf AddCommGroup.{u} X} (U : opens X)
  (Œ± : restrict F U ‚ü∂ restrict G U) : restrict_subset_sections_map (ùüô U) Œ± = Œ± :=
begin
  ext W x,
  simp only [restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply],
  erw [‚Üêcomp_apply, ‚Üêcomp_apply, ‚ÜêŒ±.naturality],
  swap,
  { refine eq_to_hom _,
    rw emb.of_subset_id U W.unop,
    refl, },
  dsimp,
  rw [‚Üêcategory.assoc, ‚ÜêF.map_comp, ‚Üêop_comp],
  congr' 1,
  convert category.id_comp _,
  convert F.map_id _,
end

lemma restrict_subset_sections_map_comp {F G : presheaf AddCommGroup.{u} X} {U V W : opens X}
  (iUV : U ‚ü∂ V) (iVW : V ‚ü∂ W) (Œ± : restrict F W ‚ü∂ restrict G W) :
  restrict_subset_sections_map (iUV ‚â´ iVW) Œ± =
  restrict_subset_sections_map iUV (restrict_subset_sections_map iVW Œ±) :=
begin
  ext O x,
  simp only [restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply],
  simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG.map_comp, ‚Üêop_comp],
  rw [‚Üêcategory.assoc _ _ (Œ±.app _ ‚â´ _), ‚ÜêF.map_comp, ‚Üêop_comp],
  congr' 1,
  change _ = _ ‚â´ Œ±.app (op (emb.of_subset iVW (emb.of_subset iUV _))) ‚â´ _,
  generalize_proofs h1 h2 h3 h4 h5 h6 h7 h8 h9,
  rw [show Œ±.app (op (emb.of_subset iVW (emb.of_subset iUV O.unop))) =
    F.map ((emb.open_embedding W).is_open_map.functor.op.map (eq_to_hom _)) ‚â´
      Œ±.app (op (emb.of_subset (iUV ‚â´ iVW) O.unop)) ‚â´
      G.map ((emb.open_embedding W).is_open_map.functor.op.map (eq_to_hom _)),
    from _, category.assoc, category.assoc, ‚ÜêG.map_comp, ‚Üêcategory.assoc (F.map _) (F.map _),
    ‚ÜêF.map_comp],
  congr' 1,
  { rw emb.of_subset_comp, },
  { rw emb.of_subset_comp, },
  { erw [‚Üêcategory.assoc, Œ±.naturality, category.assoc, ‚ÜêG.map_comp],
    symmetry,
    convert category.comp_id _,
    convert G.map_id _, },
end

namespace monoidal

@[simps] def ihom_obj (F G : presheaf AddCommGroup.{u} X) : presheaf AddCommGroup.{u} X :=
{ obj := Œª U, AddCommGroup.of (restrict F U.unop ‚ü∂ restrict G U.unop),
  map := Œª U V inc,
  { to_fun := Œª Œ±, restrict_subset_sections_map inc.unop Œ±,
    map_zero' := restrict_subset_sections_map_zero inc.unop,
    map_add' := Œª Œ± Œ≤, restrict_subset_sections_map_add inc.unop Œ± Œ≤ },
  map_id' := Œª U,
  begin
    ext1,
    rw [add_monoid_hom.coe_mk, unop_id, restrict_subset_sections_map_id, id_apply],
  end,
  map_comp' := Œª U V W iUV iVW,
  begin
    ext1 Œ±,
    rw [add_monoid_hom.coe_mk, comp_apply, add_monoid_hom.coe_mk, add_monoid_hom.coe_mk],
    convert restrict_subset_sections_map_comp iVW.unop iUV.unop Œ±,
  end }

@[simps] def ihom_map' (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ)
  (U : opens X) (f : restrict F U ‚ü∂ restrict G‚ÇÅ U) :
  restrict F U ‚ü∂ restrict G‚ÇÇ U :=
f ‚â´ (restrict_subset_sections_map (ùüô U) ((restrict_functor U).map Œ≥))

lemma ihom_map'_zero (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : opens X) :
  ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U 0 = 0 :=
begin
  ext, simp,
end

lemma ihom_map'_add (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : opens X)
  (Œ± Œ≤ : restrict F U ‚ü∂ restrict G‚ÇÅ U) :
  ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U (Œ± + Œ≤) = ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U Œ± + ihom_map' F _ _ Œ≥ U Œ≤ :=
begin
  ext, simp,
end

lemma ihom_map'_naturality (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X)
  (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : opens X) (Œ± : restrict F U ‚ü∂ restrict G‚ÇÅ U)
  {W‚ÇÅ W‚ÇÇ : opens (Top.of U)} (inc : W‚ÇÅ ‚ü∂ W‚ÇÇ) :
  (restrict F U).map inc.op ‚â´ (ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U Œ±).app (op W‚ÇÅ) =
  (ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U Œ±).app (op W‚ÇÇ) ‚â´ (restrict G‚ÇÇ U).map inc.op :=
begin
  ext x,
  simp only [restrict_map, quiver.hom.unop_op, comp_apply, ihom_map'_app_apply],
  simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG‚ÇÇ.map_comp],
  erw [‚ÜêŒ≥.naturality, ‚ÜêŒ≥.naturality, ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp, ‚Üêop_comp,
    ‚Üêcategory.assoc (Œ±.app _), ‚ÜêŒ±.naturality (ùüô _), ‚Üêcategory.assoc, ‚Üêcategory.assoc,
    ‚ÜêF.map_comp, ‚Üêop_comp, Œ±.naturality inc.op, ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp,
    ‚Üêop_comp, category.assoc],
end

@[simps] def ihom_map_app (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : opens X) :
  (ihom_obj F G‚ÇÅ).obj (op U) ‚ü∂ (ihom_obj F G‚ÇÇ).obj (op U) :=
{ to_fun := Œª Œ±,
  { app := Œª W, (ihom_map' F G‚ÇÅ G‚ÇÇ Œ≥ U Œ±).app W,
    naturality' := Œª W‚ÇÅ W‚ÇÇ inc,
    begin
      convert ihom_map'_naturality F G‚ÇÅ G‚ÇÇ Œ≥ U Œ± inc.unop,
    end },
  map_zero' :=
  begin
    ext W x,
    simp_rw ihom_map'_zero F G‚ÇÅ G‚ÇÇ Œ≥ U,
  end,
  map_add' := Œª _ _,
  begin
    ext W x,
    simp_rw ihom_map'_add F G‚ÇÅ G‚ÇÇ Œ≥ U,
    rw [nat_trans.app_add, nat_trans.app_add],
  end }

lemma ihom_map_naturality (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ)
  {U V : opens X} (iUV : U ‚ü∂ V) :
  (ihom_obj F G‚ÇÅ).map iUV.op ‚â´ ihom_map_app F G‚ÇÅ G‚ÇÇ Œ≥ U =
  ihom_map_app F G‚ÇÅ G‚ÇÇ Œ≥ V ‚â´ (ihom_obj F G‚ÇÇ).map iUV.op :=
begin
  ext f W x,
  simp only [comp_apply, ihom_obj_map_apply, quiver.hom.unop_op, ihom_map_app_apply_app,
    ihom_map'_app_apply, restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply],
  simp only [‚Üêcomp_apply, category.assoc],
  rw [‚ÜêŒ≥.naturality, ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp, ‚Üêcategory.assoc (G‚ÇÅ.map _),
    ‚ÜêG‚ÇÅ.map_comp, ‚Üêop_comp, ‚Üêop_comp, ‚ÜêG‚ÇÇ.map_comp, ‚Üêop_comp, ‚ÜêŒ≥.naturality,
    ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp, ‚Üêop_comp],
  congr' 1,
end

@[simps] def ihom_map (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (Œ≥ : G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  ihom_obj F G‚ÇÅ ‚ü∂ ihom_obj F G‚ÇÇ :=
{ app := Œª U, ihom_map_app F G‚ÇÅ G‚ÇÇ Œ≥ U.unop,
  naturality' := Œª U V iUV, by convert ihom_map_naturality F G‚ÇÅ G‚ÇÇ Œ≥ iUV.unop }

lemma ihom_map_id (F G : presheaf AddCommGroup.{u} X) :
  ihom_map F G G (ùüô G) = ùüô _ :=
begin
  ext f U W x,
  simp only [ihom_map_app_2, ihom_map_app_apply_app, ihom_map'_app_apply, nat_trans.id_app,
    id_apply],
  simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG.map_comp, ‚Üêop_comp],
  congr' 1,
  convert category.comp_id _,
  convert G.map_id _,
end

lemma ihom_map_comp (F G‚ÇÅ G‚ÇÇ G‚ÇÉ : presheaf AddCommGroup.{u} X) (g‚ÇÅ‚ÇÇ : G‚ÇÅ ‚ü∂ G‚ÇÇ) (g‚ÇÇ‚ÇÉ : G‚ÇÇ ‚ü∂ G‚ÇÉ) :
  ihom_map F _ _ (g‚ÇÅ‚ÇÇ ‚â´ g‚ÇÇ‚ÇÉ) = ihom_map F _ _ g‚ÇÅ‚ÇÇ ‚â´ ihom_map F _ _ g‚ÇÇ‚ÇÉ :=
begin
  ext f U W x,
  simp only [ihom_map_app_2, ihom_map_app_apply_app, ihom_map'_app_apply, nat_trans.comp_app,
    comp_apply],
  simp only [‚Üêcomp_apply, category.assoc],
  congr' 3,
  rw [‚Üêg‚ÇÇ‚ÇÉ.naturality, ‚Üêcategory.assoc (G‚ÇÇ.map _), ‚ÜêG‚ÇÇ.map_comp, ‚Üêcategory.assoc (G‚ÇÇ.map _),
    ‚ÜêG‚ÇÇ.map_comp],
  congr,
end

@[simps] def ihom (F : presheaf AddCommGroup.{u} X) :
  presheaf AddCommGroup.{u} X ‚•§ presheaf AddCommGroup.{u} X :=
{ obj := ihom_obj F,
  map := ihom_map F,
  map_id' := ihom_map_id F,
  map_comp' := Œª _ _ _, ihom_map_comp F _ _ _ }

local attribute [instance] AddCommGroup.monoidal.tensor_monoidal_category

instance monoidal_presheaf_AddCommGroup : monoidal_category (presheaf AddCommGroup.{u} X) :=
category_theory.monoidal.functor_category_monoidal

open category_theory.monoidal_category

namespace tensor_ihom_adj

@[simps] def hom_equiv'.from_tensor_app_apply (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X)
  (f : F ‚äó G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : (opens X)·µí·µñ) (s : G‚ÇÅ.obj U) :
  F.restrict U.unop ‚ü∂ G‚ÇÇ.restrict U.unop :=
{ app := Œª W, let O := (emb.open_embedding U.unop).is_open_map.functor.obj W.unop in
    AddCommGroup.monoidal.curry (f.app (op O)) $
      G‚ÇÅ.map ((hom_of_le $ by { rintros _ ‚ü®p, hp, rfl‚ü©, exact p.2 }).op : op (unop U) ‚ü∂ op O) s,
  naturality' := Œª W‚ÇÅ W‚ÇÇ inc,
  begin
    simp only [restrict_map],
    generalize_proofs h1 h2 h3,
    ext t,
    simp only [comp_apply, AddCommGroup.monoidal.curry_apply_apply],
    erw ‚Üêfun_like.congr_fun (f.naturality (_ : op (h1.functor.obj (unop W‚ÇÅ)) ‚ü∂
      op (h1.functor.obj (unop W‚ÇÇ)))) (t ‚äó‚Çú (G‚ÇÅ.map (hom_of_le h3).op) s),
    simp only [tensor_obj_map, AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
      comp_apply, AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
      tensor_product.map_tmul, AddCommGroup.to_int_linear_map_apply],
    congr' 2,
    rw [‚Üêcomp_apply, ‚ÜêG‚ÇÅ.map_comp, ‚Üêop_comp],
    congr,
  end }

@[simps] def hom_equiv'.from_tensor (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X)
  (f : F ‚äó G‚ÇÅ ‚ü∂ G‚ÇÇ) : (G‚ÇÅ ‚ü∂ (ihom F).obj G‚ÇÇ) :=
{ app := Œª U,
  { to_fun := hom_equiv'.from_tensor_app_apply F G‚ÇÅ G‚ÇÇ f U,
    map_zero' := by { ext W s, simp only [hom_equiv'.from_tensor_app_apply_app, map_zero,
      nat_trans.app_zero], },
    map_add' := Œª s t, by { ext W x, simp only [hom_equiv'.from_tensor_app_apply_app, map_add,
      nat_trans.app_add], } },
  naturality' := Œª U V inc,
  begin
    ext s W x,
    simp only [hom_equiv'.from_tensor_app_apply_app, comp_apply, add_monoid_hom.coe_mk,
      AddCommGroup.monoidal.curry_apply_apply],
    dsimp only [ihom, ihom_obj],
    simp only [add_monoid_hom.coe_mk, restrict_subset_sections_map_app,
      restrict_subset_sections_map.app_apply, hom_equiv'.from_tensor_app_apply_app,
      AddCommGroup.monoidal.curry_apply_apply],
    erw [‚Üêcomp_apply, ‚ÜêG‚ÇÅ.map_comp, ‚Üêcomp_apply, ‚Üêf.naturality],
    simp only [functor.map_comp, comp_apply, tensor_obj_map, tensor_product.map_tmul,
      AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
      AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
      AddCommGroup.to_int_linear_map_apply],
    congr' 2,
    { rw [‚Üêcomp_apply, ‚ÜêF.map_comp, ‚Üêop_comp],
      symmetry,
      convert id_apply _,
      convert F.map_id _, },
    { simp only [‚Üêcomp_apply, ‚ÜêG‚ÇÅ.map_comp],
      congr, },
  end }

@[simps] def hom_equiv'.to_tensor_app_apply {F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X}
  (f : G‚ÇÅ ‚ü∂ (ihom F).obj G‚ÇÇ) (U : (opens X)·µí·µñ) : (F ‚äó G‚ÇÅ).obj U ‚ü∂ G‚ÇÇ.obj U :=
(tensor_product.lift $ @AddCommGroup.to_int_linear_map‚ÇÇ (F.obj U) (G‚ÇÅ.obj U) (G‚ÇÇ.obj U) $
  AddCommGroup.monoidal.curry $ AddCommGroup.monoidal.uncurry' $ f.app U ‚â´
    restrict_top_add_monoid_hom F G‚ÇÇ U.unop).to_add_monoid_hom

lemma hom_equiv'.to_tensor_naturality_tmul
  {F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X} (f : G‚ÇÅ ‚ü∂ (ihom F).obj G‚ÇÇ)
  {U V : (opens X)·µí·µñ} (inc : U ‚ü∂ V) (a : (F.obj U)) (b : (G‚ÇÅ.obj U)) :
  ((F ‚äó G‚ÇÅ).map inc ‚â´ hom_equiv'.to_tensor_app_apply f V)
      (a ‚äó‚Çú[‚Ñ§] b) =
  (hom_equiv'.to_tensor_app_apply f U ‚â´ G‚ÇÇ.map inc)
    (a ‚äó‚Çú[‚Ñ§] b) :=
begin
  simp only [comp_apply, tensor_obj_map, AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
    AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
    AddCommGroup.to_int_linear_map_apply, hom_equiv'.to_tensor_app_apply,
    linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
    AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
    AddCommGroup.monoidal.curry_apply_apply, AddCommGroup.monoidal.uncurry'_apply,
    linear_map.coe_mk, restrict_top_add_monoid_hom_apply, restrict_top_apply],
  simp only [‚Üêcomp_apply, ‚Üêcategory.assoc, ‚ÜêF.map_comp],
  simp only [category.assoc, ‚ÜêG‚ÇÅ.map_comp],
  rw [f.naturality, comp_apply (f.app U)],
  dsimp,
  simp only [restrict_subset_sections_map.app_apply, comp_apply],
  simp only [‚Üêcomp_apply, ‚Üêcategory.assoc, ‚ÜêF.map_comp],
  simp only [category.assoc, ‚ÜêG‚ÇÇ.map_comp],
  have eq1 := fun_like.congr_fun (whisker_eq (F.map _)
    (eq_whisker (@nat_trans.naturality _ _ _ _ _ _ (f.app U b)
        (op ‚ä§) (op (emb.of_subset inc.unop ‚ä§)) (hom_of_le le_top).op)
      (G‚ÇÇ.map _))) a,
  dsimp at eq1,
  simp only [‚Üêcategory.assoc, ‚ÜêF.map_comp] at eq1,
  simp only [category.assoc, ‚ÜêG‚ÇÇ.map_comp] at eq1,
  convert eq1,
end

@[simps] def hom_equiv'.to_tensor (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X)
  (f : G‚ÇÅ ‚ü∂ (ihom F).obj G‚ÇÇ) : F ‚äó G‚ÇÅ ‚ü∂ G‚ÇÇ :=
{ app := hom_equiv'.to_tensor_app_apply f,
  naturality' := Œª U V inc,
  begin
    ext x,
    induction x using tensor_product.induction_on with a b a b iha ihb,
    { simp only [map_zero], },
    { apply hom_equiv'.to_tensor_naturality_tmul, },
    { rw [map_add, iha, ihb, map_add], },
  end }

lemma hom_equiv'.left_inv (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (f : F ‚äó G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  (hom_equiv'.to_tensor F G‚ÇÅ G‚ÇÇ) (hom_equiv'.from_tensor F G‚ÇÅ G‚ÇÇ f) = f :=
begin
  ext U x,
  induction x using tensor_product.induction_on with a b a b ha hb,
  { simp only [map_zero] },
  { simp only [tensor_product.lift.tmul, linear_map.coe_mk, comp_apply, hom_equiv'.to_tensor_app,
      hom_equiv'.from_tensor_app_apply_2, restrict_top_add_monoid_hom_apply,
      hom_equiv'.to_tensor_app_apply_apply, AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply,
      add_monoid_hom.to_fun_eq_coe, AddCommGroup.monoidal.curry_apply_apply,
      AddCommGroup.monoidal.uncurry'_apply, restrict_top_apply,
      hom_equiv'.from_tensor_app_apply_app],
    simp only [‚Üêcomp_apply, f.naturality],
    rw [comp_apply],
    generalize_proofs h1 h2 h3,
    apply_fun G‚ÇÇ.map ((hom_of_le _).op : op U.unop ‚ü∂ op (h1.functor.obj ‚ä§)),
    work_on_goal 3 { rintros _ ‚ü®x, hx, rfl‚ü©, exact x.2 },
    work_on_goal 3 { rintros _ ‚ü®x, hx, rfl‚ü©, exact x.2 },
    work_on_goal 2
    { rw function.injective_iff_has_left_inverse,
      refine ‚ü®G‚ÇÇ.map (hom_of_le _).op, _‚ü©,
      { apply h2, },
      { intros x,
        rw [‚Üêcomp_apply, ‚ÜêG‚ÇÇ.map_comp, ‚Üêop_comp],
        convert id_apply _,
        convert G‚ÇÇ.map_id _, }, },
    erw [‚Üêcomp_apply (f.app U), ‚Üêfun_like.congr_fun (f.naturality _) (a ‚äó‚Çú b)],
    simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG‚ÇÇ.map_comp],
    rw [show G‚ÇÇ.map (_ ‚â´ _) = ùüô _, from _, category.comp_id],
    work_on_goal 2 { convert G‚ÇÇ.map_id _, },
    simp only [tensor_obj_map, AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
      comp_apply, AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
      tensor_product.map_tmul, AddCommGroup.to_int_linear_map_apply],
    congr, },
  { rw [map_add, ha, hb, map_add] }
end

lemma hom_equiv'.right_inv (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (f : G‚ÇÅ ‚ü∂ (ihom F).obj G‚ÇÇ) :
 hom_equiv'.from_tensor F G‚ÇÅ G‚ÇÇ (hom_equiv'.to_tensor F G‚ÇÅ G‚ÇÇ f) = f :=
begin
  ext U x W y,
  simp only [tensor_product.lift.tmul, linear_map.coe_mk, comp_apply,
    restrict_top_add_monoid_hom_apply, hom_equiv'.from_tensor_app_apply_2,
    hom_equiv'.from_tensor_app_apply_app, hom_equiv'.to_tensor_app,
    AddCommGroup.monoidal.curry_apply_apply, hom_equiv'.to_tensor_app_apply_apply,
    AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
    AddCommGroup.monoidal.uncurry'_apply, restrict_top_apply],
  rw [‚Üêcomp_apply (G‚ÇÅ.map _), f.naturality],
  dsimp,
  simp only [comp_apply, ihom_obj_map_apply, quiver.hom.unop_op, restrict_subset_sections_map_app,
    restrict_subset_sections_map.app_apply],
  simp only [‚Üêcomp_apply, ‚ÜêF.map_comp],
  simp only [category.assoc, ‚ÜêG‚ÇÇ.map_comp, ‚Üêop_comp],
  erw ‚Üê(f.app U x).naturality,
  work_on_goal 2
  { change _ ‚ü∂ op W.unop,
    refine (hom_of_le _).op,
    intros p hp,
    refine ‚ü®‚ü®p.1, p, hp, rfl‚ü©, ‚ü®‚ü©, _‚ü©,
    ext, refl, },
  erw [‚Üêcategory.assoc, ‚ÜêF.map_comp, id],
  congr' 1,
  convert category.id_comp _,
  convert F.map_id _,
end

@[simps] def hom_equiv' (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) :
  (F ‚äó G‚ÇÅ ‚ü∂ G‚ÇÇ) ‚âÉ (G‚ÇÅ ‚ü∂ (ihom F).obj G‚ÇÇ) :=
{ to_fun := hom_equiv'.from_tensor _ _ _,
  inv_fun := hom_equiv'.to_tensor _ _ _,
  left_inv := hom_equiv'.left_inv _ _ _,
  right_inv := hom_equiv'.right_inv _ _ _ }

@[simps] def unit'_app_sections (F G : presheaf AddCommGroup.{u} X) (U : (opens X)·µí·µñ) :
  G.obj U ‚ü∂ AddCommGroup.of (restrict F (unop U) ‚ü∂ restrict (F ‚äó G) U.unop) :=
{ to_fun := Œª x,
  { app := Œª W,
    { to_fun := Œª y, y ‚äó‚Çú G.map
        ((hom_of_le $ by { rintros _ ‚ü®‚ü®_, h‚ü©, -, rfl‚ü©, exact h, } :
          ((emb.open_embedding U.unop).is_open_map.functor.obj W.unop) ‚ü∂ U.unop).op) x,
      map_zero' := tensor_product.zero_tmul _ _,
      map_add' := Œª a b, tensor_product.add_tmul _ _ _ },
    naturality' := Œª W‚ÇÅ W‚ÇÇ inc,
    begin
      ext y,
      simp only [restrict_map, comp_apply, add_monoid_hom.coe_mk, tensor_obj_map,
        AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
        AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
        AddCommGroup.to_int_linear_map_apply],
      rw [‚Üêcomp_apply (G.map _), ‚ÜêG.map_comp, ‚Üêop_comp],
      congr,
    end },
  map_zero' :=
  begin
    ext,
    simp only [add_monoid_hom.coe_mk, map_zero, tensor_product.tmul_zero, nat_trans.app_zero,
      AddCommGroup.monoidal.ihom_obj'_str_zero_apply],
  end,
  map_add' := Œª a b,
  begin
    ext,
    simpa only [add_monoid_hom.coe_mk, map_add, nat_trans.app_add,
      AddCommGroup.monoidal.ihom_obj'_str_add_apply] using tensor_product.tmul_add _ _ _,
  end }

lemma unit'_app_sections_naturality (F G : presheaf AddCommGroup.{u} X)
  ‚¶ÉU V : (opens X)·µí·µñ‚¶Ñ (inc : U ‚ü∂ V) :
  G.map inc ‚â´ unit'_app_sections F G V =
  unit'_app_sections F G U ‚â´ ((tensor_left F ‚ãô ihom F).obj G).map inc :=
begin
  ext x y z,
  dsimp,
  simp only [comp_apply, unit'_app_sections_apply_app_apply, ihom_obj_map_apply,
    restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply, tensor_obj_map,
    AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
    AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
    AddCommGroup.to_int_linear_map_apply],
  rw [‚Üêcomp_apply, ‚Üêcomp_apply, ‚ÜêF.map_comp, ‚Üêcomp_apply, ‚ÜêG.map_comp, ‚ÜêG.map_comp],
  congr' 1,
  convert_to z = (F.map (ùüô _)) z,
  rw [F.map_id, id_apply],
end


@[simps] def unit' (F : presheaf AddCommGroup.{u} X) :
  ùü≠ (presheaf AddCommGroup.{u} X) ‚ü∂ tensor_left F ‚ãô ihom F :=
{ app := Œª G,
  { app := Œª U, unit'_app_sections F G U, naturality' := unit'_app_sections_naturality F G },
  naturality' := Œª G‚ÇÅ G‚ÇÇ Œ±,
  begin
    ext U x y z,
    dsimp,
    simp only [functor.id_map, nat_trans.comp_app, comp_apply, unit'_app_sections_apply_app_apply,
      functor.comp_map, tensor_left_map, ihom_map_2, ihom_map_app_2, ihom_map_app_apply_app,
      ihom_map'_app_apply, tensor_hom_app, nat_trans.id_app, tensor_obj_map,
      AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom, tensor_product.map_tmul,
      AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
      AddCommGroup.to_int_linear_map_apply, id_apply],
    simp only [‚Üêcomp_apply, ‚ÜêF.map_comp, ‚ÜêG‚ÇÅ.map_comp],
    rw [Œ±.naturality, category.assoc, ‚ÜêG‚ÇÇ.map_comp],
    congr' 1,
    convert_to z = (F.map (ùüô _)) z,
    rw [F.map_id, id_apply],
  end }

@[simps] def counit'_app_sections (F G : presheaf AddCommGroup.{u} X) (U : (opens X)·µí·µñ) :
  (F ‚äó ihom_obj F G).obj U ‚ü∂ G.obj U :=
(tensor_product.lift $ @AddCommGroup.to_int_linear_map‚ÇÇ (F.obj U) _ _ $
{ to_fun := Œª x,
  { to_fun := Œª (Œ± : (ihom_obj F G).obj U), restrict_top Œ± x,
    map_zero' := by rw [restrict_top_zero, add_monoid_hom.zero_apply],
    map_add' := Œª Œ± Œ≤, by rw [restrict_top_add, add_monoid_hom.add_apply] },
  map_zero' := by { ext, rw [add_monoid_hom.coe_mk, map_zero, add_monoid_hom.zero_apply] },
  map_add' :=  Œª _ _, by { ext, simp only [add_monoid_hom.add_apply, add_monoid_hom.coe_mk,
    map_add] } }).to_add_monoid_hom

lemma counit'_app_sections_naturality (F G : presheaf AddCommGroup.{u} X)
  (U V : (opens X)·µí·µñ) (inc : U ‚ü∂ V) :
  ((ihom F ‚ãô tensor_left F).obj G).map inc ‚â´ counit'_app_sections F G V =
  counit'_app_sections F G U ‚â´ G.map inc :=
begin
  ext x,
  induction x using tensor_product.induction_on with a b a b ha hb,
  { simp only [map_zero] },
  { dsimp,
    simp only [comp_apply, AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
      tensor_product.map_tmul, AddCommGroup.to_int_linear_map_apply, ihom_obj_map_apply,
      counit'_app_sections_apply, tensor_product.lift.tmul,
      AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.coe_mk],
    simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG.map_comp],
    simp only [‚Üêcategory.assoc, ‚ÜêF.map_comp],
    dsimp,
    simp only [comp_apply, restrict_subset_sections_map.app_apply],
    simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG.map_comp],
    simp only [‚Üêcategory.assoc, ‚ÜêF.map_comp],
    simp only [category.assoc],
    generalize_proofs h1 h2 h3 h4 h5 h6 h7 h8,
    have eq1 := fun_like.congr_fun (whisker_eq (F.map _)
      (eq_whisker (@nat_trans.naturality _ _ _ _ _ _ b
          (op ‚ä§) (op (emb.of_subset inc.unop ‚ä§)) (hom_of_le le_top).op)
        (G.map _))) a,
    dsimp at eq1,
    simp only [‚Üêcategory.assoc, ‚ÜêF.map_comp] at eq1,
    simp only [category.assoc, ‚ÜêG.map_comp] at eq1,
    convert eq1, },
  { simp only [map_add, ha, hb] }
end

@[simps] def counit' (F : presheaf AddCommGroup.{u} X) :
  ihom F ‚ãô tensor_left F ‚ü∂ ùü≠ (presheaf AddCommGroup.{u} X) :=
{ app := Œª G,
  { app := counit'_app_sections F G, naturality' := counit'_app_sections_naturality F G },
  naturality' := Œª G‚ÇÅ G‚ÇÇ Œ±,
  begin
    ext U s,
    induction s using tensor_product.induction_on with a b a b ha hb,
    { simp only [map_zero] },
    { simp only [functor.comp_map, ihom_map_2, tensor_left_map, nat_trans.comp_app, tensor_hom_app,
        nat_trans.id_app, ihom_map_app_2, AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
        comp_apply, AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
        tensor_product.map_tmul, AddCommGroup.to_int_linear_map_apply, id_apply,
        counit'_app_sections_apply, tensor_product.lift.tmul, add_monoid_hom.coe_mk,
        AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, functor.id_map],
      rw [ihom_map_app_apply_app, ihom_map'_app_apply],
      simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG‚ÇÇ.map_comp],
      rw [‚ÜêŒ±.naturality, ‚Üêcategory.assoc (G‚ÇÅ.map _), ‚ÜêG‚ÇÅ.map_comp],
      congr },
    { simp only [map_add, ha, hb] }
  end }

lemma hom_equiv_unit (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (Œ± : (tensor_left F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  (tensor_ihom_adj.hom_equiv' F G‚ÇÅ G‚ÇÇ) Œ± = (tensor_ihom_adj.unit' F).app G‚ÇÅ ‚â´ (ihom F).map Œ± :=
begin
  ext U x y z,
  dsimp,
  simp only [comp_apply, ihom_map_app_apply_app, ihom_map'_app_apply, tensor_obj_map,
    AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom, unit'_app_sections_apply_app_apply,
    AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
    AddCommGroup.to_int_linear_map_apply],
  simp only [‚Üêcomp_apply],
  rw [‚ÜêŒ±.naturality],
  dsimp,
  simp only [comp_apply, AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
    tensor_product.map_tmul, AddCommGroup.to_int_linear_map_apply],
  congr' 2,
  { rw [‚Üêcomp_apply, ‚ÜêF.map_comp],
    convert_to z = F.map (ùüô _) z,
    rw [F.map_id, id_apply], },
  { rw [‚Üêcomp_apply, ‚Üêcomp_apply, ‚ÜêG‚ÇÅ.map_comp, ‚ÜêG‚ÇÅ.map_comp],
    congr },
end

lemma hom_equiv_counit (F G‚ÇÅ G‚ÇÇ : presheaf AddCommGroup.{u} X) (Œ± : G‚ÇÅ ‚ü∂ (ihom F).obj G‚ÇÇ) :
  ((tensor_ihom_adj.hom_equiv' F G‚ÇÅ G‚ÇÇ).symm) Œ± =
  (tensor_left F).map Œ± ‚â´ (tensor_ihom_adj.counit' F).app G‚ÇÇ :=
begin
  ext U x,
  induction x using tensor_product.induction_on with a b a b ha hb,
  { simp only [map_zero] },
  { simp only [hom_equiv'_symm_apply, hom_equiv'.to_tensor_app,
      hom_equiv'.to_tensor_app_apply_apply, tensor_product.lift.tmul,
      AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, tensor_hom_app,
      add_monoid_hom.to_fun_eq_coe, AddCommGroup.monoidal.curry_apply_apply,
      AddCommGroup.monoidal.uncurry'_apply, linear_map.coe_mk, nat_trans.comp_app,
      comp_apply, restrict_top_add_monoid_hom_apply, restrict_top_apply, tensor_left_map],
    simp only [counit'_app_app, nat_trans.id_app, tensor_product.map_tmul,
      AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom, counit'_app_sections_apply,
      AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, add_monoid_hom.coe_mk,
      AddCommGroup.to_int_linear_map_apply, id_apply, tensor_product.lift.tmul,
      AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply], },
  { rw [map_add, ha, hb, map_add] },
end

end tensor_ihom_adj

@[simps] def tensor_ihom_adj (F : presheaf AddCommGroup.{u} X) : tensor_left F ‚ä£ ihom F :=
{ hom_equiv := tensor_ihom_adj.hom_equiv' _,
  unit := tensor_ihom_adj.unit' _,
  counit := tensor_ihom_adj.counit' _,
  hom_equiv_unit' := tensor_ihom_adj.hom_equiv_unit _,
  hom_equiv_counit' := tensor_ihom_adj.hom_equiv_counit _ }

def monoidal_closed_presheaf_AddCommGroup : monoidal_closed (presheaf AddCommGroup.{u} X) :=
{ closed' := Œª F, { is_adj :=
  ‚ü®ihom F, tensor_ihom_adj F‚ü© } }

end monoidal

namespace presheaf_of_module

open Top topological_space

local attribute [instance] monoidal.monoidal_closed_presheaf_AddCommGroup
local attribute [instance] monoidal.monoidal_presheaf_AddCommGroup

variables (R : Mon_ (presheaf AddCommGroup.{u} X)) (M : Mod R)

instance Mon_sections_ring (U : (opens X)·µí·µñ) : ring (R.X.obj U) :=
((monoidal.Mon_presheaf_Ab_equiv_presheaf_ring.functor.obj R).obj U).str

instance has_smul_Mon_sections_Mod_sections (U : (opens X)·µí·µñ) : has_smul (R.X.obj U) (M.X.obj U) :=
{ smul := Œª r x, M.act.app U (r ‚äó‚Çú x) }

instance mul_action_Mon_sections_Mod_sections (U : (opens X)·µí·µñ) :
  mul_action (R.X.obj U) (M.X.obj U) :=
{ one_smul := Œª x,
  begin
    convert fun_like.congr_fun (nat_trans.congr_app M.one_act U) ((ulift.up 1 : ulift ‚Ñ§) ‚äó‚Çú x),
    simp only [left_unitor_hom_app, AddCommGroup.monoidal.tensor_monoidal_category_left_unitor,
      AddCommGroup.monoidal.tensor_monoidal_category.left_unitor'_hom_apply,
      tensor_product.lift.tmul, linear_map.coe_mk, one_zsmul],
  end,
  mul_smul := Œª r s x, fun_like.congr_fun (nat_trans.congr_app M.assoc U) ((r ‚äó‚Çú s) ‚äó‚Çú x),
  ..presheaf_of_module.has_smul_Mon_sections_Mod_sections R M U }

instance distrib_mul_action_Mon_sections_Mod_sections (U : (opens X)·µí·µñ) :
  distrib_mul_action (R.X.obj U) (M.X.obj U) :=
{ smul_zero := Œª r, show M.act.app U _ = _, by rw [tensor_product.tmul_zero, map_zero],
  smul_add := Œª r x y, show M.act.app U _ = M.act.app U _ + M.act.app U _,
    by rw [tensor_product.tmul_add, map_add],
  ..presheaf_of_module.mul_action_Mon_sections_Mod_sections R M U }

instance module_Mon_sections_Mod_sections (U : (opens X)·µí·µñ) : module (R.X.obj U) (M.X.obj U) :=
{ add_smul := Œª r s x, show M.act.app U _ = M.act.app U _ + M.act.app U _,
    by rw [tensor_product.add_tmul, map_add],
  zero_smul := Œª x, show M.act.app U _ = 0, by rw [tensor_product.zero_tmul, map_zero],
  ..presheaf_of_module.distrib_mul_action_Mon_sections_Mod_sections R M U }

lemma sections_smul_restriction {U V : (opens X)·µí·µñ} (inc : U ‚ü∂ V) (r : R.X.obj U) (m : M.X.obj U) :
  M.X.map inc (r ‚Ä¢ m) = R.X.map inc r ‚Ä¢ M.X.map inc m :=
eq.symm $ fun_like.congr_fun (M.act.naturality inc) $ r ‚äó‚Çú m

@[simps] def forget_to_presheaf_AddCommGroup : Mod R ‚•§ presheaf AddCommGroup X :=
{ obj := Mod.X,
  map := Œª _ _ f, f.hom,
  map_id' := Œª _, rfl,
  map_comp' := Œª _ _ _ _ _, rfl }

structure sheaf_of_module (R : Mon_ (presheaf AddCommGroup.{u} X)) :=
(val : Mod R)
(cond : is_sheaf val.X)

end presheaf_of_module

end

end Top.presheaf
