/-
Copyright (c) 2021 Junyan Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Junyan Xu
-/
import topology.sheaves.presheaf
import category_theory.limits.final
import topology.sheaves.sheaf_condition.opens_le_cover

/-!
# A consequence of the sheaf condition about covers by open sets in a topological basis
-/

universes v u

noncomputable theory

open category_theory
open category_theory.limits
open topological_space
open opposite
open topological_space.opens

namespace Top

variables {C : Type u} [category.{v} C]
variables {X : Top.{v}}
structure opens_index_struct :=
(Œπ : Type v)
(f : Œπ ‚Üí opens X)
-- if Œπ and B are separated then Lean cannot infer induced category instance on Œπ
variables (B : @opens_index_struct X) (U : opens X) (F G : presheaf C X)

def is_basis_range := is_basis (set.range (B.f))

namespace presheaf

namespace sheaf_condition

def basis_le : Type v := { i // B.f i ‚â§ U }

instance : category B.Œπ := induced_category.category (op ‚àò B.f)
instance : category (basis_le B U) := category_theory.full_subcategory _

private abbreviation bl2b := full_subcategory_inclusion (Œª i, B.f i ‚â§ U)
private abbreviation idf := induced_functor (op ‚àò B.f)
private abbreviation bli := bl2b B U ‚ãô idf B

def basis_le_fam := Œª i : basis_le B U, B.f i.1
example : (bli B U).obj = op ‚àò basis_le_fam B U := rfl

def basis_le_cone : cone (bli B U) :=
{ X := op U,
  œÄ := { app := Œª i, i.2.hom.op } }

def basis_le_cone' : cone (bli B U) :=
{ X := op (supr (basis_le_fam B U)),
  œÄ := { app := Œª i, (opens.le_supr _ i).op } }

@[ext]
lemma cone_ext {J : Type _} [category J] {f : J ‚•§ (opens X)·µí·µñ}
  {c1 c2 : cone f} (h : c1.X = c2.X) : c1 = c2 :=
-- or any category with subsingleton hom sets in place of (opens X)·µí·µñ
by { cases c1, cases c2, congr, exact h,
     convert cast_heq _ _, dsimp at h, rw h }

lemma self_eq_supr_basis_le (hB : is_basis_range B) :
  supr (basis_le_fam B U) = U :=
begin
  apply subtype.eq, rw [hB.open_eq_sUnion' U.2, ‚Üêset.range_comp],
  ext, exact ‚ü®Œª ‚ü®_,‚ü®_,‚ü®‚ü®i,hi‚ü©,rfl‚ü©,rfl‚ü©,hx‚ü©, ‚ü®_,‚ü®‚ü®‚ü®i,rfl‚ü©,hi‚ü©,hx‚ü©‚ü©,
              Œª ‚ü®_,‚ü®‚ü®‚ü®i,rfl‚ü©,hi‚ü©,hx‚ü©‚ü©, ‚ü®_,‚ü®_,‚ü®‚ü®i,hi‚ü©,rfl‚ü©,rfl‚ü©,hx‚ü©‚ü©,
end

lemma basis_le_cone_eq (hB : is_basis_range B) :
  basis_le_cone B U = basis_le_cone' B U :=
let h := congr_arg op (self_eq_supr_basis_le B U hB).symm in cone_ext h

def basis_le_presheaf_cone := F.map_cone (basis_le_cone B U)

lemma basis_le_presheaf_cone_app (i : basis_le B U) :
  (basis_le_presheaf_cone B U F).œÄ.app i = F.map i.2.hom.op := rfl

lemma basis_le_presheaf_cone_app_id (i : B.Œπ) :
  (basis_le_presheaf_cone B (B.f i) F).œÄ.app ‚ü®i, le_of_eq rfl‚ü© = ùüô _
:= by dunfold basis_le_presheaf_cone; dsimp; rw ‚Üê F.map_id; refl


def lim_basis_le : Type (max u v) :=
  Œ† (U : opens X), is_limit (basis_le_presheaf_cone B U F)


lemma mono_to_cover_of_sheaf (hF : F.is_sheaf_opens_le_cover)
   (hU : supr B.f = U) (A : C) (f g : A ‚ü∂ F.obj (op U))
   -- hU is a hack to get rid of "motive not type correct" in mono_to_basis_le_of_sheaf below
   (h : ‚àÄ i, f ‚â´ F.map (hU.rec (opens.le_supr B.f i)).op = g ‚â´ F.map (hU.rec (opens.le_supr B.f i)).op) :
   f = g :=
begin
  subst hU, apply (hF B.f).some.hom_ext,
  intro V, dsimp, let i := V.unop.2.some,
  let i1 := opens.le_supr B.f i, let i2 := V.unop.2.some_spec.hom,
  have : (opens_le_cover_cocone B.f).Œπ.app V.unop = i2 ‚â´ i1 := rfl,
  rw [this, op_comp, F.map_comp, ‚Üêcategory.assoc, h i, category.assoc],
end

lemma mono_to_basis_le_of_sheaf (hB : is_basis_range B)
  (hF : F.is_sheaf_opens_le_cover) (A : C) (f g : A ‚ü∂ F.obj (op U))
  (h : ‚àÄ i : basis_le B U, f ‚â´ F.map i.2.hom.op = g ‚â´ F.map i.2.hom.op) :
  f = g :=
mono_to_cover_of_sheaf ‚ü®basis_le B U, _‚ü© _ F hF
  (self_eq_supr_basis_le _ U hB) _ _ _ (Œª V, by convert h V)

lemma cone_opens_w (c : cone (bli B U ‚ãô F))
  {i : basis_le B U} {j : B.Œπ} {h : B.f j ‚â§ U}
  (f : (bli B U).obj i ‚ü∂ (idf B).obj j) :
  c.œÄ.app i ‚â´ F.map f = c.œÄ.app ‚ü®j,h‚ü© :=
let f' : i ‚ü∂ (‚ü®j,h‚ü© : basis_le B U) := f  in  c.w f'

def cone_opens_le_cover_of_cone_basis_le (hB : is_basis_range B)
  (hF : F.is_sheaf_opens_le_cover) (c : cone (bli B U ‚ãô F)) :
  cone ((full_subcategory_inclusion _ : opens_le_cover (basis_le_fam B U) ‚•§ opens X).op ‚ãô F) :=
begin
  use c.X, refine ‚ü®ŒªW, c.œÄ.app (W.unop.2.some) ‚â´ F.map W.unop.2.some_spec.hom.op, _‚ü©,
  intros W‚ÇÅ W‚ÇÇ _, apply mono_to_basis_le_of_sheaf B W‚ÇÇ.unop.1 F hB hF,
  intro i, dsimp, simp only [category.id_comp, category.assoc, ‚ÜêF.map_comp, ‚Üêop_comp],
  rw [cone_opens_w, cone_opens_w],
  exact i.2.trans (W‚ÇÇ.unop.2.some_spec.trans W‚ÇÇ.unop.2.some.2),
end

theorem lim_basis_le_of_sheaf (hB : is_basis_range B)
  (hF : F.is_sheaf_opens_le_cover) : lim_basis_le B F :=
begin
  intro U, unfold basis_le_presheaf_cone, rw basis_le_cone_eq B U hB,
  let f := cone_opens_le_cover_of_cone_basis_le B U F hB hF,
  have hU := hF (basis_le_fam B U), fsplit,
    exact Œª c, hU.some.lift (f c),
    intros c i, abstract fac
    { dsimp, let hi : ‚àÉ j, B.f i ‚â§ basis_le_fam B U j := ‚ü®i, le_of_eq rfl‚ü©,
      convert hU.some.fac (f c) (op ‚ü®B.f i,hi‚ü©) using 1,
      exact (c.w hi.some_spec.hom.op).symm },
    intros c Œπ h,
    apply mono_to_cover_of_sheaf ‚ü®basis_le B U, _‚ü© _ F hF rfl,
    intro i, specialize h i,
    rwa ‚Üê lim_basis_le_of_sheaf.fac B F hB hF U hU c i at h,
end

variables {B F G}
structure sheaf_hom.uniq_extn_struct (Œ± : idf B ‚ãô F ‚ü∂ idf B ‚ãô G) :=
  (lift : F ‚ü∂ G)
  (fac : whisker_left (idf B) lift = Œ±)
  (uniq : ‚àÄ Œ≤, whisker_left _ Œ≤ = Œ± ‚Üí Œ≤ = lift)

theorem sheaf_hom.uniq_extn_from_basis (hG : G.is_sheaf_opens_le_cover)
  (hB : is_basis_range B) (Œ± : idf B ‚ãô F ‚ü∂ _ ‚ãô G) :
  sheaf_hom.uniq_extn_struct Œ± :=
begin
  have hl := lim_basis_le_of_sheaf B G hB hG,
  let c : Œ† U, cone (bli B U ‚ãô G) :=
    Œª U, let Œ±' := whisker_left (bl2b B U) Œ± in
    ‚ü®F.obj (op U), (basis_le_presheaf_cone B U F).œÄ ‚â´ Œ±'‚ü©,
    /- strange error when Œ±' is inlined: type mismatch at application
       whisker_left (bl2b B U).op, term (bl2b B U).op has type ... ‚•§ (B.Œπ)·µí·µñ
               but is expected to have type {X_1 // B.f X_1 ‚â§ U}·µí·µñ ‚•§ (opens ‚Ü•X)·µí·µñ -/
  fsplit, fsplit, exact Œª U, (hl U.unop).lift (c U.unop),
  { intros U V f,
    apply mono_to_basis_le_of_sheaf B V.unop G hB hG,
    cases f.unop, cases down, intro i, rw category.assoc,
    convert whisker_eq (F.map f) ((hl V.unop).fac (c V.unop) i) using 1,
    convert (hl U.unop).fac (c U.unop) ‚ü®i.1,i.2.trans down‚ü© using 1,
    rw [category.assoc, ‚ÜêG.map_comp], refl,
    rw [nat_trans.comp_app, nat_trans.comp_app, ‚Üêcategory.assoc],
    congr, rw [basis_le_presheaf_cone_app, ‚ÜêF.map_comp], refl },
  { ext i, convert (hl (B.f i)).fac (c (B.f i)) ‚ü®i,le_of_eq rfl‚ü© using 1,
    rw basis_le_presheaf_cone_app_id, exact (category.comp_id _).symm,
    dsimp, rw basis_le_presheaf_cone_app_id,
    convert (category.id_comp _).symm },
  { intros Œ≤ h, ext U, apply (hl U.unop).uniq (c U.unop),
    intro V, rw [basis_le_presheaf_cone_app, ‚ÜêŒ≤.naturality],
    dsimp, rw ‚Üê h, dsimp, refl },
end

end sheaf_condition

end presheaf

end Top
