import topology.sheaves.presheaf_monoidal
import topology.sheaves.sheaf_condition.unique_gluing

noncomputable theory

namespace Top.sheaf

open Top Top.presheaf topological_space
open category_theory category_theory.monoidal_category category_theory.limits

universe u

variables {X : Top.{u}}

alias presheaf.monoidal.ihom_obj ‚Üê presheaf.ihom_obj

lemma restrict_is_sheaf {F : Top.presheaf AddCommGroup.{u} X} (hF : is_sheaf F) (U : opens X) :
  is_sheaf (F.restrict U) :=
sorry

def sheaf_restrict (F : sheaf AddCommGroup.{u} X) (U : opens X) :
  sheaf AddCommGroup.{u} (Top.of U) := ‚ü®_, restrict_is_sheaf F.cond U‚ü©

lemma ihom_obj_is_sheaf_of_is_sheaf {F G : Top.presheaf AddCommGroup.{u} X}
  (hF : is_sheaf F) (hG : is_sheaf G) : is_sheaf (presheaf.ihom_obj F G) :=
sorry -- probably harder

instance : monoidal_category ((opens X)·µí·µñ ‚•§ AddCommGroup.{u}) :=
presheaf.monoidal.monoidal_presheaf_AddCommGroup

instance : preserves_limits (category_theory.forget AddCommGroup.{u}) :=
AddCommGroup.forget_preserves_limits.{u u}

instance (U : opens X) : preserves_colimits_of_shape ((opens.grothendieck_topology X).cover U)·µí·µñ
  (category_theory.forget AddCommGroup.{u}) :=
begin
  haveI := AddCommGroup.filtered_colimits.forget_preserves_filtered_colimits.{u},
  apply_instance
end

@[simps] def sheaf_iso_mk {F G : sheaf AddCommGroup.{u} X} (Œπ : F.val ‚âÖ G.val) : F ‚âÖ G :=
{ hom := ‚ü®Œπ.hom‚ü©,
  inv := ‚ü®Œπ.inv‚ü©,
  hom_inv_id' := Sheaf.hom.ext _ _ $ Œπ.hom_inv_id,
  inv_hom_id' := Sheaf.hom.ext _ _ $ Œπ.inv_hom_id }

@[simps] def presheaf_to_Sheaf_iso {F G : Top.presheaf AddCommGroup.{u} X} (Œπ : F ‚âÖ G) :
  (presheaf_to_Sheaf (opens.grothendieck_topology X) AddCommGroup.{u}).obj F ‚âÖ
  (presheaf_to_Sheaf (opens.grothendieck_topology X) AddCommGroup.{u}).obj G :=
sheaf_iso_mk
{ hom := grothendieck_topology.sheafify_map _ Œπ.hom,
  inv := grothendieck_topology.sheafify_map _ Œπ.inv,
  hom_inv_id' := by simpa only [‚Üêgrothendieck_topology.sheafify_map_comp, Œπ.hom_inv_id, grothendieck_topology.sheafify_map_id,
    Sheaf.category_theory.category_id_val],
  inv_hom_id' := by simpa only [‚Üêgrothendieck_topology.sheafify_map_comp, Œπ.inv_hom_id, grothendieck_topology.sheafify_map_id,
    Sheaf.category_theory.category_id_val], }

@[simps] def presheaf_tensor_obj_swap (F G : Top.presheaf AddCommGroup.{u} X) :
  F ‚äó G ‚âÖ G ‚äó F :=
nat_iso.of_components (Œª U,
{ hom := (tensor_product.lift $ @AddCommGroup.to_int_linear_map‚ÇÇ (F.obj U) _ _ $
    AddCommGroup.monoidal.curry $ ùüô _).to_add_monoid_hom,
  inv := (tensor_product.lift $ @AddCommGroup.to_int_linear_map‚ÇÇ (G.obj U) _ _ $
    AddCommGroup.monoidal.curry $ ùüô _).to_add_monoid_hom,
  hom_inv_id' :=
  begin
    ext x,
    induction x using tensor_product.induction_on with a b a b ha hb,
    { simp only [map_zero] },
    { simp only [comp_apply, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
        AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
        AddCommGroup.monoidal.curry_apply_apply, id_apply] },
    { rw [map_add, ha, hb, map_add] },
  end,
  inv_hom_id' :=
  begin
    ext x,
    induction x using tensor_product.induction_on with a b a b ha hb,
    { simp only [map_zero] },
    { simp only [comp_apply, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
        AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
        AddCommGroup.monoidal.curry_apply_apply, id_apply] },
    { rw [map_add, ha, hb, map_add] },
  end }) $ Œª U V inc,
begin
  ext x,
  induction x using tensor_product.induction_on with a b a b ha hb,
  { simp only [map_zero] },
  { simp only [comp_apply, linear_map.to_add_monoid_hom_coe, tensor_product.lift.tmul,
      AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
      AddCommGroup.monoidal.curry_apply_apply, id_apply, monoidal.tensor_obj_map,
      AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
      AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul], },
  { rw [map_add, ha, hb, map_add] },
end

@[simps] def presheaf_to_Sheaf_map_iso {F G : Top.presheaf AddCommGroup.{u} X} (Œπ : F ‚âÖ G) :
  (presheaf_to_Sheaf _ _).obj F ‚âÖ (presheaf_to_Sheaf _ _).obj G :=
sheaf_iso_mk
{ hom := ((presheaf_to_Sheaf _ _).map Œπ.hom).val,
  inv := ((presheaf_to_Sheaf _ _).map Œπ.inv).val,
  hom_inv_id' :=
  begin
    ext U x,
    change ((presheaf_to_Sheaf _ _).map Œπ.hom ‚â´ (presheaf_to_Sheaf _ _).map _).val.app U x = x,
    rw [‚Üê(presheaf_to_Sheaf _ _).map_comp, Œπ.hom_inv_id, (presheaf_to_Sheaf _ _).map_id],
    refl,
  end,
  inv_hom_id' :=
  begin
    ext U x,
    change ((presheaf_to_Sheaf _ _).map Œπ.inv ‚â´ (presheaf_to_Sheaf _ _).map _).val.app U x = x,
    rw [‚Üê(presheaf_to_Sheaf _ _).map_comp, Œπ.inv_hom_id, (presheaf_to_Sheaf _ _).map_id],
    refl,
  end, }

open category_theory.grothendieck_topology

@[simps] def sheafify_restrict_to_restrict_sheafify (F : Top.presheaf AddCommGroup.{u} X) (U : opens X) :
  (opens.grothendieck_topology U).sheafify (restrict F U) ‚ü∂ restrict (sheafify _ F) U :=
sheafify_lift _ ((restrict_functor U).map $ to_sheafify _ _)
  (restrict_is_sheaf (sheafify_is_sheaf _ F) U)

instance sheafify_restrict_to_restrict_shefify_is_iso
  (F : Top.presheaf AddCommGroup.{u} X) (U : opens X) :
  is_iso $ sheafify_restrict_to_restrict_sheafify F U :=
sorry

def restrict_sheafify_to_sheafify_restrict (F : Top.presheaf AddCommGroup.{u} X) (U : opens X) :
  restrict ((opens.grothendieck_topology X).sheafify F) U ‚ü∂
  sheafify _ (restrict F U) :=
inv (sheafify_restrict_to_restrict_sheafify F U)

namespace constructions

@[simps] def tensor_obj' (F G : sheaf AddCommGroup.{u} X) : sheaf AddCommGroup.{u} X :=
(presheaf_to_Sheaf _ _).obj $ F.val ‚äó G.val

local infixr (name := tensor_obj') `‚äô`:50 := tensor_obj'

@[simps] def tensor_obj'_swap (F G : sheaf AddCommGroup.{u} X) :
  F ‚äô G ‚âÖ G ‚äô F :=
presheaf_to_Sheaf_map_iso $ presheaf_tensor_obj_swap F.val G.val

open category_theory.grothendieck_topology

@[simps] def tensor_hom' {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : sheaf AddCommGroup.{u} X}
  (Œ± : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (Œ≤ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) : (X‚ÇÅ ‚äô X‚ÇÇ ‚ü∂ Y‚ÇÅ ‚äô Y‚ÇÇ) :=
‚ü®sheafify_map _ $ Œ±.val ‚äó Œ≤.val‚ü©

local infixr (name := tensor_hom') `‚äô`:81 := tensor_hom'

lemma tensor_id' (F G : sheaf AddCommGroup.{u} X) : (ùüô F) ‚äô (ùüô G) = ùüô (tensor_obj' F G) :=
Sheaf.hom.ext _ _ $ by simpa

lemma tensor_comp' {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : sheaf AddCommGroup.{u} X}
  (Œ±‚ÇÅ : X‚ÇÅ ‚ü∂ Y‚ÇÅ) (Œ±‚ÇÇ : X‚ÇÇ ‚ü∂ Y‚ÇÇ) (Œ≤‚ÇÅ : Y‚ÇÅ ‚ü∂ Z‚ÇÅ) (Œ≤‚ÇÇ : Y‚ÇÇ ‚ü∂ Z‚ÇÇ) :
  (Œ±‚ÇÅ ‚â´ Œ≤‚ÇÅ) ‚äô (Œ±‚ÇÇ ‚â´ Œ≤‚ÇÇ) = Œ±‚ÇÅ ‚äô Œ±‚ÇÇ ‚â´ Œ≤‚ÇÅ ‚äô Œ≤‚ÇÇ :=
Sheaf.hom.ext _ _ $ by simp

@[simps] def tensor_unit' : sheaf AddCommGroup.{u} X :=
(presheaf_to_Sheaf _ AddCommGroup).obj (ùüô_ _)

@[simps] def tensor_left' (F : sheaf AddCommGroup.{u} X) :
  sheaf AddCommGroup.{u} X ‚•§ sheaf AddCommGroup.{u} X :=
{ obj := Œª G, tensor_obj' F G,
  map := Œª _ _ Œ±, tensor_hom' (ùüô F) Œ±,
  map_id' := Œª G, Sheaf.hom.ext _ _ $ by simpa,
  map_comp' := Œª _ _ _ Œ± Œ≤, Sheaf.hom.ext _ _ $ by simp }

@[simps] def ihom_obj' (F G : sheaf AddCommGroup.{u} X) : sheaf AddCommGroup.{u} X :=
{ val := presheaf.monoidal.ihom_obj F.val G.val,
  cond := ihom_obj_is_sheaf_of_is_sheaf F.cond G.cond }

local notation `‚ü¶` F, G `‚üß` := ihom_obj' F G

@[simps] def ihom' (F : sheaf AddCommGroup.{u} X) :
  sheaf AddCommGroup.{u} X ‚•§ sheaf AddCommGroup.{u} X :=
{ obj := ihom_obj' F,
  map := Œª G‚ÇÅ G‚ÇÇ Œ±, ‚ü®presheaf.monoidal.ihom_map _ _ _ Œ±.val‚ü©,
  map_id' := Œª G,
  begin
    ext U x y z,
    simp only [Sheaf.category_theory.category_id_val, presheaf.monoidal.ihom_map_app_2,
      presheaf.monoidal.ihom_map_app_apply_app, presheaf.monoidal.ihom_map'_app_apply,
      nat_trans.id_app, id_apply],
    simp only [‚Üêcomp_apply, category.assoc, ‚ÜêG.val.map_comp],
    congr' 1,
    convert category.comp_id _,
    convert G.val.map_id _,
  end,
  map_comp' := Œª G‚ÇÅ G‚ÇÇ G‚ÇÉ Œ± Œ≤,
  begin
    ext U x y z,
    simp only [Sheaf.category_theory.category_comp_val, presheaf.monoidal.ihom_map_app_2,
      presheaf.monoidal.ihom_map_app_apply_app, presheaf.monoidal.ihom_map'_app_apply,
      nat_trans.comp_app, comp_apply],
    simp only [‚Üêcomp_apply, category.assoc],
    rw [‚Üêcategory.assoc (G‚ÇÇ.val.map _), ‚ÜêG‚ÇÇ.val.map_comp],
    congr' 4,
    erw ‚ÜêŒ≤.val.naturality,
    rw [‚Üêcategory.assoc, ‚ÜêG‚ÇÇ.val.map_comp],
    refl,
  end }

namespace tensor_left'_ihom'_adj

variables (F : sheaf AddCommGroup.{u} X)

local notation (name := local_adj) `adj` :=
  adjunction.comp (presheaf.monoidal.tensor_ihom_adj F.val)
    (sheafification_adjunction (opens.grothendieck_topology X) _)

@[simps] def hom_equiv'.from_tensor (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X) (Œ± : (tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  G‚ÇÅ ‚ü∂ ‚ü¶F, G‚ÇÇ‚üß :=
Sheaf.hom.mk $ (adj .hom_equiv _ G‚ÇÇ Œ±)

@[simps] def hom_equiv'.to_tensor (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X) (Œ± : G‚ÇÅ ‚ü∂ ‚ü¶F, G‚ÇÇ‚üß) :
  (tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ :=
Sheaf.hom.mk $ sheafify_lift _
  (((presheaf.monoidal.tensor_ihom_adj F.val).hom_equiv G‚ÇÅ.val G‚ÇÇ.val).symm Œ±.val) G‚ÇÇ.cond

lemma hom_equiv'.left_inv_aux (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X)
  (Œ± : (tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ) (U : (opens X)·µí·µñ)
  (x : (F.val ‚äó G‚ÇÅ.val).obj U) :
  (((opens.grothendieck_topology X).to_sheafify (F.val ‚äó G‚ÇÅ.val) ‚â´ Œ±.val).app U) x =
  (((((monoidal.tensor_ihom_adj F.val).hom_equiv G‚ÇÅ.val G‚ÇÇ.val).symm)
      (hom_equiv'.from_tensor F G‚ÇÅ G‚ÇÇ Œ±).val).app U) x:=
begin
  induction x using tensor_product.induction_on with a b a b ha hb,
  { simp only [map_zero] },
  { simp only [nat_trans.comp_app, comp_apply, monoidal.tensor_ihom_adj_hom_equiv,
      hom_equiv'.from_tensor_val, adjunction.hom_equiv_unit, functor.comp_map,
      monoidal.ihom_map_2, monoidal.tensor_ihom_adj.hom_equiv'_symm_apply,
      monoidal.tensor_ihom_adj.hom_equiv'.to_tensor_app, linear_map.coe_mk,
      monoidal.tensor_ihom_adj.hom_equiv'.to_tensor_app_apply_apply, restrict_top_apply,
      monoidal.ihom_map_app_2, category.assoc, tensor_product.lift.tmul,
      AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
      AddCommGroup.monoidal.curry_apply_apply, AddCommGroup.monoidal.uncurry'_apply,
      restrict_top_add_monoid_hom_apply, Sheaf_to_presheaf_map, adjunction.comp,
      equiv.trans_apply, monoidal.tensor_ihom_adj.hom_equiv'_apply,
      monoidal.tensor_ihom_adj.hom_equiv'.from_tensor_app_apply_2,
      monoidal.tensor_ihom_adj.hom_equiv'.from_tensor_app_apply_app,
      sheafification_adjunction_unit_app],
    simp only [‚Üêcomp_apply, category.assoc],
    erw ‚ÜêŒ±.val.naturality,
    simp only [comp_apply],
    congr' 1,
    simp only [‚Üêcomp_apply],
    erw ‚Üê((opens.grothendieck_topology X).to_sheafify (F.val ‚äó G‚ÇÅ.val)).naturality,
    congr' 1,
    simp only [monoidal.tensor_obj_map, AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
      AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
      AddCommGroup.to_int_linear_map_apply],
    simp only [‚Üêcomp_apply, ‚Üêcategory_theory.functor.map_comp],
    congr' 1; symmetry; convert id_apply _; convert category_theory.functor.map_id _ _; congr, },
  { rw [map_add, ha, hb, map_add] }
end

@[simps] def hom_equiv' (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X) :
  ((tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ) ‚âÉ (G‚ÇÅ ‚ü∂ (ihom' F).obj G‚ÇÇ) :=
{ to_fun := hom_equiv'.from_tensor _ _ _,
  inv_fun := hom_equiv'.to_tensor _ _ _,
  left_inv := Œª Œ±,
  begin
    ext1,
    change sheafify_lift _ _ _ = _,
    refine (sheafify_lift_unique _ _ _ _ _).symm,
    ext U x,
    apply hom_equiv'.left_inv_aux,
  end,
  right_inv := Œª Œ±,
  begin
    ext U x : 4,
    dsimp,
    simp only [adjunction.comp, equiv.trans_apply, presheaf.monoidal.tensor_ihom_adj,
      presheaf.monoidal.tensor_ihom_adj.hom_equiv'_apply,
      presheaf.monoidal.tensor_ihom_adj.hom_equiv'.from_tensor_app_apply_2],
    ext V y : 3,
    simp only [presheaf.monoidal.tensor_ihom_adj.hom_equiv'.from_tensor_app_apply_app,
      AddCommGroup.monoidal.curry_apply_apply, adjunction.hom_equiv_unit,
      sheafification_adjunction_unit_app, Sheaf_to_presheaf_map, hom_equiv'.to_tensor_val,
      to_sheafify_sheafify_lift, presheaf.monoidal.tensor_ihom_adj_hom_equiv,
      presheaf.monoidal.tensor_ihom_adj.hom_equiv'_symm_apply],
    dsimp,
    simp only [tensor_product.lift.tmul, AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply,
      add_monoid_hom.to_fun_eq_coe, AddCommGroup.monoidal.curry_apply_apply,
      AddCommGroup.monoidal.uncurry'_apply, linear_map.coe_mk, comp_apply,
      restrict_top_add_monoid_hom_apply, restrict_top_apply],
    simp only [‚Üêcomp_apply],
    erw [Œ±.val.naturality],
    dsimp,
    simp only [comp_apply, monoidal.ihom_obj_map_apply, quiver.hom.unop_op,
      restrict_subset_sections_map_app, restrict_subset_sections_map.app_apply],
    simp only [‚Üêcomp_apply, ‚ÜêF.val.map_comp],
    simp only [category.assoc, ‚ÜêG‚ÇÇ.val.map_comp],
    erw [‚Üê(Œ±.val.app _ _).naturality],
    swap,
    { change _ ‚ü∂ opposite.op V.unop,
      refine quiver.hom.op (hom_of_le _),
      intros x hx,
      refine ‚ü®‚ü®_, ‚ü®x, hx, rfl‚ü©‚ü©, ‚ü®‚ü©, _‚ü©,
      ext, refl, },
    erw [‚Üêcategory.assoc, ‚ÜêF.val.map_comp, F.val.map_id, category.id_comp],
  end }

example : true := ‚ü®‚ü©

@[simps] def unit'_app (G : sheaf AddCommGroup.{u} X) :
  G.hom $ (tensor_left' F ‚ãô ihom' F).obj G := Sheaf.hom.mk $ adj .unit.app G.val

lemma unit'_naturality (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X)
  (Œ± : G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  Œ± ‚â´ unit'_app F G‚ÇÇ = unit'_app F G‚ÇÅ ‚â´ (tensor_left' F ‚ãô ihom' F).map Œ± :=
begin
  ext1,
  simp only [Sheaf.category_theory.category_comp_val, unit'_app_val],
  erw ‚Üênat_trans.naturality,
  congr,
end

@[simps] def unit' : ùü≠ (sheaf AddCommGroup.{u} X) ‚ü∂ tensor_left' F ‚ãô ihom' F :=
{ app := unit'_app F,
  naturality' := unit'_naturality F }

@[simps] def counit' : ihom' F ‚ãô tensor_left' F ‚ü∂ ùü≠ (sheaf AddCommGroup.{u} X) :=
adj .counit

lemma hom_equiv_unit' (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup X)
  (Œ± : (tensor_left' F).obj G‚ÇÅ ‚ü∂ G‚ÇÇ) :
  hom_equiv' F G‚ÇÅ G‚ÇÇ Œ± = (unit' F).app G‚ÇÅ ‚â´ (ihom' F).map Œ± :=
begin
  ext1,
  simp only [hom_equiv'_apply, unit'_app_2, Sheaf.category_theory.category_comp_val, unit'_app_val,
    hom_equiv'.from_tensor_val, adjunction.hom_equiv_unit, functor.comp_map, Sheaf_to_presheaf_map,
    monoidal.ihom_map_2, ihom'_map_val],
  congr' 1,
end

lemma hom_equiv_counit'_aux (G‚ÇÅ G‚ÇÇ : sheaf AddCommGroup.{u} X)
  (Œ± : G‚ÇÅ ‚ü∂ (ihom' F).obj G‚ÇÇ) (U : (opens ‚Ü•X)·µí·µñ)
  (x : (F.val ‚äó G‚ÇÅ.val).obj U) :
  ((opens.grothendieck_topology X).to_sheafify (F.val ‚äó G‚ÇÅ.val) ‚â´
    (opens.grothendieck_topology X).sheafify_map (ùüô F.val ‚äó Œ±.val) ‚â´
    ((tensor_left'_ihom'_adj.counit' F).app G‚ÇÇ).val).app U x =
  (monoidal.tensor_ihom_adj.hom_equiv'.to_tensor F.val G‚ÇÅ.val G‚ÇÇ.val Œ±.val).app U x :=
begin
  induction x using tensor_product.induction_on with a b a b ha hb,
  { simp only [map_zero] },
  { rw [nat_trans.comp_app, nat_trans.comp_app, comp_apply, comp_apply, counit'_app_val_app_apply,
      ‚Üêcomp_apply, ‚Üênat_trans.comp_app, sheafify_map_sheafify_lift, category.comp_id,
      ‚Üêcomp_apply, ‚Üênat_trans.comp_app, sheafify_map_sheafify_lift, ‚Üêcomp_apply,
      ‚Üênat_trans.comp_app, to_sheafify_sheafify_lift, nat_trans.comp_app, comp_apply,
      presheaf.monoidal.tensor_ihom_adj.counit'_app_app,
      presheaf.monoidal.tensor_ihom_adj.counit'_app_sections_apply],
    erw tensor_product.lift.tmul,
    rw [AddCommGroup.to_int_linear_map_apply, nat_trans.id_app, id_apply,
      AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, add_monoid_hom.to_fun_eq_coe,
      add_monoid_hom.coe_mk, add_monoid_hom.coe_mk, AddCommGroup.to_int_linear_map_apply,
      presheaf.monoidal.tensor_ihom_adj.hom_equiv'.to_tensor_app,
      presheaf.monoidal.tensor_ihom_adj.hom_equiv'.to_tensor_app_apply_apply,
      tensor_product.lift.tmul, AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply,
      add_monoid_hom.to_fun_eq_coe, AddCommGroup.monoidal.curry_apply_apply,
      AddCommGroup.monoidal.uncurry'_apply, tensor_product.lift.tmul,
      linear_map.coe_mk, linear_map.coe_mk, comp_apply, restrict_top_add_monoid_hom_apply,
      restrict_top_apply],
    },
  { rw [map_add, ha, hb, map_add] },
end

end tensor_left'_ihom'_adj

@[simps] def tensor_left'_ihom'_adj (F : sheaf AddCommGroup.{u} X) : tensor_left' F ‚ä£ ihom' F :=
{ hom_equiv := tensor_left'_ihom'_adj.hom_equiv' F,
  unit := tensor_left'_ihom'_adj.unit' F,
  counit := tensor_left'_ihom'_adj.counit' F,
  hom_equiv_unit' := tensor_left'_ihom'_adj.hom_equiv_unit' F,
  hom_equiv_counit' := Œª G‚ÇÅ G‚ÇÇ Œ±,
  begin
    ext1,
    simp only [tensor_left'_ihom'_adj.hom_equiv'_symm_apply,
      tensor_left'_ihom'_adj.hom_equiv'.to_tensor_val,
      monoidal.tensor_ihom_adj_hom_equiv, monoidal.tensor_ihom_adj.hom_equiv'_symm_apply,
      tensor_left'_map, Sheaf.category_theory.category_comp_val, tensor_hom'_val,
      Sheaf.category_theory.category_id_val],
    refine (sheafify_lift_unique _ _ _ _ _).symm,
    ext U x : 3,
    apply tensor_left'_ihom'_adj.hom_equiv_counit'_aux,
  end }

@[simps] def curry {F G H : sheaf AddCommGroup.{u} X} (f : tensor_obj' F G ‚ü∂ H) : G ‚ü∂ ‚ü¶F, H‚üß :=
(tensor_left'_ihom'_adj F).hom_equiv _ _ f

def curry' {F G H : sheaf AddCommGroup.{u} X} (f : tensor_obj' F G ‚ü∂ H) : F ‚ü∂ ‚ü¶G, H‚üß :=
curry $ (tensor_obj'_swap G F).hom ‚â´ f

@[simps] def uncurry {F G H : sheaf AddCommGroup.{u} X} (f : G ‚ü∂ ‚ü¶F, H‚üß) : tensor_obj' F G ‚ü∂ H :=
((tensor_left'_ihom'_adj F).hom_equiv _ _).symm f

@[simps] def uncurry' {F G H : sheaf AddCommGroup.{u} X} (f : F ‚ü∂ ‚ü¶G, H‚üß) : tensor_obj' F G ‚ü∂ H :=
uncurry $ curry' $ uncurry f

lemma uncurry'_val_app_apply2 {F G H : sheaf AddCommGroup.{u} X} (f : F ‚ü∂ ‚ü¶G, H‚üß) (U : (opens X)·µí·µñ)
  (x : (tensor_obj' F G).val.obj U) :
  (uncurry' f).val.app U x =
  (uncurry f).val.app U ((tensor_obj'_swap F G).hom.val.app U x) :=
sorry

namespace associator_right

variables (F G H : sheaf AddCommGroup.{u} X)

local attribute [instance] AddCommGroup.monoidal.tensor_monoidal_category

@[simps] def aux0_app_aux {U : (opens X)·µí·µñ} (x : F.val.obj U) (y : G.val.obj U) :
  restrict H.val U.unop ‚ü∂
  restrict ((opens.grothendieck_topology X).sheafify ((F.val ‚äó G.val) ‚äó H.val)) U.unop := (
{ app := Œª V, (
  { to_fun := Œª z,
      (F.val.map (hom_of_le $ by { rintros _ ‚ü®x, _, rfl‚ü©, exact x.2 } :
          (emb.open_embedding U.unop).is_open_map.functor.obj V.unop ‚ü∂ U.unop).op x ‚äó‚Çú
      G.val.map (hom_of_le $ by { rintros _ ‚ü®x, _, rfl‚ü©, exact x.2 } :
          (emb.open_embedding U.unop).is_open_map.functor.obj V.unop ‚ü∂ U.unop).op y) ‚äó‚Çú z,
    map_zero' := by rw [tensor_product.tmul_zero],
    map_add' := Œª _ _, by rw [tensor_product.tmul_add] } : H.val.obj ((emb.open_embedding U.unop).is_open_map.functor.op.obj V) ‚ü∂
      (F.val.obj ((emb.open_embedding U.unop).is_open_map.functor.op.obj V) ‚äó
        G.val.obj ((emb.open_embedding U.unop).is_open_map.functor.op.obj V)) ‚äó
      H.val.obj ((emb.open_embedding U.unop).is_open_map.functor.op.obj V)),
  naturality' := Œª V‚ÇÅ V‚ÇÇ inc,
  begin
    ext z,
    simp only [comp_apply, restrict_map, add_monoid_hom.coe_mk],
    congr' 2;
    simp only [AddCommGroup.to_int_linear_map_apply, ‚Üêcomp_apply,
      ‚Üêcategory_theory.functor.map_comp];
    congr,
  end } : restrict H.val U.unop ‚ü∂ restrict ((F.val ‚äó G.val) ‚äó H.val) U.unop) ‚â´ to_sheafify _ _ ‚â´
sheafify_restrict_to_restrict_sheafify _ _

@[simps] def aux0_app (U : (opens X)·µí·µñ) :
  (tensor_obj (F.val.obj U) (G.val.obj U)) ‚ü∂
    AddCommGroup.of (restrict H.val U.unop ‚ü∂
      (restrict ((opens.grothendieck_topology X).sheafify ((F.val ‚äó G.val) ‚äó H.val))) U.unop) :=
(tensor_product.lift $ @AddCommGroup.to_int_linear_map‚ÇÇ (F.val.obj U) _ _ $
({ to_fun := Œª x,
  { to_fun := Œª y, aux0_app_aux F G H x y,
    map_zero' :=
    begin
      ext V y : 3,
      simp only [aux0_app_aux_app_apply, nat_trans.app_zero, AddCommGroup.zero_apply, map_zero,
        tensor_product.tmul_zero, tensor_product.zero_tmul],
    end,
    map_add' := Œª y‚ÇÅ y‚ÇÇ,
    begin
      ext V z : 3,
      simp only [aux0_app_aux_app_apply, nat_trans.app_add, add_monoid_hom.add_apply, map_add,
        tensor_product.tmul_add, tensor_product.add_tmul],
    end },
  map_zero' :=
  begin
    ext x V y : 4,
    simp only [AddCommGroup.zero_apply, nat_trans.app_zero, add_monoid_hom.coe_mk,
      aux0_app_aux_app_apply, map_zero, tensor_product.tmul_zero, tensor_product.zero_tmul],
  end,
  map_add' := Œª x‚ÇÅ x‚ÇÇ,
  begin
    ext y V z : 4,
    simp only [add_monoid_hom.coe_mk, add_monoid_hom.add_apply, aux0_app_aux_app_apply,
      nat_trans.app_add, tensor_product.tmul_add, tensor_product.add_tmul, map_add],
  end } : F.val.obj U ‚ü∂ AddCommGroup.of (G.val.obj U ‚ü∂ AddCommGroup.of
  (restrict H.val (opposite.unop U) ‚ü∂
    restrict ((opens.grothendieck_topology X).sheafify ((F.val ‚äó G.val) ‚äó H.val)) U.unop)))).to_add_monoid_hom

@[simps] def aux0 : F.val ‚äó G.val ‚ü∂ presheaf.monoidal.ihom_obj H.val
  ((opens.grothendieck_topology X).sheafify ((F.val ‚äó G.val) ‚äó H.val)) :=
{ app := aux0_app F G H,
  naturality' := Œª U V inc,
  begin
    ext z : 1,
    induction z using tensor_product.induction_on with x y x y hx hy,
    { simp only [map_zero] },
    { simp only [comp_apply, aux0_app_apply, monoidal.tensor_obj_map,
        AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,  tensor_product.map_tmul,
        AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
        AddCommGroup.to_int_linear_map_apply, tensor_product.lift.tmul, add_monoid_hom.coe_mk,
        AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, monoidal.ihom_obj_map_apply],
      ext W z : 3,
      simp only [aux0_app_aux, nat_trans.comp_app, restrict_subset_sections_map_app,
        comp_apply, add_monoid_hom.coe_mk, sheafify_restrict_to_restrict_sheafify],
      conv_lhs { rw [‚Üêcomp_apply, ‚Üênat_trans.comp_app, to_sheafify_sheafify_lift] },
      conv_rhs { rw [to_sheafify_sheafify_lift] },
      conv_rhs { rw [restrict_subset_sections_map.app_apply, nat_trans.comp_app, comp_apply,
        add_monoid_hom.coe_mk] },
      change _ = ((opens.grothendieck_topology X).sheafify ((F.val ‚äó G.val) ‚äó H.val)).map _ _,
      conv_rhs { rw [restrict_functor_map_app, ‚Üêcomp_apply] },
      erw ‚Üê((opens.grothendieck_topology X).to_sheafify ((F.val ‚äó G.val) ‚äó H.val)).naturality,
      rw [comp_apply],
      simp only [restrict_functor_map_app, monoidal.tensor_obj_map,
        AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
        AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
        AddCommGroup.to_int_linear_map_apply],
      congr' 1,
      simp only [‚Üêcomp_apply, ‚ÜêF.val.map_comp, ‚ÜêG.val.map_comp, ‚ÜêH.val.map_comp],
      congr' 1,
      convert_to z = H.val.map (ùüô _) _,
      rw [H.val.map_id, id_apply], },
    { rw [map_add, hx, hy, map_add] },
  end }

example : true := ‚ü®‚ü©

def to_sheafify_once :
  tensor_obj' (tensor_obj' F G) H ‚ü∂ (presheaf_to_Sheaf _ _).obj ((F.val ‚äó G.val) ‚äó H.val) :=
uncurry' $ ((sheafification_adjunction _ _).hom_equiv _ _).symm $ by exact aux0 F G H

lemma to_sheafify_once_def :
  to_sheafify_once F G H = uncurry' (((sheafification_adjunction _ _).hom_equiv _ _).symm $
    by exact aux0 F G H) := rfl

@[simps] def from_sheafify_once :
  (presheaf_to_Sheaf _ _).obj ((F.val ‚äó G.val) ‚äó H.val) ‚ü∂ tensor_obj' (tensor_obj' F G) H :=
(presheaf_to_Sheaf _ _).map $ (to_sheafify _ _) ‚äó ùüô _

lemma from_sheafify_once_def :
  from_sheafify_once F G H = ((presheaf_to_Sheaf _ _).map $ (to_sheafify _ _) ‚äó ùüô _) := rfl

@[simps] def iso_sheafify_once :
  tensor_obj' (tensor_obj' F G) H ‚âÖ (presheaf_to_Sheaf _ _).obj ((F.val ‚äó G.val) ‚äó H.val) :=
-- sheaf_iso_mk
{ hom := to_sheafify_once F G H,
  inv := from_sheafify_once F G H,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry }

end associator_right

namespace associator_left

variables (F G H : sheaf AddCommGroup.{u} X)

local attribute [instance] AddCommGroup.monoidal.tensor_monoidal_category

@[simps] def aux0_app_aux (U : (opens X)·µí·µñ) (x : G.val.obj U) (y : H.val.obj U) :
  restrict F.val (opposite.unop U) ‚ü∂
  restrict (F.val ‚äó G.val ‚äó H.val) (opposite.unop U) :=
{ app := Œª V,
  { to_fun := Œª z, z ‚äó‚Çú (G.val.map (hom_of_le $ Œª _ hx, by { rcases hx with ‚ü®y, hy, rfl‚ü©, exact y.2 } :
      (emb.open_embedding U.unop).is_open_map.functor.obj V.unop ‚ü∂ U.unop).op x ‚äó‚Çú H.val.map
      (hom_of_le $ Œª _ hx, by { rcases hx with ‚ü®y, hy, rfl‚ü©, exact y.2 } :
      (emb.open_embedding U.unop).is_open_map.functor.obj V.unop ‚ü∂ U.unop).op y),
    map_zero' := tensor_product.zero_tmul _ _,
    map_add' := Œª _ _, tensor_product.add_tmul _ _ _ },
  naturality' := Œª U V inc,
  begin
    ext1 z,
    simp only [restrict_map, comp_apply, add_monoid_hom.coe_mk, monoidal.tensor_obj_map,
      AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
      AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
      AddCommGroup.to_int_linear_map_apply],
    congr' 2;
    rw [‚Üêcomp_apply, ‚Üêcategory_theory.functor.map_comp];
    congr,
  end }

def aux0_app (U : (opens X)·µí·µñ) :
  G.val.obj U ‚äó H.val.obj U ‚ü∂
  AddCommGroup.of (restrict F.val U.unop ‚ü∂
    restrict ((opens.grothendieck_topology X).sheafify (F.val ‚äó G.val ‚äó H.val)) U.unop) :=
(tensor_product.lift $ @AddCommGroup.to_int_linear_map‚ÇÇ (G.val.obj U) _ _
{ to_fun := Œª x, ({ to_fun := Œª y, ((aux0_app_aux F G H U x y : restrict F.val (opposite.unop U) ‚ü∂ restrict (F.val ‚äó G.val ‚äó H.val) (opposite.unop U)) ‚â´ to_sheafify _ _ ‚â´ sheafify_restrict_to_restrict_sheafify _ _:
    restrict F.val (opposite.unop U) ‚ü∂
    restrict ((opens.grothendieck_topology X).sheafify (F.val ‚äó G.val ‚äó H.val)) (opposite.unop U)),
    map_zero' :=
    begin
      ext V y : 3,
      simp only [nat_trans.app_zero, AddCommGroup.zero_apply, comp_apply, nat_trans.comp_app,
        aux0_app_aux_app_apply, sheafify_restrict_to_restrict_sheafify_app_apply],
      simp only [map_zero, tensor_product.tmul_zero],
    end,
    map_add' := Œª y‚ÇÅ y‚ÇÇ,
    begin
      ext V z : 3,
      simp only [nat_trans.app_add, add_monoid_hom.add_apply, nat_trans.comp_app, comp_apply,
        map_add, aux0_app_aux_app_apply, tensor_product.tmul_add, tensor_product.add_tmul],
    end } : H.val.obj U ‚ü∂
    AddCommGroup.of
      (restrict F.val (opposite.unop U) ‚ü∂
      restrict ((opens.grothendieck_topology ‚Ü•X).sheafify (F.val ‚äó G.val ‚äó H.val)) (opposite.unop U))),
  map_zero' :=
  begin
    ext x V y : 4,
    simp only [AddCommGroup.zero_apply, nat_trans.app_zero, add_monoid_hom.coe_mk, comp_apply,
      aux0_app_aux_app_apply, nat_trans.comp_app, map_zero, tensor_product.tmul_zero,
      tensor_product.zero_tmul],
  end,
  map_add' := Œª x‚ÇÅ x‚ÇÇ,
  begin
    ext V y z : 4,
    simp only [add_monoid_hom.add_apply, add_monoid_hom.coe_mk, nat_trans.comp_app,
      nat_trans.app_add, comp_apply, aux0_app_aux_app_apply, map_add, tensor_product.add_tmul,
      tensor_product.tmul_add],
  end }).to_add_monoid_hom

def aux0 :
  G.val ‚äó H.val ‚ü∂
  presheaf.monoidal.ihom_obj F.val
    ((opens.grothendieck_topology X).sheafify (F.val ‚äó G.val ‚äó H.val)) :=
{ app := aux0_app F G H,
  naturality' := Œª U V inc,
  begin
    ext z : 1,
    induction z using tensor_product.induction_on with x y x y hx hy,
    { simp only [map_zero] },
    { simp only [comp_apply, aux0_app, monoidal.tensor_obj_map, linear_map.to_add_monoid_hom_coe,
        AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,  tensor_product.map_tmul,
        AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply,
        AddCommGroup.to_int_linear_map_apply, tensor_product.lift.tmul, add_monoid_hom.coe_mk,
        AddCommGroup.to_int_linear_map‚ÇÇ_apply_apply, monoidal.ihom_obj_map_apply],
      ext W z : 3,
      simp only [aux0_app_aux_app_apply, nat_trans.comp_app, restrict_subset_sections_map_app,
        comp_apply, add_monoid_hom.coe_mk, sheafify_restrict_to_restrict_sheafify],
      conv_lhs { rw [‚Üêcomp_apply, ‚Üênat_trans.comp_app, to_sheafify_sheafify_lift,
        restrict_functor_map_app] },
      conv_rhs { rw [to_sheafify_sheafify_lift] },
      conv_rhs { rw [restrict_subset_sections_map.app_apply, nat_trans.comp_app, comp_apply,
        restrict_subset_sections, aux0_app_aux_app_apply, restrict_functor_map_app, ‚Üêcomp_apply],
        dsimp only, },
      rw [‚Üênat_trans.naturality, comp_apply],
      congr' 1,
      simp only [monoidal.tensor_obj_map, AddCommGroup.monoidal.tensor_monoidal_category_tensor_hom,
        AddCommGroup.monoidal.tensor_monoidal_category.tensor_hom'_apply, tensor_product.map_tmul,
        AddCommGroup.to_int_linear_map_apply],
      simp only [‚Üêcomp_apply, ‚Üêcategory_theory.functor.map_comp],
      congr' 1,
      convert_to z = F.val.map (ùüô _) _,
      rw [F.val.map_id, id_apply], },
    { rw [map_add, hx, hy, map_add] },
  end }

def to_sheafify_once :
  tensor_obj' F (tensor_obj' G H) ‚ü∂
  (presheaf_to_Sheaf _ _).obj (F.val ‚äó G.val ‚äó H.val) :=
uncurry $ ((sheafification_adjunction _ _).hom_equiv _ _).symm $ by exact aux0 F G H

def from_sheafify_once :
  (presheaf_to_Sheaf _ _).obj (F.val ‚äó G.val ‚äó H.val) ‚ü∂
  tensor_obj' F (tensor_obj' G H) :=
(presheaf_to_Sheaf _ _).map $ ùüô _ ‚äó to_sheafify _ _

@[simps] def iso_sheafify_once :
  tensor_obj' F (tensor_obj' G H) ‚âÖ (presheaf_to_Sheaf _ _).obj (F.val ‚äó (G.val ‚äó H.val)) :=
{ hom := to_sheafify_once F G H,
  inv := from_sheafify_once F G H,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry }

end associator_left

def associator' (F G H : sheaf AddCommGroup.{u} X) :
  (tensor_obj' (tensor_obj' F G) H) ‚âÖ (tensor_obj' F (tensor_obj' G H)) :=
(associator_right.iso_sheafify_once F G H).trans $
  (presheaf_to_Sheaf_iso (Œ±_ _ _ _)).trans $
    (associator_left.iso_sheafify_once F G H).symm

end constructions

instance : monoidal_category (sheaf AddCommGroup.{u} X) :=
{ tensor_obj := constructions.tensor_obj',
  tensor_hom := Œª _ _ _ _, constructions.tensor_hom',
  tensor_unit := constructions.tensor_unit',
  associator := constructions.associator',
  left_unitor := _,
  right_unitor := _,

  tensor_id' := constructions.tensor_id',
  tensor_comp' := Œª _ _ _ _ _ _, constructions.tensor_comp',

  associator_naturality' := sorry,
  left_unitor_naturality' := sorry,
  right_unitor_naturality' := sorry,
  pentagon' := sorry,
  triangle' := sorry }

end Top.sheaf
