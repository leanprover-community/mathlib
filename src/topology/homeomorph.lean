/-
Copyright (c) 2019 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Patrick Massot, S√©bastien Gou√´zel, Zhouhang Zhou, Reid Barton
-/
import topology.dense_embedding

open set filter
open_locale topological_space

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}

/-- Homeomorphism between `Œ±` and `Œ≤`, also called topological isomorphism -/
@[nolint has_inhabited_instance] -- not all spaces are homeomorphic to each other
structure homeomorph (Œ± : Type*) (Œ≤ : Type*) [topological_space Œ±] [topological_space Œ≤]
  extends Œ± ‚âÉ Œ≤ :=
(continuous_to_fun  : continuous to_fun . tactic.interactive.continuity')
(continuous_inv_fun : continuous inv_fun . tactic.interactive.continuity')

infix ` ‚âÉ‚Çú `:25 := homeomorph

namespace homeomorph
variables [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥] [topological_space Œ¥]

instance : has_coe_to_fun (Œ± ‚âÉ‚Çú Œ≤) := ‚ü®Œª_, Œ± ‚Üí Œ≤, Œªe, e.to_equiv‚ü©

@[simp] lemma homeomorph_mk_coe (a : equiv Œ± Œ≤) (b c) :
  ((homeomorph.mk a b c) : Œ± ‚Üí Œ≤) = a :=
rfl

lemma coe_eq_to_equiv (h : Œ± ‚âÉ‚Çú Œ≤) (a : Œ±) : h a = h.to_equiv a := rfl

/-- Identity map as a homeomorphism. -/
protected def refl (Œ± : Type*) [topological_space Œ±] : Œ± ‚âÉ‚Çú Œ± :=
{ continuous_to_fun := continuous_id, continuous_inv_fun := continuous_id, .. equiv.refl Œ± }

/-- Composition of two homeomorphisms. -/
protected def trans (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≤ ‚âÉ‚Çú Œ≥) : Œ± ‚âÉ‚Çú Œ≥ :=
{ continuous_to_fun  := h‚ÇÇ.continuous_to_fun.comp h‚ÇÅ.continuous_to_fun,
  continuous_inv_fun := h‚ÇÅ.continuous_inv_fun.comp h‚ÇÇ.continuous_inv_fun,
  .. equiv.trans h‚ÇÅ.to_equiv h‚ÇÇ.to_equiv }

/-- Inverse of a homeomorphism. -/
protected def symm (h : Œ± ‚âÉ‚Çú Œ≤) : Œ≤ ‚âÉ‚Çú Œ± :=
{ continuous_to_fun  := h.continuous_inv_fun,
  continuous_inv_fun := h.continuous_to_fun,
  .. h.to_equiv.symm }

@[simp] lemma homeomorph_mk_coe_symm (a : equiv Œ± Œ≤) (b c) :
  ((homeomorph.mk a b c).symm : Œ≤ ‚Üí Œ±) = a.symm :=
rfl

@[continuity]
protected lemma continuous (h : Œ± ‚âÉ‚Çú Œ≤) : continuous h := h.continuous_to_fun

@[simp] lemma apply_symm_apply (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ≤) : h (h.symm x) = x :=
h.to_equiv.apply_symm_apply x

@[simp] lemma symm_apply_apply (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ±) : h.symm (h x) = x :=
h.to_equiv.symm_apply_apply x

protected lemma bijective (h : Œ± ‚âÉ‚Çú Œ≤) : function.bijective h := h.to_equiv.bijective
protected lemma injective (h : Œ± ‚âÉ‚Çú Œ≤) : function.injective h := h.to_equiv.injective
protected lemma surjective (h : Œ± ‚âÉ‚Çú Œ≤) : function.surjective h := h.to_equiv.surjective

/-- Change the homeomorphism `f` to make the inverse function definitionally equal to `g`. -/
def change_inv (f : Œ± ‚âÉ‚Çú Œ≤) (g : Œ≤ ‚Üí Œ±) (hg : function.right_inverse g f) : Œ± ‚âÉ‚Çú Œ≤ :=
have g = f.symm, from funext (Œª x, calc g x = f.symm (f (g x)) : (f.left_inv (g x)).symm
                                        ... = f.symm x : by rw hg x),
{ to_fun := f,
  inv_fun := g,
  left_inv := by convert f.left_inv,
  right_inv := by convert f.right_inv,
  continuous_to_fun := f.continuous,
  continuous_inv_fun := by convert f.symm.continuous }

@[simp] lemma symm_comp_self (h : Œ± ‚âÉ‚Çú Œ≤) : ‚áëh.symm ‚àò ‚áëh = id :=
funext h.symm_apply_apply

@[simp] lemma self_comp_symm (h : Œ± ‚âÉ‚Çú Œ≤) : ‚áëh ‚àò ‚áëh.symm = id :=
funext h.apply_symm_apply

@[simp] lemma range_coe (h : Œ± ‚âÉ‚Çú Œ≤) : range h = univ :=
h.surjective.range_eq

lemma image_symm (h : Œ± ‚âÉ‚Çú Œ≤) : image h.symm = preimage h :=
funext h.symm.to_equiv.image_eq_preimage

lemma preimage_symm (h : Œ± ‚âÉ‚Çú Œ≤) : preimage h.symm = image h :=
(funext h.to_equiv.image_eq_preimage).symm

@[simp] lemma image_preimage (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ≤) : h '' (h ‚Åª¬π' s) = s :=
h.to_equiv.image_preimage s

@[simp] lemma preimage_image (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ±) : h ‚Åª¬π' (h '' s) = s :=
h.to_equiv.preimage_image s

protected lemma inducing (h : Œ± ‚âÉ‚Çú Œ≤) : inducing h :=
inducing_of_inducing_compose h.continuous h.symm.continuous $
  by simp only [symm_comp_self, inducing_id]

lemma induced_eq (h : Œ± ‚âÉ‚Çú Œ≤) : topological_space.induced h ‚Äπ_‚Ä∫ = ‚Äπ_‚Ä∫ := h.inducing.1.symm

protected lemma quotient_map (h : Œ± ‚âÉ‚Çú Œ≤) : quotient_map h :=
quotient_map.of_quotient_map_compose h.symm.continuous h.continuous $
  by simp only [self_comp_symm, quotient_map.id]

lemma coinduced_eq (h : Œ± ‚âÉ‚Çú Œ≤) : topological_space.coinduced h ‚Äπ_‚Ä∫ = ‚Äπ_‚Ä∫ :=
h.quotient_map.2.symm

protected lemma embedding (h : Œ± ‚âÉ‚Çú Œ≤) : embedding h :=
‚ü®h.inducing, h.to_equiv.injective‚ü©

lemma compact_image {s : set Œ±} (h : Œ± ‚âÉ‚Çú Œ≤) : is_compact (h '' s) ‚Üî is_compact s :=
h.embedding.compact_iff_compact_image.symm

lemma compact_preimage {s : set Œ≤} (h : Œ± ‚âÉ‚Çú Œ≤) : is_compact (h ‚Åª¬π' s) ‚Üî is_compact s :=
by rw ‚Üê image_symm; exact h.symm.compact_image

protected lemma dense_embedding (h : Œ± ‚âÉ‚Çú Œ≤) : dense_embedding h :=
{ dense   := h.surjective.dense_range,
  inj     := h.injective,
  induced := h.induced_eq.symm }

@[simp] lemma is_open_preimage (h : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ≤} : is_open (h ‚Åª¬π' s) ‚Üî is_open s :=
h.quotient_map.is_open_preimage

@[simp] lemma is_open_image (h : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ±} : is_open (h '' s) ‚Üî is_open s :=
by rw [‚Üê preimage_symm, is_open_preimage]

@[simp] lemma is_closed_preimage (h : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ≤} : is_closed (h ‚Åª¬π' s) ‚Üî is_closed s :=
by simp only [is_closed, ‚Üê preimage_compl, is_open_preimage]

@[simp] lemma is_closed_image (h : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ±} : is_closed (h '' s) ‚Üî is_closed s :=
by rw [‚Üê preimage_symm, is_closed_preimage]

lemma preimage_closure (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ≤) : h ‚Åª¬π' (closure s) = closure (h ‚Åª¬π' s) :=
by rw [h.embedding.closure_eq_preimage_closure_image, h.image_preimage]

lemma image_closure (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ±) : h '' (closure s) = closure (h '' s) :=
by rw [‚Üê preimage_symm, preimage_closure]

protected lemma is_open_map (h : Œ± ‚âÉ‚Çú Œ≤) : is_open_map h := Œª s, h.is_open_image.2

protected lemma is_closed_map (h : Œ± ‚âÉ‚Çú Œ≤) : is_closed_map h := Œª s, h.is_closed_image.2

protected lemma closed_embedding (h : Œ± ‚âÉ‚Çú Œ≤) : closed_embedding h :=
closed_embedding_of_embedding_closed h.embedding h.is_closed_map

@[simp] lemma map_nhds_eq (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ±) : map h (ùìù x) = ùìù (h x) :=
h.embedding.map_nhds_eq _ (by simp)

@[simp] lemma comap_nhds_eq (h : Œ± ‚âÉ‚Çú Œ≤) (y : Œ≤) : comap h (ùìù y) = ùìù (h.symm y) :=
by rw [h.embedding.to_inducing.nhds_eq_comap, h.apply_symm_apply]

lemma nhds_eq_comap (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ±) : ùìù x = comap h (ùìù (h x)) :=
by rw [comap_nhds_eq, h.symm_apply_apply]

/-- If an bijective map `e : Œ± ‚âÉ Œ≤` is continuous and open, then it is a homeomorphism. -/
def homeomorph_of_continuous_open (e : Œ± ‚âÉ Œ≤) (h‚ÇÅ : continuous e) (h‚ÇÇ : is_open_map e) :
  Œ± ‚âÉ‚Çú Œ≤ :=
{ continuous_to_fun := h‚ÇÅ,
  continuous_inv_fun := begin
    rw continuous_def,
    intros s hs,
    convert ‚Üê h‚ÇÇ s hs using 1,
    apply e.image_eq_preimage
  end,
  .. e }

@[simp] lemma comp_continuous_on_iff (h : Œ± ‚âÉ‚Çú Œ≤) (f : Œ≥ ‚Üí Œ±) (s : set Œ≥) :
  continuous_on (h ‚àò f) s ‚Üî continuous_on f s :=
‚ü®Œª H, by simpa only [(‚àò), h.symm_apply_apply] using h.symm.continuous.comp_continuous_on H,
  Œª H, h.continuous.comp_continuous_on H‚ü©

@[simp] lemma comp_continuous_iff (h : Œ± ‚âÉ‚Çú Œ≤) {f : Œ≥ ‚Üí Œ±} :
  continuous (h ‚àò f) ‚Üî continuous f :=
by simp [continuous_iff_continuous_on_univ, comp_continuous_on_iff]

@[simp] lemma comp_continuous_iff' (h : Œ± ‚âÉ‚Çú Œ≤) {f : Œ≤ ‚Üí Œ≥} :
  continuous (f ‚àò h) ‚Üî continuous f :=
‚ü®Œª H, by simpa only [(‚àò), h.apply_symm_apply] using H.comp h.symm.continuous,
  Œª H, H.comp h.continuous‚ü©

/-- If two sets are equal, then they are homeomorphic. -/
def set_congr {s t : set Œ±} (h : s = t) : s ‚âÉ‚Çú t :=
{ continuous_to_fun := continuous_subtype_mk _ continuous_subtype_val,
  continuous_inv_fun := continuous_subtype_mk _ continuous_subtype_val,
  .. equiv.set_congr h }

/-- Sum of two homeomorphisms. -/
def sum_congr (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≥ ‚âÉ‚Çú Œ¥) : Œ± ‚äï Œ≥ ‚âÉ‚Çú Œ≤ ‚äï Œ¥ :=
{ continuous_to_fun  :=
  begin
    convert continuous_sum_rec (continuous_inl.comp h‚ÇÅ.continuous)
      (continuous_inr.comp h‚ÇÇ.continuous),
    ext x, cases x; refl,
  end,
  continuous_inv_fun :=
  begin
    convert continuous_sum_rec (continuous_inl.comp h‚ÇÅ.symm.continuous)
      (continuous_inr.comp h‚ÇÇ.symm.continuous),
    ext x, cases x; refl
  end,
  .. h‚ÇÅ.to_equiv.sum_congr h‚ÇÇ.to_equiv }

/-- Product of two homeomorphisms. -/
def prod_congr (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≥ ‚âÉ‚Çú Œ¥) : Œ± √ó Œ≥ ‚âÉ‚Çú Œ≤ √ó Œ¥ :=
{ continuous_to_fun  := (h‚ÇÅ.continuous.comp continuous_fst).prod_mk
    (h‚ÇÇ.continuous.comp continuous_snd),
  continuous_inv_fun := (h‚ÇÅ.symm.continuous.comp continuous_fst).prod_mk
    (h‚ÇÇ.symm.continuous.comp continuous_snd),
  .. h‚ÇÅ.to_equiv.prod_congr h‚ÇÇ.to_equiv }

section
variables (Œ± Œ≤ Œ≥)

/-- `Œ± √ó Œ≤` is homeomorphic to `Œ≤ √ó Œ±`. -/
def prod_comm : Œ± √ó Œ≤ ‚âÉ‚Çú Œ≤ √ó Œ± :=
{ continuous_to_fun  := continuous_snd.prod_mk continuous_fst,
  continuous_inv_fun := continuous_snd.prod_mk continuous_fst,
  .. equiv.prod_comm Œ± Œ≤ }

/-- `(Œ± √ó Œ≤) √ó Œ≥` is homeomorphic to `Œ± √ó (Œ≤ √ó Œ≥)`. -/
def prod_assoc : (Œ± √ó Œ≤) √ó Œ≥ ‚âÉ‚Çú Œ± √ó (Œ≤ √ó Œ≥) :=
{ continuous_to_fun  := (continuous_fst.comp continuous_fst).prod_mk
    ((continuous_snd.comp continuous_fst).prod_mk continuous_snd),
  continuous_inv_fun := (continuous_fst.prod_mk (continuous_fst.comp continuous_snd)).prod_mk
    (continuous_snd.comp continuous_snd),
  .. equiv.prod_assoc Œ± Œ≤ Œ≥ }

end

/-- `ulift Œ±` is homeomorphic to `Œ±`. -/
def {u v} ulift {Œ± : Type u} [topological_space Œ±] : ulift.{v u} Œ± ‚âÉ‚Çú Œ± :=
{ continuous_to_fun := continuous_ulift_down,
  continuous_inv_fun := continuous_ulift_up,
  .. equiv.ulift }

section distrib

/-- `(Œ± ‚äï Œ≤) √ó Œ≥` is homeomorphic to `Œ± √ó Œ≥ ‚äï Œ≤ √ó Œ≥`. -/
def sum_prod_distrib : (Œ± ‚äï Œ≤) √ó Œ≥ ‚âÉ‚Çú Œ± √ó Œ≥ ‚äï Œ≤ √ó Œ≥ :=
begin
  refine (homeomorph.homeomorph_of_continuous_open (equiv.sum_prod_distrib Œ± Œ≤ Œ≥).symm _ _).symm,
  { convert continuous_sum_rec
      ((continuous_inl.comp continuous_fst).prod_mk continuous_snd)
      ((continuous_inr.comp continuous_fst).prod_mk continuous_snd),
    ext1 x, cases x; refl, },
  { exact (is_open_map_sum
    (open_embedding_inl.prod open_embedding_id).is_open_map
    (open_embedding_inr.prod open_embedding_id).is_open_map) }
end

/-- `Œ± √ó (Œ≤ ‚äï Œ≥)` is homeomorphic to `Œ± √ó Œ≤ ‚äï Œ± √ó Œ≥`. -/
def prod_sum_distrib : Œ± √ó (Œ≤ ‚äï Œ≥) ‚âÉ‚Çú Œ± √ó Œ≤ ‚äï Œ± √ó Œ≥ :=
(prod_comm _ _).trans $
sum_prod_distrib.trans $
sum_congr (prod_comm _ _) (prod_comm _ _)

variables {Œπ : Type*} {œÉ : Œπ ‚Üí Type*} [Œ† i, topological_space (œÉ i)]

/-- `(Œ£ i, œÉ i) √ó Œ≤` is homeomorphic to `Œ£ i, (œÉ i √ó Œ≤)`. -/
def sigma_prod_distrib : ((Œ£ i, œÉ i) √ó Œ≤) ‚âÉ‚Çú (Œ£ i, (œÉ i √ó Œ≤)) :=
homeomorph.symm $
homeomorph_of_continuous_open (equiv.sigma_prod_distrib œÉ Œ≤).symm
  (continuous_sigma $ Œª i,
    (continuous_sigma_mk.comp continuous_fst).prod_mk continuous_snd)
  (is_open_map_sigma $ Œª i,
    (open_embedding_sigma_mk.prod open_embedding_id).is_open_map)

end distrib

end homeomorph
