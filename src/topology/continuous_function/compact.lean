/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import topology.continuous_function.bounded
import analysis.normed_space.linear_isometry
import topology.uniform_space.compact_separated
import tactic.equiv_rw

/-!
# Continuous functions on a compact space

Continuous functions `C(Œ±, Œ≤)` from a compact space `Œ±` to a metric space `Œ≤`
are automatically bounded, and so acquire various structures inherited from `Œ± ‚Üí·µá Œ≤`.

This file transfers these structures, and restates some lemmas
characterising these structures.

If you need a lemma which is proved about `Œ± ‚Üí·µá Œ≤` but not for `C(Œ±, Œ≤)` when `Œ±` is compact,
you should restate it here. You can also use
`bounded_continuous_function.equiv_continuous_map_of_compact` to functions back and forth.

-/

noncomputable theory
open_locale topological_space classical nnreal bounded_continuous_function

open set filter metric

open bounded_continuous_function

namespace continuous_map

variables (Œ± : Type*) (Œ≤ : Type*) [topological_space Œ±] [compact_space Œ±] [normed_group Œ≤]

/--
When `Œ±` is compact, the bounded continuous maps `Œ± ‚Üí·µá ùïú` are
equivalent to `C(Œ±, ùïú)`.
-/
@[simps]
def equiv_bounded_of_compact : C(Œ±, Œ≤) ‚âÉ (Œ± ‚Üí·µá Œ≤) :=
‚ü®mk_of_compact, forget_boundedness Œ± Œ≤, Œª f, by { ext, refl, }, Œª f, by { ext, refl, }‚ü©

/--
When `Œ±` is compact, the bounded continuous maps `Œ± ‚Üí·µá ùïú` are
additively equivalent to `C(Œ±, ùïú)`.
-/
@[simps]
def add_equiv_bounded_of_compact : C(Œ±, Œ≤) ‚âÉ+ (Œ± ‚Üí·µá Œ≤) :=
({ ..forget_boundedness_add_hom Œ± Œ≤,
  ..(equiv_bounded_of_compact Œ± Œ≤).symm, } : (Œ± ‚Üí·µá Œ≤) ‚âÉ+ C(Œ±, Œ≤)).symm

-- It would be nice if `@[simps]` produced this directly,
-- instead of the unhelpful `add_equiv_bounded_of_compact_apply_to_continuous_map`.
@[simp]
lemma add_equiv_bounded_of_compact_apply_apply (f : C(Œ±, Œ≤)) (a : Œ±) :
  add_equiv_bounded_of_compact Œ± Œ≤ f a = f a :=
rfl

@[simp]
lemma add_equiv_bounded_of_compact_to_equiv :
  (add_equiv_bounded_of_compact Œ± Œ≤).to_equiv = equiv_bounded_of_compact Œ± Œ≤ :=
rfl

instance : metric_space C(Œ±,Œ≤) :=
metric_space.induced
  (equiv_bounded_of_compact Œ± Œ≤)
  (equiv_bounded_of_compact Œ± Œ≤).injective
  (by apply_instance)

section
variables {Œ± Œ≤} (f g : C(Œ±, Œ≤)) {C : ‚Ñù}

/-- The distance between two functions is controlled by the supremum of the pointwise distances -/
lemma dist_le (C0 : (0 : ‚Ñù) ‚â§ C) : dist f g ‚â§ C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) ‚â§ C :=
@bounded_continuous_function.dist_le  _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) ((equiv_bounded_of_compact Œ± Œ≤) g) _ C0

lemma dist_le_iff_of_nonempty [nonempty Œ±] :
  dist f g ‚â§ C ‚Üî ‚àÄ x, dist (f x) (g x) ‚â§ C :=
@bounded_continuous_function.dist_le_iff_of_nonempty  _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) ((equiv_bounded_of_compact Œ± Œ≤) g) _ _

lemma dist_lt_of_nonempty [nonempty Œ±]
  (w : ‚àÄx:Œ±, dist (f x) (g x) < C) : dist f g < C :=
@bounded_continuous_function.dist_lt_of_nonempty_compact  _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) ((equiv_bounded_of_compact Œ± Œ≤) g) _ _ _ w

lemma dist_lt_iff (C0 : (0 : ‚Ñù) < C) :
  dist f g < C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) < C :=
@bounded_continuous_function.dist_lt_iff_of_compact  _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) ((equiv_bounded_of_compact Œ± Œ≤) g) _ _ C0

lemma dist_lt_iff_of_nonempty [nonempty Œ±] :
  dist f g < C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) < C :=
@bounded_continuous_function.dist_lt_iff_of_nonempty_compact  _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) ((equiv_bounded_of_compact Œ± Œ≤) g) _ _ _

end

variables (Œ± Œ≤)

/--
When `Œ±` is compact, and `Œ≤` is a metric space, the bounded continuous maps `Œ± ‚Üí·µá Œ≤` are
isometric to `C(Œ±, Œ≤)`.
-/
@[simps]
def isometric_bounded_of_compact :
  C(Œ±, Œ≤) ‚âÉ·µ¢ (Œ± ‚Üí·µá Œ≤) :=
{ isometry_to_fun := Œª x y, rfl,
  to_equiv := equiv_bounded_of_compact Œ± Œ≤ }

-- TODO at some point we will need lemmas characterising this norm!
-- At the moment the only way to reason about it is to transfer `f : C(Œ±,Œ≤)` back to `Œ± ‚Üí·µá Œ≤`.
instance : has_norm C(Œ±,Œ≤) :=
{ norm := Œª x, dist x 0 }

instance : normed_group C(Œ±,Œ≤) :=
{ dist_eq := Œª x y,
  begin
    change dist x y = dist (x-y) 0,
     -- it would be nice if `equiv_rw` could rewrite in multiple places at once
    equiv_rw (equiv_bounded_of_compact Œ± Œ≤) at x,
    equiv_rw (equiv_bounded_of_compact Œ± Œ≤) at y,
    have p : dist x y = dist (x-y) 0, { rw dist_eq_norm, rw dist_zero_right, },
    convert p,
    exact ((add_equiv_bounded_of_compact Œ± Œ≤).symm.map_sub _ _).symm,
  end, }

section
variables {Œ± Œ≤} (f : C(Œ±, Œ≤))
-- The corresponding lemmas for `bounded_continuous_function` are stated with `{f}`,
-- and so can not be used in dot notation.

/-- Distance between the images of any two points is at most twice the norm of the function. -/
lemma dist_le_two_norm (x y : Œ±) : dist (f x) (f y) ‚â§ 2 * ‚à•f‚à• :=
((equiv_bounded_of_compact Œ± Œ≤) f).dist_le_two_norm x y

/-- The norm of a function is controlled by the supremum of the pointwise norms -/
lemma norm_le {C : ‚Ñù} (C0 : (0 : ‚Ñù) ‚â§ C) : ‚à•f‚à• ‚â§ C ‚Üî ‚àÄx:Œ±, ‚à•f x‚à• ‚â§ C :=
@bounded_continuous_function.norm_le _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) _ C0

lemma norm_le_of_nonempty [nonempty Œ±] {M : ‚Ñù} : ‚à•f‚à• ‚â§ M ‚Üî ‚àÄ x, ‚à•f x‚à• ‚â§ M :=
@bounded_continuous_function.norm_le_of_nonempty _ _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) _

lemma norm_lt_iff {M : ‚Ñù} (M0 : 0 < M) : ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
@bounded_continuous_function.norm_lt_iff_of_compact _ _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) _ M0

lemma norm_lt_iff_of_nonempty [nonempty Œ±] {M : ‚Ñù} :
  ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
@bounded_continuous_function.norm_lt_iff_of_nonempty_compact _ _ _ _ _ _
  ((equiv_bounded_of_compact Œ± Œ≤) f) _

end

section
variables {R : Type*} [normed_ring R]

instance : normed_ring C(Œ±,R) :=
{ norm_mul := Œª f g,
  begin
    equiv_rw (equiv_bounded_of_compact Œ± R) at f,
    equiv_rw (equiv_bounded_of_compact Œ± R) at g,
    exact norm_mul_le f g,
  end,
  ..(infer_instance : normed_group C(Œ±,R)) }

end

section
variables {ùïú : Type*} [normed_field ùïú] [normed_space ùïú Œ≤]

instance : normed_space ùïú C(Œ±,Œ≤) :=
{ norm_smul_le := Œª c f,
  begin
    equiv_rw (equiv_bounded_of_compact Œ± Œ≤) at f,
    exact le_of_eq (norm_smul c f),
  end }

variables (Œ± ùïú)

/--
When `Œ±` is compact and `ùïú` is a normed field,
the `ùïú`-algebra of bounded continuous maps `Œ± ‚Üí·µá Œ≤` is
`ùïú`-linearly isometric to `C(Œ±, Œ≤)`.
-/
def linear_isometry_bounded_of_compact :
  C(Œ±, Œ≤) ‚âÉ‚Çó·µ¢[ùïú] (Œ± ‚Üí·µá Œ≤) :=
{ map_smul' := Œª c f, by { ext, simp, },
  norm_map' := Œª f, rfl,
  ..add_equiv_bounded_of_compact Œ± Œ≤ }

@[simp]
lemma linear_isometry_bounded_of_compact_to_isometric :
  (linear_isometry_bounded_of_compact Œ± Œ≤ ùïú).to_isometric =
    isometric_bounded_of_compact Œ± Œ≤ :=
rfl

@[simp]
lemma linear_isometry_bounded_of_compact_to_add_equiv :
  (linear_isometry_bounded_of_compact Œ± Œ≤ ùïú).to_linear_equiv.to_add_equiv =
    add_equiv_bounded_of_compact Œ± Œ≤ :=
rfl

@[simp]
lemma linear_isometry_bounded_of_compact_of_compact_to_equiv :
  (linear_isometry_bounded_of_compact Œ± Œ≤ ùïú).to_linear_equiv.to_equiv =
    equiv_bounded_of_compact Œ± Œ≤ :=
rfl

end

end continuous_map
