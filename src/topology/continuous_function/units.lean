/-
Copyright (c) 2022 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import topology.continuous_function.compact
import analysis.normed_space.units
import algebra.algebra.spectrum

/-!
# Units of continuous functions

This file concerns itself with `C(Œ±, Œ≤)À£` and `C(Œ±, Œ≤À£)` when `Œ±` is a topological space
and `Œ≤` is a normed ring.
-/

section units

section normed_ring

variables {Œ± : Type*} [topological_space Œ±] {Œ≤ : Type*} [normed_ring Œ≤]

/-- Equivalence between continuous maps into the units of a normed ring the
the units of the ring of continuous functions. -/
@[simps]
def continuous_map.units_lift : C(Œ±, Œ≤À£) ‚âÉ C(Œ±, Œ≤)À£ :=
{ to_fun := Œª f,
  { val := ‚ü®coe ‚àò f, units.continuous_coe.comp f.continuous‚ü©,
    inv := ‚ü®Œª x, ‚Üë(f x)‚Åª¬π, units.continuous_coe.comp (continuous_inv.comp f.continuous)‚ü©,
    val_inv := by { ext, simp only [continuous_map.coe_mul, continuous_map.coe_mk, pi.mul_apply,
      units.mul_inv, continuous_map.coe_one, pi.one_apply] },
    inv_val := by { ext, simp only [continuous_map.coe_mul, continuous_map.coe_mk, pi.mul_apply,
      units.inv_mul, continuous_map.coe_one, pi.one_apply]} },
  inv_fun := Œª f,
  { to_fun := Œª x, ‚ü®f x, f‚Åª¬π x, (f.val.coe_mul f.inv ‚ñ∏ continuous_map.congr_fun f.val_inv x),
                                (f.inv.coe_mul f.val ‚ñ∏ continuous_map.congr_fun f.inv_val x)‚ü©,
    continuous_to_fun := continuous_induced_rng (continuous.prod_mk (f : C(Œ±, Œ≤)).continuous
      $ mul_opposite.continuous_op.comp (continuous_map.continuous (f‚Åª¬π : C(Œ±, Œ≤)À£))) },
  left_inv := Œª f, by { ext, refl },
  right_inv := Œª f, by { ext, refl } }

/-- Construct a continuous map into the group of units of a normed ring from a function into the
normed ring and a proof that every element of the range is a unit. -/
@[simps]
noncomputable def continuous_map.units_of_forall_is_unit [complete_space Œ≤] {f : C(Œ±, Œ≤)}
  (h : ‚àÄ x, is_unit (f x)) : C(Œ±, Œ≤À£) :=
{ to_fun := Œª x, (h x).unit,
  continuous_to_fun :=
  begin
    refine continuous_induced_rng (continuous.prod_mk f.continuous
      (mul_opposite.continuous_op.comp (continuous_iff_continuous_at.mpr (Œª x, _)))),
    have := normed_ring.inverse_continuous_at (h x).unit,
    simp only [‚Üêring.inverse_unit, is_unit.unit_spec, ‚Üêfunction.comp_apply] at this ‚ä¢,
    exact this.comp (f.continuous_at x),
  end }

instance [complete_space Œ≤] : can_lift C(Œ±, Œ≤) C(Œ±, Œ≤À£) :=
{ coe := Œª f, ‚ü®coe ‚àò f, units.continuous_coe.comp f.continuous‚ü©,
  cond := Œª f, ‚àÄ x, is_unit (f x),
  prf := Œª f h, ‚ü®continuous_map.units_of_forall_is_unit h, by { ext, refl }‚ü© }

lemma continuous_map.is_unit_iff_forall_is_unit [complete_space Œ≤] (f : C(Œ±, Œ≤)) :
  is_unit f ‚Üî ‚àÄ x, is_unit (f x) :=
begin
  refine iff.intro (Œª h, _) (Œª h, _),
  { lift f to C(Œ±, Œ≤)À£ using h,
    exact Œª x, ‚ü®‚ü®f x, f‚Åª¬π x, (f.val.coe_mul f.inv ‚ñ∏ continuous_map.congr_fun f.val_inv x),
                             (f.inv.coe_mul f.val ‚ñ∏ continuous_map.congr_fun f.inv_val x)‚ü©, rfl‚ü© },
  { refine ‚ü®(continuous_map.units_of_forall_is_unit h).units_lift, by { ext, refl }‚ü© }
end

end normed_ring

section normed_field

variables {Œ± : Type*} [topological_space Œ±] {ùïú : Type*} [normed_field ùïú] [complete_space ùïú]

lemma continuous_map.is_unit_iff_forall_ne_zero (f : C(Œ±, ùïú)) :
  is_unit f ‚Üî ‚àÄ x, f x ‚â† 0 :=
by simp_rw [f.is_unit_iff_forall_is_unit, is_unit_iff_ne_zero]

lemma continuous_map.spectrum_eq_range (f : C(Œ±, ùïú)) :
  spectrum ùïú f = set.range f :=
by { ext, simp only [spectrum.mem_iff, continuous_map.is_unit_iff_forall_ne_zero, not_forall,
       continuous_map.coe_sub, pi.sub_apply, algebra_map_apply, algebra.id.smul_eq_mul,
       mul_one, not_not, set.mem_range, sub_eq_zero, @eq_comm _ x _] }

end normed_field

end units
