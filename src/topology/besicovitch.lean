/-
Copyright (c) 2018 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import topology.metric_space.basic
import tactic.induction
import analysis.normed_space.basic
import analysis.normed_space.finite_dimension
import measure_theory.measure.haar_lebesgue

/-!
# Besicovitch covering lemma

We prove the Besicovitch covering lemma.

-/

universe u
open metric set finite_dimensional measure_theory filter

open_locale ennreal topological_space

lemma ball_subset_ball' {E : Type*} [normed_group E]
  (x y : E) (rx ry : ‚Ñù) (h : rx + dist x y ‚â§ ry) :
  ball x rx ‚äÜ ball y ry :=
begin
  assume z hz,
  calc dist z y ‚â§ dist z x + dist x y : dist_triangle _ _ _
  ... < rx + dist x y : add_lt_add_right hz _
  ... ‚â§ ry : h
end

namespace ennreal

@[simp, norm_cast] lemma to_nnreal_nat (n : ‚Ñï) : (n : ‚Ñù‚â•0‚àû).to_nnreal = n :=
by conv_lhs { rw [‚Üê ennreal.coe_nat n, ennreal.to_nnreal_coe] }

@[simp, norm_cast] lemma to_real_nat (n : ‚Ñï) : (n : ‚Ñù‚â•0‚àû).to_real = n :=
by conv_lhs { rw [‚Üê ennreal.of_real_coe_nat n, ennreal.to_real_of_real (nat.cast_nonneg _)] }

end ennreal

namespace fin

lemma exists_injective_of_le_card_fintype
  {Œ± : Type*} [fintype Œ±] {k : ‚Ñï} (hk : k ‚â§ fintype.card Œ±) :
  ‚àÉ (f : fin k ‚Üí Œ±), function.injective f :=
‚ü®_, (fintype.equiv_fin Œ±).symm.injective.comp (fin.cast_le hk).injective‚ü©

lemma exists_injective_of_le_card_finset {Œ± : Type*} {s : finset Œ±} {k : ‚Ñï} (hk : k ‚â§ s.card) :
  ‚àÉ (f : fin k ‚Üí Œ±), function.injective f ‚àß range f ‚äÜ s :=
begin
  rw ‚Üê fintype.card_coe at hk,
  rcases fin.exists_injective_of_le_card_fintype hk with ‚ü®f, hf‚ü©,
  exact ‚ü®(Œª x, (f x : Œ±)), function.injective.comp subtype.coe_injective hf,
    by simp [range_subset_iff]‚ü©
end

end fin

noncomputable theory

namespace besicovitch

def multiplicity (E : Type*) [normed_group E] :=
Sup {N | ‚àÉ s : finset E, s.card = N ‚àß (‚àÄ c ‚àà s, ‚à•c‚à• ‚â§ 2) ‚àß (‚àÄ c ‚àà s, ‚àÄ d ‚àà s, c ‚â† d ‚Üí 1 ‚â§ ‚à•c - d‚à•)}

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E] [finite_dimensional ‚Ñù E]

lemma besicovitch.card_le_of_separated
  (s : finset E) (hs : ‚àÄ c ‚àà s, ‚à•c‚à• ‚â§ 2) (h : ‚àÄ (c ‚àà s) (d ‚àà s), c ‚â† d ‚Üí 1 ‚â§ ‚à•c - d‚à•) :
  s.card ‚â§ 5 ^ (finrank ‚Ñù E) :=
begin
  /- We consider balls of radius `1/2` around the points in `s`. They are disjoint, and all
  contained in the ball of radius `5/2`. A volume argument gives `s.card * (1/2)^dim ‚â§ (5/2)^dim`,
  i.e., `s.card ‚â§ 5^dim`. -/
  letI : measurable_space E := borel E,
  letI : borel_space E := ‚ü®rfl‚ü©,
  let Œº : measure E := measure.add_haar,
  let Œ¥ : ‚Ñù := (1 : ‚Ñù)/2,
  let œÅ : ‚Ñù := (5 : ‚Ñù)/2,
  have œÅpos : 0 < œÅ := by norm_num [œÅ],
  set A := ‚ãÉ (c ‚àà s), ball (c : E) Œ¥ with hA,
  have D : set.pairwise_on (s : set E) (disjoint on (Œª c, ball (c : E) Œ¥)),
  { rintros c hc d hd hcd,
    apply ball_disjoint_ball,
    rw dist_eq_norm,
    convert h c hc d hd hcd,
    norm_num },
  have A_subset : A ‚äÜ ball (0 : E) œÅ,
  { refine bUnion_subset (Œª x hx, _),
    apply ball_subset_ball',
    calc Œ¥ + dist x 0 ‚â§ Œ¥ + 2 : by { rw dist_zero_right, exact add_le_add le_rfl (hs x hx) }
    ... = 5 / 2 : by norm_num [Œ¥] },
  have I : (s.card : ‚Ñù‚â•0‚àû) * ennreal.of_real (Œ¥ ^ (finrank ‚Ñù E)) * Œº (ball 0 1) ‚â§
    ennreal.of_real (œÅ ^ (finrank ‚Ñù E)) * Œº (ball 0 1) := calc
  (s.card : ‚Ñù‚â•0‚àû) * ennreal.of_real (Œ¥ ^ (finrank ‚Ñù E)) * Œº (ball 0 1) = Œº A :
    begin
      rw [hA, measure_bUnion_finset D (Œª c hc, measurable_set_ball)],
      have I : 0 < Œ¥, by norm_num [Œ¥],
      simp only [Œº.add_haar_ball_of_pos _ I, one_div, one_pow, finset.sum_const,
        nsmul_eq_mul, div_pow, mul_assoc]
    end
  ... ‚â§ Œº (ball (0 : E) œÅ) : measure_mono A_subset
  ... = ennreal.of_real (œÅ ^ (finrank ‚Ñù E)) * Œº (ball 0 1) :
    by simp only [Œº.add_haar_ball_of_pos _ œÅpos],
  have J : (s.card : ‚Ñù‚â•0‚àû) * ennreal.of_real (Œ¥ ^ (finrank ‚Ñù E))
    ‚â§ ennreal.of_real (œÅ ^ (finrank ‚Ñù E)) :=
      (ennreal.mul_le_mul_right (Œº.add_haar_ball_pos _ zero_lt_one).ne'
        (Œº.add_haar_ball_lt_top _ _).ne).1 I,
  have K : (s.card : ‚Ñù) ‚â§ (5 : ‚Ñù) ^ finrank ‚Ñù E,
    by simpa [ennreal.to_real_mul, div_eq_mul_inv] using
      ennreal.to_real_le_of_le_of_real (pow_nonneg œÅpos.le _) J,
  exact_mod_cast K,
end

lemma multiplicity_le : multiplicity E ‚â§ 5 ^ (finrank ‚Ñù E) :=
begin
  apply cSup_le,
  { refine ‚ü®0, ‚ü®‚àÖ, by simp‚ü©‚ü© },
  { rintros _ ‚ü®s, ‚ü®rfl, h‚ü©‚ü©,
    exact besicovitch.card_le_of_separated s h.1 h.2 }
end

lemma card_le_multiplicity
  {s : finset E} (hs : ‚àÄ c ‚àà s, ‚à•c‚à• ‚â§ 2) (h's : ‚àÄ (c ‚àà s) (d ‚àà s), c ‚â† d ‚Üí 1 ‚â§ ‚à•c - d‚à•) :
  s.card ‚â§ multiplicity E :=
begin
  apply le_cSup,
  { refine ‚ü®5 ^ (finrank ‚Ñù E), _‚ü©,
    rintros _ ‚ü®s, ‚ü®rfl, h‚ü©‚ü©,
    exact besicovitch.card_le_of_separated s h.1 h.2 },
  { simp only [mem_set_of_eq, ne.def],
    exact ‚ü®s, rfl, hs, h's‚ü© }
end

variable (E)
lemma exists_good_œÑ : ‚àÉ (œÑ : ‚Ñù), 1 < œÑ ‚àß ‚àÄ (s : finset E), (‚àÄ c ‚àà s, ‚à•c‚à• ‚â§ 2 * œÑ) ‚Üí
  (‚àÄ (c ‚àà s) (d ‚àà s), c ‚â† d ‚Üí œÑ‚Åª¬π ‚â§ ‚à•c - d‚à•) ‚Üí s.card ‚â§ multiplicity E :=
begin
  classical,
  by_contradiction h,
  push_neg at h,
  set N := multiplicity E + 1 with hN,
  have : ‚àÄ (œÑ : ‚Ñù), 1 < œÑ ‚Üí ‚àÉ f : fin N ‚Üí E, (‚àÄ (i : fin N), ‚à•f i‚à• ‚â§ 2 * œÑ)
    ‚àß (‚àÄ i j, i ‚â† j ‚Üí œÑ‚Åª¬π ‚â§ ‚à•f i - f j‚à•),
  { assume œÑ hœÑ,
    rcases h œÑ hœÑ with ‚ü®s, hs, h's, s_card‚ü©,
    obtain ‚ü®f, f_inj, hfs‚ü© : ‚àÉ (f : fin N ‚Üí E), function.injective f ‚àß range f ‚äÜ ‚Üës :=
      fin.exists_injective_of_le_card_finset s_card,
    simp only [range_subset_iff, finset.mem_coe] at hfs,
    refine ‚ü®f, Œª i, hs _ (hfs i), Œª i j hij, h's _ (hfs i) _ (hfs j) (f_inj.ne hij)‚ü© },
  choose! F hF using this,
  have : ‚àÉ f : fin N ‚Üí E, (‚àÄ (i : fin N), ‚à•f i‚à• ‚â§ 2) ‚àß (‚àÄ i j, i ‚â† j ‚Üí 1 ‚â§ ‚à•f i - f j‚à•),
  { obtain ‚ü®u, u_mono, one_lt_u, hu‚ü© : ‚àÉ (u : ‚Ñï ‚Üí ‚Ñù), (‚àÄ (m n : ‚Ñï), m < n ‚Üí u n < u m)
      ‚àß (‚àÄ (n : ‚Ñï), 1 < u n) ‚àß filter.tendsto u filter.at_top (ùìù 1) :=
        exists_seq_strict_antimono_tendsto (1 : ‚Ñù),
    have A : ‚àÄ n, F (u n) ‚àà closed_ball (0 : fin N ‚Üí E) (2 * u 0),
    { assume n,
      have : 0 ‚â§ 2 * u 0 :=
        mul_nonneg zero_le_two (zero_le_one.trans (one_lt_u 0).le),
      simp only [pi_norm_le_iff this, mem_closed_ball, dist_zero_right],
      assume i,
      apply ((hF (u n) (one_lt_u n)).1 i).trans,
      refine (mul_le_mul_left zero_lt_two).2 _,
      cases n, { exact le_rfl }, { exact (u_mono 0 n.succ (nat.succ_pos _)).le } },
    obtain ‚ü®f, -, œÜ, œÜ_mono, hf‚ü© : ‚àÉ (f ‚àà closed_ball (0 : fin N ‚Üí E) (2 * u 0)) (œÜ : ‚Ñï ‚Üí ‚Ñï),
      strict_mono œÜ ‚àß tendsto ((F ‚àò u) ‚àò œÜ) at_top (ùìù f) :=
        is_compact.tendsto_subseq (proper_space.compact_ball _ _) A,
    refine ‚ü®f, Œª i, _, Œª i j hij, _‚ü©,
    { have A : tendsto (Œª n, ‚à•F (u (œÜ n)) i‚à•) at_top (ùìù (‚à•f i‚à•)) := (hf.apply i).norm,
      have B : tendsto (Œª n, 2 * u (œÜ n)) at_top (ùìù (2 * 1)) :=
        (hu.comp œÜ_mono.tendsto_at_top).const_mul _,
      rw mul_one at B,
      exact le_of_tendsto_of_tendsto' A B (Œª n, (hF (u (œÜ n)) (one_lt_u _)).1 i) },
    { have A : tendsto (Œª n, ‚à•F (u (œÜ n)) i - F (u (œÜ n)) j‚à•) at_top (ùìù (‚à•f i - f j‚à•)) :=
        ((hf.apply i).sub (hf.apply j)).norm,
      have B : tendsto (Œª n, (u (œÜ n))‚Åª¬π) at_top (ùìù (1‚Åª¬π)) :=
        (hu.comp œÜ_mono.tendsto_at_top).inv' one_ne_zero,
      rw inv_one at B,
      exact le_of_tendsto_of_tendsto' B A (Œª n, (hF (u (œÜ n)) (one_lt_u _)).2 i j hij) } },
  rcases this with ‚ü®f, hf, h'f‚ü©,
  have finj : function.injective f,
  { assume i j hij,
    by_contra,
    have : 1 ‚â§ ‚à•f i - f j‚à• := h'f i j h,
    simp only [hij, norm_zero, sub_self] at this,
    exact lt_irrefl _ (this.trans_lt zero_lt_one) },
  let s := finset.image f finset.univ,
  have s_card : s.card = N,
    by { rw finset.card_image_of_injective _ finj, exact finset.card_fin N },
  have hs : ‚àÄ c ‚àà s, ‚à•c‚à• ‚â§ 2,
    by simp only [hf, forall_apply_eq_imp_iff', forall_const, forall_exists_index, finset.mem_univ,
                  finset.mem_image],
  have h's : ‚àÄ (c ‚àà s) (d ‚àà s), c ‚â† d ‚Üí 1 ‚â§ ‚à•c - d‚à•,
  { simp only [s, forall_apply_eq_imp_iff', forall_exists_index, finset.mem_univ, finset.mem_image,
      ne.def, exists_true_left, forall_apply_eq_imp_iff', forall_true_left],
    assume i j hij,
    have : i ‚â† j := Œª h, by { rw h at hij, exact hij rfl },
    exact h'f i j this },
  have : s.card ‚â§ multiplicity E := card_le_multiplicity hs h's,
  rw [s_card, hN] at this,
  exact lt_irrefl _ ((nat.lt_succ_self (multiplicity E)).trans_le this),
end

def good_œÑ : ‚Ñù := classical.some (exists_good_œÑ E)

lemma one_lt_good_œÑ : 1 < good_œÑ E := (classical.some_spec (exists_good_œÑ E)).1

lemma card_le_multiplicity_œÑ {s : finset E} (hs : ‚àÄ c ‚àà s, ‚à•c‚à• ‚â§ 2 * good_œÑ E)
  (h's : ‚àÄ (c ‚àà s) (d ‚àà s), c ‚â† d ‚Üí (good_œÑ E)‚Åª¬π ‚â§ ‚à•c - d‚à•) :
  s.card ‚â§ multiplicity E :=
(classical.some_spec (exists_good_œÑ E)).2 s hs h's

#exit


lemma zoug {E : Type*} [normed_group E] [normed_space ‚Ñù E] {N : ‚Ñï} (c : ‚Ñï ‚Üí E) (r : ‚Ñï ‚Üí ‚Ñù)
  (Œ¥ : ‚Ñù) (œÑ : ‚Ñù)
  (hcN : c N = 0)
  (hrN : r N = 1)
  (hcr : ‚àÄ i < N, ‚à•c i‚à• ‚â§ r i + r 1)
  (hcr' : ‚àÄ i < N, r i ‚â§ ‚à•c i‚à•)
  (hc : ‚àÄ (i ‚â§ N) (j ‚â§ N),
    (r i ‚â§ ‚à•c j - c i‚à• ‚àß r j ‚â§ œÑ * r i) ‚à® (r j ‚â§ ‚à•c i - c j‚à• ‚àß r i ‚â§ œÑ * r j)) :
  ‚àÉ (c' : ‚Ñï ‚Üí E), (‚àÄ n ‚â§ N, ‚à•c' n‚à• ‚â§ 2) ‚àß (‚àÄ i ‚â§ N, ‚àÄ j ‚â§ N, i ‚â† j ‚Üí 1 - Œ¥ ‚â§ ‚à•c' i - c' j‚à•) :=
begin
  let c' : ‚Ñï ‚Üí E := Œª i, if ‚à•c i‚à• ‚â§ 2 then c i else (2 / ‚à•c i‚à•) ‚Ä¢ c i,
  have norm_c'_le : ‚àÄ i, ‚à•c' i‚à• ‚â§ 2,
  { assume i,
    simp only [c'],
    split_ifs, { exact h },
    by_cases hi : ‚à•c i‚à• = 0;
    field_simp [norm_smul, hi] },
  refine ‚ü®c', Œª n hn, norm_c'_le n, _‚ü©,
  assume i hi j hj hij,
  by_cases H : ‚à•c i‚à• ‚â§ 2 ‚àß ‚à•c j‚à• ‚â§ 2,
  { simp only [c'],
    simp [c', H.1, H.2],


  } ,
end



#exit


namespace besicovitch

structure package (Œ≤ : Type*) (Œ± : Type*) [metric_space Œ±] :=
(c : Œ≤ ‚Üí Œ±)
(r : Œ≤ ‚Üí ‚Ñù)
(r_pos : ‚àÄ b, 0 < r b)
(r_bound : ‚Ñù)
(r_le : ‚àÄ b, r b ‚â§ r_bound)
(œÑ : ‚Ñù)
(one_lt_tau : 1 < œÑ)
(N : ‚Ñï)
(no_satellite : ‚àÄ (c' : ‚Ñï ‚Üí Œ±) (r' : ‚Ñï ‚Üí ‚Ñù)
  (h_inter : ‚àÄ i < N, (closed_ball (c' i) (r' i) ‚à© closed_ball (c' N) (r' N)).nonempty)
  (h : ‚àÄ i ‚â§ N, ‚àÄ j ‚â§ N, i ‚â† j ‚Üí (r' i < dist (c' i) (c' j) ‚àß r' j ‚â§ œÑ * r' i) ‚à®
    (r' j < dist (c' j) (c' i) ‚àß r' i ‚â§ œÑ * r' j)),
  false)


variables {Œ± : Type*} [metric_space Œ±] {Œ≤ : Type u} [nonempty Œ≤]
(p : package Œ≤ Œ±)
include p

namespace package

/-- Define inductively centers of large balls that are not contained in the union of already
chosen balls. -/
noncomputable def f : ordinal.{u} ‚Üí Œ≤
| i :=
    -- `Z` is the set of points that are covered by already constructed balls
    let Z := ‚ãÉ (j : {j // j < i}), closed_ball (p.c (f j)) (p.r (f j)),
    -- `R` is the supremum of the radii of balls with centers not in `Z`
    R := supr (Œª b : {b : Œ≤ // p.c b ‚àâ Z}, p.r b) in
    -- return an index `b` for which the center `c b` is not in `Z`, and the radius is at
    -- least `R / œÑ`, if such an index exists (and garbage otherwise).
    classical.epsilon (Œª b : Œ≤, p.c b ‚àâ Z ‚àß R ‚â§ p.œÑ * p.r b)
using_well_founded {dec_tac := `[exact j.2]}

/-- The set of points that are covered by the union of balls selected at steps `< i`. -/
def Union_up_to (i : ordinal.{u}) : set Œ± :=
‚ãÉ (j : {j // j < i}), closed_ball (p.c (p.f j)) (p.r (p.f j))

lemma monotone_Union_up_to : monotone p.Union_up_to :=
begin
  assume i j hij,
  simp only [Union_up_to],
  apply Union_subset_Union2,
  assume r,
  exact ‚ü®‚ü®r, r.2.trans_le hij‚ü©, subset.refl _‚ü©,
end

/-- Supremum of the radii of balls whose centers are not yet covered at step `i`. -/
def R (i : ordinal.{u}) : ‚Ñù :=
supr (Œª b : {b : Œ≤ // p.c b ‚àâ p.Union_up_to i}, p.r b)

/-- Group the balls into disjoint families -/
noncomputable def index : ordinal.{u} ‚Üí ‚Ñï
| i := let A : set ‚Ñï := ‚ãÉ (j : {j // j < i})
          (hj : (closed_ball (p.c (p.f j)) (p.r (p.f j))
            ‚à© closed_ball (p.c (p.f i)) (p.r (p.f i))).nonempty), {index j} in
       Inf (univ \ A)
using_well_founded {dec_tac := `[exact j.2]}

/-- `p.last_step` is the first ordinal where the construction stops making sense. We will only
use ordinals before this step. -/
def last_step : ordinal.{u} :=
Inf {i | ¬¨ ‚àÉ (b : Œ≤), p.c b ‚àâ p.Union_up_to i ‚àß p.R i ‚â§ p.œÑ * p.r b}

lemma index_lt (i : ordinal.{u}) (hi : i < p.last_step) :
  p.index i < p.N :=
begin
  induction i using ordinal.induction with i IH,
  let A : set ‚Ñï := ‚ãÉ (j : {j // j < i})
         (hj : (closed_ball (p.c (p.f j)) (p.r (p.f j))
            ‚à© closed_ball (p.c (p.f i)) (p.r (p.f i))).nonempty), {p.index j},
  have index_i : p.index i = Inf (univ \ A), by rw [index],
  rw index_i,
  have N_mem : p.N ‚àà univ \ A,
  { simp only [not_exists, true_and, exists_prop, mem_Union, mem_singleton_iff, mem_closed_ball,
      not_and, mem_univ, mem_diff, subtype.exists, subtype.coe_mk],
    assume j ji hj,
    exact (IH j ji (ji.trans hi)).ne' },
  suffices : Inf (univ \ A) ‚â† p.N,
  { rcases (cInf_le (order_bot.bdd_below (univ \ A)) N_mem).lt_or_eq with H|H,
    { exact H },
    { exact (this H).elim } },
  assume Inf_eq_N,
  have : ‚àÄ k, k < p.N ‚Üí ‚àÉ j, j < i
    ‚àß (closed_ball (p.c (p.f j)) (p.r (p.f j)) ‚à© closed_ball (p.c (p.f i)) (p.r (p.f i))).nonempty
    ‚àß k = p.index j,
  { assume k hk,
    rw ‚Üê Inf_eq_N at hk,
    have : k ‚àà A,
      by simpa only [true_and, mem_univ, not_not, mem_diff] using nat.not_mem_of_lt_Inf hk,
    simp at this,
    simpa only [exists_prop, mem_Union, mem_singleton_iff, mem_closed_ball, subtype.exists,
      subtype.coe_mk] },
  choose! g hg using this,
  let G : ‚Ñï ‚Üí ordinal := Œª n, if n = p.N then i else g n,
  have index_G : ‚àÄ n, n ‚â§ p.N ‚Üí p.index (G n) = n,
  { assume n hn,
    rcases hn.eq_or_lt with rfl|H,
    { simp only [G], simp only [index_i, Inf_eq_N, if_true, eq_self_iff_true] },
    { simp only [G], simp only [H.ne, (hg n H).right.right.symm, if_false] } },
  have G_lt_last : ‚àÄ n, n ‚â§ p.N ‚Üí G n < p.last_step,
  { assume n hn,
    rcases hn.eq_or_lt with rfl|H,
    { simp only [G], simp only [hi, if_true, eq_self_iff_true], },
    { simp only [G], simp only [H.ne, (hg n H).left.trans hi, if_false] } },
  have fGn : ‚àÄ n, n ‚â§ p.N ‚Üí
    p.c (p.f (G n)) ‚àâ p.Union_up_to (G n) ‚àß p.R (G n) ‚â§ p.œÑ * p.r (p.f (G n)),
  { assume n hn,
    have: p.f (G n) = classical.epsilon
      (Œª t, p.c t ‚àâ p.Union_up_to (G n) ‚àß p.R (G n) ‚â§ p.œÑ * p.r t), by { rw f, refl },
    rw this,
    have : ‚àÉ t, p.c t ‚àâ p.Union_up_to (G n) ‚àß p.R (G n) ‚â§ p.œÑ * p.r t,
      by simpa only [not_exists, exists_prop, not_and, not_lt, not_le, mem_set_of_eq,
        not_forall] using not_mem_of_lt_cInf (G_lt_last n hn) (order_bot.bdd_below _),
    exact classical.epsilon_spec this },
  apply p.no_satellite (p.c ‚àò p.f ‚àò G) (p.r ‚àò p.f ‚àò G),
  { assume a ha,
    have A : G a = g a, by simp only [ha.ne, forall_false_left, ite_eq_right_iff],
    have B : G p.N = i,
      by simp only [forall_false_left, eq_self_iff_true, not_true, ite_eq_left_iff],
    simp only [A, B, function.comp_app],
    exact (hg a ha).2.1 },
  { assume a ha b hb a_ne_b,
    wlog G_le : G a ‚â§ G b := le_total (G a) (G b) using [a b, b a] tactic.skip,
    { have G_lt : G a < G b,
      { rcases G_le.lt_or_eq with H|H, { exact H },
        rw [‚Üê index_G a ha, ‚Üê index_G b hb, H] at a_ne_b,
        exact (a_ne_b rfl).elim },
      left,
      split,
      { have := (fGn b hb).1,
        simp only [Union_up_to, not_exists, exists_prop, mem_Union, mem_closed_ball, not_and,
          not_le, subtype.exists, subtype.coe_mk] at this,
        simpa only [dist_comm] using this (G a) G_lt },
      { apply le_trans _ (fGn a ha).2,
        have B : p.c (p.f (G b)) ‚àâ p.Union_up_to (G a),
        { assume H, exact (fGn b hb).1 (p.monotone_Union_up_to G_le H) },
        let b' : {t // p.c t ‚àâ p.Union_up_to (G a)} := ‚ü®p.f (G b), B‚ü©,
        apply @le_csupr _ _ _ (Œª t : {t // p.c t ‚àâ p.Union_up_to (G a)}, p.r t) _ b',
        refine ‚ü®p.r_bound, Œª t ht, _‚ü©,
        simp only [exists_prop, mem_range, subtype.exists, subtype.coe_mk] at ht,
        rcases ht with ‚ü®u, hu‚ü©,
        rw ‚Üê hu.2,
        exact p.r_le _ } },
    { assume ha hb a_ne_b,
      rw or_comm,
      exact this hb ha a_ne_b.symm } },
end

end package

end besicovitch
