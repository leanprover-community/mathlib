/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import topology.instances.irrational
import topology.alexandroff

/-!
# Topology on rational numbers

The structure of a metric space on `‚Ñö` is introduced in this file, induced from `‚Ñù`. We then
prove some properties of this topological space and its one-point compactification.

## Main statements

- `rat.totally_disconnected_space`: `‚Ñö` is a totally disconnected space;

- `rat.not_countably_generated_nhds_infty_alexandroff`: the filter of neighbourhoods of infinity in
  `alexandroff ‚Ñö` is not countably generated.

## Notation

- `‚Ñö‚àû` is used as a local notation for `alexandroff ‚Ñö`
-/

open set metric filter topological_space
open_locale topological_space alexandroff
local notation `‚Ñö‚àû` := alexandroff ‚Ñö

namespace rat

instance : metric_space ‚Ñö :=
metric_space.induced coe rat.cast_injective real.metric_space

theorem dist_eq (x y : ‚Ñö) : dist x y = |x - y| := rfl

@[norm_cast, simp] lemma dist_cast (x y : ‚Ñö) : dist (x : ‚Ñù) y = dist x y := rfl

theorem uniform_continuous_coe_real : uniform_continuous (coe : ‚Ñö ‚Üí ‚Ñù) :=
uniform_continuous_comap

theorem uniform_embedding_coe_real : uniform_embedding (coe : ‚Ñö ‚Üí ‚Ñù) :=
uniform_embedding_comap rat.cast_injective

theorem dense_embedding_coe_real : dense_embedding (coe : ‚Ñö ‚Üí ‚Ñù) :=
uniform_embedding_coe_real.dense_embedding $
Œª x, mem_closure_iff_nhds.2 $ Œª t ht,
let ‚ü®Œµ,Œµ0, hŒµ‚ü© := metric.mem_nhds_iff.1 ht in
let ‚ü®q, h‚ü© := exists_rat_near x Œµ0 in
‚ü®_, hŒµ (mem_ball'.2 h), q, rfl‚ü©

theorem embedding_coe_real : embedding (coe : ‚Ñö ‚Üí ‚Ñù) := dense_embedding_coe_real.to_embedding

theorem continuous_coe_real : continuous (coe : ‚Ñö ‚Üí ‚Ñù) := uniform_continuous_coe_real.continuous

end rat

@[norm_cast, simp] theorem nat.dist_cast_rat (x y : ‚Ñï) : dist (x : ‚Ñö) y = dist x y :=
by rw [‚Üê nat.dist_cast_real, ‚Üê rat.dist_cast]; congr' 1; norm_cast

lemma nat.uniform_embedding_coe_rat : uniform_embedding (coe : ‚Ñï ‚Üí ‚Ñö) :=
uniform_embedding_bot_of_pairwise_le_dist zero_lt_one $ by simpa using nat.pairwise_one_le_dist

lemma nat.closed_embedding_coe_rat : closed_embedding (coe : ‚Ñï ‚Üí ‚Ñö) :=
closed_embedding_of_pairwise_le_dist zero_lt_one $ by simpa using nat.pairwise_one_le_dist


@[norm_cast, simp] theorem int.dist_cast_rat (x y : ‚Ñ§) : dist (x : ‚Ñö) y = dist x y :=
by rw [‚Üê int.dist_cast_real, ‚Üê rat.dist_cast]; congr' 1; norm_cast

lemma int.uniform_embedding_coe_rat : uniform_embedding (coe : ‚Ñ§ ‚Üí ‚Ñö) :=
uniform_embedding_bot_of_pairwise_le_dist zero_lt_one $ by simpa using int.pairwise_one_le_dist

lemma int.closed_embedding_coe_rat : closed_embedding (coe : ‚Ñ§ ‚Üí ‚Ñö) :=
closed_embedding_of_pairwise_le_dist zero_lt_one $ by simpa using int.pairwise_one_le_dist

instance : noncompact_space ‚Ñö := int.closed_embedding_coe_rat.noncompact_space


-- TODO(Mario): Find a way to use rat_add_continuous_lemma
theorem rat.uniform_continuous_add : uniform_continuous (Œªp : ‚Ñö √ó ‚Ñö, p.1 + p.2) :=
rat.uniform_embedding_coe_real.to_uniform_inducing.uniform_continuous_iff.2 $
  by simp only [(‚àò), rat.cast_add]; exact real.uniform_continuous_add.comp
    (rat.uniform_continuous_coe_real.prod_map rat.uniform_continuous_coe_real)

theorem rat.uniform_continuous_neg : uniform_continuous (@has_neg.neg ‚Ñö _) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0, ‚ü®_, Œµ0, Œª a b h,
  by rw dist_comm at h; simpa [rat.dist_eq] using h‚ü©

instance : uniform_add_group ‚Ñö :=
uniform_add_group.mk' rat.uniform_continuous_add rat.uniform_continuous_neg

instance : topological_add_group ‚Ñö := by apply_instance

instance : order_topology ‚Ñö :=
induced_order_topology _ (Œª x y, rat.cast_lt) (@exists_rat_btwn _ _ _)

lemma rat.uniform_continuous_abs : uniform_continuous (abs : ‚Ñö ‚Üí ‚Ñö) :=
metric.uniform_continuous_iff.2 $ Œª Œµ Œµ0,
  ‚ü®Œµ, Œµ0, Œª a b h, lt_of_le_of_lt
    (by simpa [rat.dist_eq] using abs_abs_sub_abs_le_abs_sub _ _) h‚ü©

lemma rat.continuous_mul : continuous (Œªp : ‚Ñö √ó ‚Ñö, p.1 * p.2) :=
rat.embedding_coe_real.continuous_iff.2 $ by simp [(‚àò)]; exact
real.continuous_mul.comp ((rat.continuous_coe_real.prod_map rat.continuous_coe_real))

instance : topological_ring ‚Ñö :=
{ continuous_mul := rat.continuous_mul, ..rat.topological_add_group }

lemma rat.totally_bounded_Icc (a b : ‚Ñö) : totally_bounded (Icc a b) :=
begin
  have := totally_bounded_preimage rat.uniform_embedding_coe_real (totally_bounded_Icc a b),
  rwa (set.ext (Œª q, _) : Icc _ _ = _), simp
end

namespace rat

variables {p q : ‚Ñö} {s t : set ‚Ñö}

lemma interior_compact_eq_empty (hs : is_compact s) :
  interior s = ‚àÖ :=
dense_embedding_coe_real.to_dense_inducing.interior_compact_eq_empty dense_irrational hs

lemma dense_compl_compact (hs : is_compact s) : dense s·∂ú :=
interior_eq_empty_iff_dense_compl.1 (interior_compact_eq_empty hs)

instance cocompact_inf_nhds_ne_bot : ne_bot (cocompact ‚Ñö ‚äì ùìù p) :=
begin
  refine (has_basis_cocompact.inf (nhds_basis_opens _)).ne_bot_iff.2 _,
  rintro ‚ü®s, o‚ü© ‚ü®hs, hpo, ho‚ü©, rw inter_comm,
  exact (dense_compl_compact hs).inter_open_nonempty _ ho ‚ü®p, hpo‚ü©
end

lemma not_countably_generated_cocompact : ¬¨is_countably_generated (cocompact ‚Ñö) :=
begin
  introI H,
  rcases exists_seq_tendsto (cocompact ‚Ñö ‚äì ùìù 0) with ‚ü®x, hx‚ü©,
  rw tendsto_inf at hx, rcases hx with ‚ü®hxc, hx0‚ü©,
  obtain ‚ü®n, hn‚ü© : ‚àÉ n : ‚Ñï, x n ‚àâ insert (0 : ‚Ñö) (range x),
    from (hxc.eventually hx0.is_compact_insert_range.compl_mem_cocompact).exists,
  exact hn (or.inr ‚ü®n, rfl‚ü©)
end

lemma not_countably_generated_nhds_infty_alexandroff :
  ¬¨is_countably_generated (ùìù (‚àû : ‚Ñö‚àû)) :=
begin
  introI,
  have : is_countably_generated (comap (coe : ‚Ñö ‚Üí ‚Ñö‚àû) (ùìù ‚àû)), by apply_instance,
  rw [alexandroff.comap_coe_nhds_infty, coclosed_compact_eq_cocompact] at this,
  exact not_countably_generated_cocompact this
end

lemma not_first_countable_topology_alexandroff :
  ¬¨first_countable_topology ‚Ñö‚àû :=
by { introI, exact not_countably_generated_nhds_infty_alexandroff infer_instance }

lemma not_second_countable_topology_alexandroff :
  ¬¨second_countable_topology ‚Ñö‚àû :=
by { introI, exact not_first_countable_topology_alexandroff infer_instance }

instance : totally_disconnected_space ‚Ñö :=
begin
  refine ‚ü®Œª s hsu hs x hx y hy, _‚ü©, clear hsu,
  by_contra' H : x ‚â† y,
  wlog hlt : x < y := H.lt_or_lt using [x y, y x],
  rcases exists_irrational_btwn (rat.cast_lt.2 hlt) with ‚ü®z, hz, hxz, hzy‚ü©,
  have := hs.image coe continuous_coe_real.continuous_on,
  rw [is_preconnected_iff_ord_connected] at this,
  have : z ‚àà coe '' s := this.out (mem_image_of_mem _ hx) (mem_image_of_mem _ hy) ‚ü®hxz.le, hzy.le‚ü©,
  exact hz (image_subset_range _ _ this)
end

end rat
