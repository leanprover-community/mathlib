/-
Copyright ¬© 2022 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth, Floris van Doorn
-/

import topology.vector_bundle.basic

/-!
# Direct sum of two vector bundles

If `E‚ÇÅ : B ‚Üí Type*` and `E‚ÇÇ : B ‚Üí Type*` define two topological vector bundles over `R` with fiber
models `F‚ÇÅ` and `F‚ÇÇ`, we define the bundle of direct sums `E‚ÇÅ √ó·µá E‚ÇÇ := Œª x, E‚ÇÅ x √ó E‚ÇÇ x`.
We can endow `E‚ÇÅ √ó·µá E‚ÇÇ` with a topological vector bundle structure:
`bundle.prod.topological_vector_bundle`.

A similar construction (which is yet to be formalized) can be done for the vector bundle of
continuous linear maps from `E‚ÇÅ x` to `E‚ÇÇ x` with fiber a type synonym
`vector_bundle_continuous_linear_map R F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ x := (E‚ÇÅ x ‚ÜíL[R] E‚ÇÇ x)` (and with the
topology inherited from the norm-topology on `F‚ÇÅ ‚ÜíL[R] F‚ÇÇ`, without the need to define the strong
topology on continuous linear maps between general topological vector spaces).  Likewise for tensor
products of topological vector bundles, exterior algebras, and so on, where the topology can be
defined using a norm on the fiber model if this helps.

## Tags
Vector bundle
-/

noncomputable theory

open bundle set
open_locale classical

variables (R ùïú : Type*) {B : Type*} (F : Type*) (E : B ‚Üí Type*)

namespace topological_vector_bundle

section defs
variables (E‚ÇÅ : B ‚Üí Type*) (E‚ÇÇ : B ‚Üí Type*)
variables [topological_space (total_space E‚ÇÅ)] [topological_space (total_space E‚ÇÇ)]

/-- Equip the total space of the fibrewise product of two topological vector bundles `E‚ÇÅ`, `E‚ÇÇ` with
the induced topology from the diagonal embedding into `total_space E‚ÇÅ √ó total_space E‚ÇÇ`. -/
instance prod.topological_space :
  topological_space (total_space (E‚ÇÅ √ó·µá E‚ÇÇ)) :=
topological_space.induced
  (Œª p, ((‚ü®p.1, p.2.1‚ü© : total_space E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : total_space E‚ÇÇ)))
  (by apply_instance : topological_space (total_space E‚ÇÅ √ó total_space E‚ÇÇ))

/-- The diagonal map from the total space of the fibrewise product of two topological vector bundles
`E‚ÇÅ`, `E‚ÇÇ` into `total_space E‚ÇÅ √ó total_space E‚ÇÇ` is `inducing`. -/
lemma prod.inducing_diag : inducing
  (Œª p, (‚ü®p.1, p.2.1‚ü©, ‚ü®p.1, p.2.2‚ü©) :
    total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí total_space E‚ÇÅ √ó total_space E‚ÇÇ) :=
‚ü®rfl‚ü©

end defs

variables [nontrivially_normed_field R] [topological_space B]

variables (F‚ÇÅ : Type*) [normed_add_comm_group F‚ÇÅ] [normed_space R F‚ÇÅ]
  (E‚ÇÅ : B ‚Üí Type*) [topological_space (total_space E‚ÇÅ)]
  [Œ† x, add_comm_monoid (E‚ÇÅ x)] [Œ† x, module R (E‚ÇÅ x)]

variables (F‚ÇÇ : Type*) [normed_add_comm_group F‚ÇÇ] [normed_space R F‚ÇÇ]
  (E‚ÇÇ : B ‚Üí Type*) [topological_space (total_space E‚ÇÇ)]
  [Œ† x, add_comm_monoid (E‚ÇÇ x)] [Œ† x, module R (E‚ÇÇ x)]

namespace trivialization
variables (e‚ÇÅ : trivialization R F‚ÇÅ E‚ÇÅ) (e‚ÇÇ : trivialization R F‚ÇÇ E‚ÇÇ)
include e‚ÇÅ e‚ÇÇ
variables {R F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ}

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the forward
function for the construction `topological_vector_bundle.trivialization.prod`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`. -/
def prod.to_fun' : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí B √ó (F‚ÇÅ √ó F‚ÇÇ) :=
Œª p, ‚ü®p.1, (e‚ÇÅ ‚ü®p.1, p.2.1‚ü©).2, (e‚ÇÇ ‚ü®p.1, p.2.2‚ü©).2‚ü©

variables {e‚ÇÅ e‚ÇÇ}

lemma prod.continuous_to_fun : continuous_on (prod.to_fun' e‚ÇÅ e‚ÇÇ)
  (@total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set)) :=
begin
  let f‚ÇÅ : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí total_space E‚ÇÅ √ó total_space E‚ÇÇ :=
    Œª p, ((‚ü®p.1, p.2.1‚ü© : total_space E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : total_space E‚ÇÇ)),
  let f‚ÇÇ : total_space E‚ÇÅ √ó total_space E‚ÇÇ ‚Üí (B √ó F‚ÇÅ) √ó (B √ó F‚ÇÇ) := Œª p, ‚ü®e‚ÇÅ p.1, e‚ÇÇ p.2‚ü©,
  let f‚ÇÉ : (B √ó F‚ÇÅ) √ó (B √ó F‚ÇÇ) ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ := Œª p, ‚ü®p.1.1, p.1.2, p.2.2‚ü©,
  have hf‚ÇÅ : continuous f‚ÇÅ := (prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous,
  have hf‚ÇÇ : continuous_on f‚ÇÇ (e‚ÇÅ.source √óÀ¢ e‚ÇÇ.source) :=
    e‚ÇÅ.to_local_homeomorph.continuous_on.prod_map e‚ÇÇ.to_local_homeomorph.continuous_on,
  have hf‚ÇÉ : continuous f‚ÇÉ :=
    (continuous_fst.comp continuous_fst).prod_mk (continuous_snd.prod_map continuous_snd),
  refine ((hf‚ÇÉ.comp_continuous_on hf‚ÇÇ).comp hf‚ÇÅ.continuous_on _).congr _,
  { rw [e‚ÇÅ.source_eq, e‚ÇÇ.source_eq],
    exact maps_to_preimage _ _ },
  rintros ‚ü®b, v‚ÇÅ, v‚ÇÇ‚ü© ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©,
  simp only [prod.to_fun', prod.mk.inj_iff, eq_self_iff_true, and_true],
  rw e‚ÇÅ.coe_fst,
  rw [e‚ÇÅ.source_eq, mem_preimage],
  exact hb‚ÇÅ,
end

variables (e‚ÇÅ e‚ÇÇ)

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the inverse
function for the construction `topological_vector_bundle.trivialization.prod`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`. -/
def prod.inv_fun' (p : B √ó (F‚ÇÅ √ó F‚ÇÇ)) : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) :=
‚ü®p.1, e‚ÇÅ.symm p.1 p.2.1, e‚ÇÇ.symm p.1 p.2.2‚ü©

variables {e‚ÇÅ e‚ÇÇ}

lemma prod.inv_fun'_apply {x : B} (hx‚ÇÅ : x ‚àà e‚ÇÅ.base_set) (hx‚ÇÇ : x ‚àà e‚ÇÇ.base_set)
  (w‚ÇÅ : F‚ÇÅ) (w‚ÇÇ : F‚ÇÇ) :
  prod.inv_fun' e‚ÇÅ e‚ÇÇ ‚ü®x, w‚ÇÅ, w‚ÇÇ‚ü©
  = ‚ü®x, ((e‚ÇÅ.continuous_linear_equiv_at x hx‚ÇÅ).symm w‚ÇÅ,
    (e‚ÇÇ.continuous_linear_equiv_at x hx‚ÇÇ).symm w‚ÇÇ)‚ü© :=
begin
  dsimp [prod.inv_fun'],
  rw [dif_pos, dif_pos],
end

lemma prod.left_inv {x : total_space (E‚ÇÅ √ó·µá E‚ÇÇ)}
  (h : x ‚àà @total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set)) :
  prod.inv_fun' e‚ÇÅ e‚ÇÇ (prod.to_fun' e‚ÇÅ e‚ÇÇ x) = x :=
begin
  obtain ‚ü®x, v‚ÇÅ, v‚ÇÇ‚ü© := x,
  obtain ‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü© := h,
  simp only [prod.to_fun', prod.inv_fun', symm_apply_apply_mk, h‚ÇÅ, h‚ÇÇ]
end

lemma prod.right_inv {x : B √ó F‚ÇÅ √ó F‚ÇÇ}
  (h : x ‚àà (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ (univ : set (F‚ÇÅ √ó F‚ÇÇ))) :
  prod.to_fun' e‚ÇÅ e‚ÇÇ (prod.inv_fun' e‚ÇÅ e‚ÇÇ x) = x :=
begin
  obtain ‚ü®x, w‚ÇÅ, w‚ÇÇ‚ü© := x,
  obtain ‚ü®‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü©, -‚ü© := h,
  simp only [prod.to_fun', prod.inv_fun', apply_mk_symm, h‚ÇÅ, h‚ÇÇ]
end

lemma prod.continuous_inv_fun :
  continuous_on (prod.inv_fun' e‚ÇÅ e‚ÇÇ) ((e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ univ) :=
begin
  rw (prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous_on_iff,
  have H‚ÇÅ : continuous (Œª p : B √ó F‚ÇÅ √ó F‚ÇÇ, ((p.1, p.2.1), (p.1, p.2.2))) :=
    (continuous_id.prod_map continuous_fst).prod_mk (continuous_id.prod_map continuous_snd),
  refine (e‚ÇÅ.continuous_on_symm.prod_map e‚ÇÇ.continuous_on_symm).comp H‚ÇÅ.continuous_on _,
  exact Œª x h, ‚ü®‚ü®h.1.1, mem_univ _‚ü©, ‚ü®h.1.2, mem_univ _‚ü©‚ü©
end

variables (e‚ÇÅ e‚ÇÇ)
variables [Œ† x : B, topological_space (E‚ÇÅ x)] [Œ† x : B, topological_space (E‚ÇÇ x)]
  [topological_vector_bundle R F‚ÇÅ E‚ÇÅ] [topological_vector_bundle R F‚ÇÇ E‚ÇÇ]

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for vector bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the induced
trivialization for the direct sum of `E‚ÇÅ` and `E‚ÇÇ`, whose base set is `e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set`.
-/
@[nolint unused_arguments]
def prod : trivialization R (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) :=
{ to_fun := prod.to_fun' e‚ÇÅ e‚ÇÇ,
  inv_fun := prod.inv_fun' e‚ÇÅ e‚ÇÇ,
  source := (@total_space.proj B (E‚ÇÅ √ó·µá E‚ÇÇ)) ‚Åª¬π' (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set),
  target := (e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set) √óÀ¢ set.univ,
  map_source' := Œª x h, ‚ü®h, set.mem_univ _‚ü©,
  map_target' := Œª x h, h.1,
  left_inv' := Œª x, prod.left_inv,
  right_inv' := Œª x, prod.right_inv,
  open_source := begin
    refine (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).preimage _,
    have : continuous (@total_space.proj B E‚ÇÅ) := continuous_proj R B F‚ÇÅ,
    exact this.comp (prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous.fst,
  end,
  open_target := (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).prod is_open_univ,
  continuous_to_fun := prod.continuous_to_fun,
  continuous_inv_fun := prod.continuous_inv_fun,
  base_set := e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set,
  open_base_set := e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set,
  source_eq := rfl,
  target_eq := rfl,
  proj_to_fun := Œª x h, rfl,
  linear' := Œª x ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, (((e‚ÇÅ.linear h‚ÇÅ).mk' _).prod_map ((e‚ÇÇ.linear h‚ÇÇ).mk' _)).is_linear }

@[simp] lemma base_set_prod : (prod e‚ÇÅ e‚ÇÇ).base_set = e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set :=
rfl

variables {e‚ÇÅ e‚ÇÇ}

lemma prod_apply {x : B} (hx‚ÇÅ : x ‚àà e‚ÇÅ.base_set) (hx‚ÇÇ : x ‚àà e‚ÇÇ.base_set) (v‚ÇÅ : E‚ÇÅ x)
  (v‚ÇÇ : E‚ÇÇ x) :
  prod e‚ÇÅ e‚ÇÇ ‚ü®x, (v‚ÇÅ, v‚ÇÇ)‚ü©
  = ‚ü®x, e‚ÇÅ.continuous_linear_equiv_at x hx‚ÇÅ v‚ÇÅ, e‚ÇÇ.continuous_linear_equiv_at x hx‚ÇÇ v‚ÇÇ‚ü© :=
rfl

lemma prod_symm_apply (x : B) (w‚ÇÅ : F‚ÇÅ) (w‚ÇÇ : F‚ÇÇ) : (prod e‚ÇÅ e‚ÇÇ).to_local_equiv.symm (x, w‚ÇÅ, w‚ÇÇ)
  = ‚ü®x, e‚ÇÅ.symm x w‚ÇÅ, e‚ÇÇ.symm x w‚ÇÇ‚ü© :=
rfl

end trivialization

open trivialization

variables [Œ† x : B, topological_space (E‚ÇÅ x)] [Œ† x : B, topological_space (E‚ÇÇ x)]
  [topological_vector_bundle R F‚ÇÅ E‚ÇÅ] [topological_vector_bundle R F‚ÇÇ E‚ÇÇ]

/-- The product of two vector bundles is a vector bundle. -/
instance _root_.bundle.prod.topological_vector_bundle :
  topological_vector_bundle R (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ) :=
{ total_space_mk_inducing := Œª b,
  begin
    rw (prod.inducing_diag E‚ÇÅ E‚ÇÇ).inducing_iff,
    exact (total_space_mk_inducing R F‚ÇÅ E‚ÇÅ b).prod_mk (total_space_mk_inducing R F‚ÇÇ E‚ÇÇ b),
  end,
  trivialization_atlas := (Œª (p : trivialization R F‚ÇÅ E‚ÇÅ √ó trivialization R F‚ÇÇ E‚ÇÇ), p.1.prod p.2) ''
    (trivialization_atlas R F‚ÇÅ E‚ÇÅ √óÀ¢ trivialization_atlas R F‚ÇÇ E‚ÇÇ),
  trivialization_at := Œª b, (trivialization_at R F‚ÇÅ E‚ÇÅ b).prod (trivialization_at R F‚ÇÇ E‚ÇÇ b),
  mem_base_set_trivialization_at :=
    Œª b, ‚ü®mem_base_set_trivialization_at R F‚ÇÅ E‚ÇÅ b, mem_base_set_trivialization_at R F‚ÇÇ E‚ÇÇ b‚ü©,
  trivialization_mem_atlas := Œª b,
    ‚ü®(_, _), ‚ü®trivialization_mem_atlas R F‚ÇÅ E‚ÇÅ b, trivialization_mem_atlas R F‚ÇÇ E‚ÇÇ b‚ü©, rfl‚ü©,
  continuous_on_coord_change := begin
    rintros _ ‚ü®‚ü®e‚ÇÅ, e‚ÇÇ‚ü©, ‚ü®he‚ÇÅ, he‚ÇÇ‚ü©, rfl‚ü© _ ‚ü®‚ü®e‚ÇÅ', e‚ÇÇ'‚ü©, ‚ü®he‚ÇÅ', he‚ÇÇ'‚ü©, rfl‚ü©,
    have := continuous_on_coord_change e‚ÇÅ he‚ÇÅ e‚ÇÅ' he‚ÇÅ',
    have := continuous_on_coord_change e‚ÇÇ he‚ÇÇ e‚ÇÇ' he‚ÇÇ',
    refine (((continuous_on_coord_change e‚ÇÅ he‚ÇÅ e‚ÇÅ' he‚ÇÅ').mono _).prod_mapL R
      ((continuous_on_coord_change e‚ÇÇ he‚ÇÇ e‚ÇÇ' he‚ÇÇ').mono _)).congr _;
    dsimp only [base_set_prod] with mfld_simps,
    { mfld_set_tac },
    { mfld_set_tac },
    { rintro b hb,
      rw [continuous_linear_map.ext_iff],
      rintro ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©,
      show (e‚ÇÅ.prod e‚ÇÇ).coord_change (e‚ÇÅ'.prod e‚ÇÇ') b (v‚ÇÅ, v‚ÇÇ) =
        (e‚ÇÅ.coord_change e‚ÇÅ' b v‚ÇÅ, e‚ÇÇ.coord_change e‚ÇÇ' b v‚ÇÇ),
      rw [e‚ÇÅ.coord_change_apply e‚ÇÅ', e‚ÇÇ.coord_change_apply e‚ÇÇ', (e‚ÇÅ.prod e‚ÇÇ).coord_change_apply'],
      exacts [rfl, hb, ‚ü®hb.1.2, hb.2.2‚ü©, ‚ü®hb.1.1, hb.2.1‚ü©] }
  end }

variables {R F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ}

@[simp] lemma trivialization.continuous_linear_equiv_at_prod {e‚ÇÅ : trivialization R F‚ÇÅ E‚ÇÅ}
  {e‚ÇÇ : trivialization R F‚ÇÇ E‚ÇÇ} {x : B} (hx‚ÇÅ : x ‚àà e‚ÇÅ.base_set) (hx‚ÇÇ : x ‚àà e‚ÇÇ.base_set) :
  (e‚ÇÅ.prod e‚ÇÇ).continuous_linear_equiv_at x ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©
  = (e‚ÇÅ.continuous_linear_equiv_at x hx‚ÇÅ).prod (e‚ÇÇ.continuous_linear_equiv_at x hx‚ÇÇ) :=
begin
  ext1,
  funext v,
  obtain ‚ü®v‚ÇÅ, v‚ÇÇ‚ü© := v,
  rw [(e‚ÇÅ.prod e‚ÇÇ).continuous_linear_equiv_at_apply, trivialization.prod],
  exact (congr_arg prod.snd (prod_apply hx‚ÇÅ hx‚ÇÇ v‚ÇÅ v‚ÇÇ) : _)
end

end topological_vector_bundle

section sections

/-! ### Sections of topological vector bundles

## Sections

In this file we also prove that sections of vector bundles inherit the algebraic structures of the
fibers. The proofs of this are the standard mathematical proofs: continuity is read through
trivializations on the fibers, where checking the continuity of algebraic operations is
straightforward.

-/

open topological_vector_bundle

variables {R B E F} [nondiscrete_normed_field R] [topological_space (total_space E)]
  [‚àÄ x, topological_space (E x)] [Œ† (x : B), add_comm_monoid (E x)]
  [Œ† (x : B), module R (E x)] [normed_group F] [normed_space R F]
  [topological_space B] [topological_vector_bundle R F E]

lemma right_inv.image_mem_trivialization_at_source (f : right_inv (proj E)) (b : B) :
  f b ‚àà (trivialization_at R F E b).source :=
f.mem_base_set_image_mem_source (mem_base_set_trivialization_at R F E b)

variables (R F E)

lemma bundle_section.continuous_at_iff_continuous_within_at_triv_at (f : bundle_section E) (b : B) :
  continuous_at f b ‚Üî continuous_within_at (Œª x, ((trivialization_at R F E b) (f x)).snd)
  (trivialization_at R F E b).base_set b :=
(f : right_inv (proj E)).continuous_at_iff_continuous_within_at (trivialization_at R F E b)
  (mem_base_set_trivialization_at R F E b)

lemma bundle_section.continuous_within_at_iff_continuous_within_at_triv_at
  (f : bundle_section E) (U : set B) (b : B) :
  continuous_within_at f U b ‚Üî continuous_within_at (Œª x, ((trivialization_at R F E b) (f x)).snd)
  (U ‚à© (trivialization_at R F E b).base_set) b :=
(f : right_inv (proj E)).continuous_within_at_iff_continuous_within_at (trivialization_at R F E b)
  (mem_base_set_trivialization_at R F E b)

variables {E}

section

include R F

lemma continuous_within_at.add_section [has_continuous_add F] {g h : bundle_section E} {U : set B}
  {b : B} (hg : continuous_within_at g U b) (hh : continuous_within_at h U b) :
  continuous_within_at ‚áë(g + h) U b :=
((g + h).continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mpr
  ((continuous_add.continuous_at.comp_continuous_within_at
  (((g.continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mp hg).prod
  ((h.continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mp hh))).congr
  (Œª y hy, trivialization.snd_map_add hy.2)
  (trivialization.snd_map_add (mem_base_set_trivialization_at R F E b)))

lemma continuous_at.add_section [has_continuous_add F] {g h : bundle_section E} {b : B}
  (hg : continuous_at g b) (hh : continuous_at h b) :
  continuous_at (‚Üë(g + h) : B ‚Üí total_space E) b :=
by { rw ‚Üêcontinuous_within_at_univ at hg hh ‚ä¢, exact hg.add_section R F hh }

lemma continuous_on.add_section [has_continuous_add F] {g h : bundle_section E} {U : set B}
  (hg : continuous_on g U) (hh : continuous_on h U) :
  continuous_on (‚Üë(g + h) : B ‚Üí total_space E) U :=
Œª b hb, (hg.continuous_within_at hb).add_section R F (hh.continuous_within_at hb)

lemma continuous.add_section [has_continuous_add F] {g h : bundle_section E} (hg : continuous g)
  (hh : continuous h) : continuous ‚áë(g + h) :=
continuous_iff_continuous_at.mpr (Œª b, hg.continuous_at.add_section R F hh.continuous_at)

lemma continuous_within_at.zero_section (U : set B) (b : B) :
  continuous_within_at ‚áë(0 : bundle_section E) U b :=
((0 : bundle_section E).continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mpr
  (continuous_within_at_const.congr (Œª y hy, trivialization.snd_map_zero hy.2)
  (trivialization.snd_map_zero (mem_base_set_trivialization_at R F E b)))

lemma continuous_at.zero_section (b : B) : continuous_at ‚áë(0 : bundle_section E) b :=
(continuous_within_at_univ _ b).mp (continuous_within_at.zero_section R F univ b)

lemma continuous_on.zero_section (U : set B) : continuous_on ‚áë(0 : bundle_section E) U :=
Œª b hb, continuous_within_at.zero_section R F U b

lemma continuous.zero_section : continuous ‚áë(0 : bundle_section E) :=
continuous_iff_continuous_at.mpr (Œª b, continuous_at.zero_section R F b)

variables {R} [topological_space R] [has_continuous_smul R F]

lemma continuous_within_at.smul_section {g : bundle_section E} {U : set B} {b : B}
  (hg : continuous_within_at g U b) (r : R) :
  continuous_within_at ‚áë(r ‚Ä¢ g : bundle_section E) U b :=
((r ‚Ä¢ g).continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mpr
  ((((g.continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mp hg).const_smul r).congr
  (Œª y hy, trivialization.snd_map_smul hy.2) (trivialization.snd_map_smul
  (mem_base_set_trivialization_at R F E b)))

lemma continuous_at.smul_section {g : bundle_section E} {b : B}
  (hg : continuous_at g b) (r : R) : continuous_at ‚áë(r ‚Ä¢ g : bundle_section E) b :=
by { rw ‚Üêcontinuous_within_at_univ at hg ‚ä¢, exact hg.smul_section F r }

lemma continuous_on.smul_section {g : bundle_section E} {U : set B}
  (hg : continuous_on g U) (r : R) : continuous_on ‚áë(r ‚Ä¢ g : bundle_section E) U :=
Œª b hb, (hg.continuous_within_at hb).smul_section F r

lemma continuous.smul_section {g : bundle_section E} (hg : continuous g) (r : R) :
  continuous ‚áë(r ‚Ä¢ g : bundle_section E) :=
continuous_iff_continuous_at.mpr (Œª b, hg.continuous_at.smul_section F r)

end

end sections

section group

open topological_vector_bundle

variables {E R F}
variables [nondiscrete_normed_field R] [‚àÄ x, add_comm_group (E x)] [‚àÄ x, module R (E x)]
  [normed_group F] [normed_space R F] [topological_space B]
  [topological_space (total_space E)] [‚àÄ x, topological_space (E x)]
  [topological_vector_bundle R F E]

namespace trivialization

lemma map_neg {g : bundle_section E}
  {e : trivialization R F E} {b : B} (hb : b ‚àà e.base_set) :
  (e ((- (g : bundle_section E)) b)).snd = - (e ((g : right_inv (proj E)) b)).snd :=
begin

  rw [(trivialization.continuous_linear_equiv_apply hb).symm, pi.neg_apply,
    continuous_linear_equiv.map_neg],
  refl,
end

lemma snd_map_sub {g h : bundle_section E} {e : trivialization R F E} {b : B}
  (hb : b ‚àà e.base_set) : (e ((g - h) b)).snd = (e (g b)).snd - (e (h b)).snd :=
begin
  rw [(trivialization.continuous_linear_equiv_apply hb).symm, pi.sub_apply,
    continuous_linear_equiv.map_sub],
  refl,
end

end trivialization

include R F

section neg

variables (R F) [has_continuous_neg F]

lemma continuous_within_at.neg_section {g : bundle_section E} {U : set B} {b : B}
  (hg : continuous_within_at g U b) : continuous_within_at ‚áë(- g) U b :=
((- g).continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mpr
  ((((g.continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mp hg).neg).congr (Œª y hy,
  trivialization.map_neg hy.2) (trivialization.map_neg (mem_base_set_trivialization_at R F E b)))

lemma continuous_at.neg_section {g : bundle_section E} {b : B}
  (hg : continuous_at g b) : continuous_at ‚áë(- g) b :=
by { rw ‚Üêcontinuous_within_at_univ at hg ‚ä¢, exact hg.neg_section R F }

lemma continuous_on.neg_section {g : bundle_section E} {U : set B}
  (hg : continuous_on g U) : continuous_on ‚áë(- g) U :=
Œª b hb, (hg.continuous_within_at hb).neg_section R F

lemma continuous.neg_section {g : bundle_section E}
  (hg : continuous g) : continuous ‚áë(- g) :=
continuous_iff_continuous_at.mpr (Œª b, hg.continuous_at.neg_section R F)

end neg

section sub

variables (R F) [has_continuous_sub F]

lemma continuous_within_at.sub_section {g h : bundle_section E} {U : set B} {b : B}
  (hg : continuous_within_at g U b) (hh : continuous_within_at h U b) :
  continuous_within_at ‚áë(g - h) U b :=
((g - h).continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mpr
  ((continuous_sub.continuous_at.comp_continuous_within_at
  (((g.continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mp hg).prod
  ((h.continuous_within_at_iff_continuous_within_at_triv_at R F E U b).mp hh))).congr
  (Œª y hy, trivialization.snd_map_sub hy.2) (trivialization.snd_map_sub
  (mem_base_set_trivialization_at R F E b)))

lemma continuous_at.sub_section {g h : bundle_section E} {b : B}
  (hg : continuous_at g b) (hh : continuous_at h b) :
  continuous_at (‚Üë(g - h) : B ‚Üí total_space E) b :=
by { rw ‚Üêcontinuous_within_at_univ at hg hh ‚ä¢, exact hg.sub_section R F hh }

lemma continuous_on.sub_section {g h : bundle_section E} {U : set B}
  (hg : continuous_on g U) (hh : continuous_on h U) :
  continuous_on (‚Üë(g - h) : B ‚Üí total_space E) U :=
Œª b hb, (hg.continuous_within_at hb).sub_section R F (hh.continuous_within_at hb)

lemma continuous.sub_section {g h : bundle_section E} (hg : continuous g)
  (hh : continuous h) : continuous ‚áë(g - h) :=
continuous_iff_continuous_at.mpr (Œª b, hg.continuous_at.sub_section R F hh.continuous_at)

end sub

end group
