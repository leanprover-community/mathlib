import topology.order.basic
import topology.algebra.group.basic

open set filter
open_locale topology filter

variables {Œ± Œ≤ : Type*} [topological_space Œ±] [linear_ordered_add_comm_group Œ±] [order_topology Œ±]
variables {l : filter Œ≤} {f g : Œ≤ ‚Üí Œ±}

@[priority 100] -- see Note [lower instance priority]
instance linear_ordered_add_comm_group.topological_add_group : topological_add_group Œ± :=
{ continuous_add :=
    begin
      refine continuous_iff_continuous_at.2 _,
      rintro ‚ü®a, b‚ü©,
      refine linear_ordered_add_comm_group.tendsto_nhds.2 (Œª Œµ Œµ0, _),
      rcases dense_or_discrete 0 Œµ with (‚ü®Œ¥, Œ¥0, Œ¥Œµ‚ü©|‚ü®h‚ÇÅ, h‚ÇÇ‚ü©),
      { -- If there exists `Œ¥ ‚àà (0, Œµ)`, then we choose `Œ¥`-nhd of `a` and `(Œµ-Œ¥)`-nhd of `b`
        filter_upwards [(eventually_abs_sub_lt a Œ¥0).prod_nhds
          (eventually_abs_sub_lt b (sub_pos.2 Œ¥Œµ))],
        rintros ‚ü®x, y‚ü© ‚ü®hx : |x - a| < Œ¥, hy : |y - b| < Œµ - Œ¥‚ü©,
        rw [add_sub_add_comm],
        calc |x - a + (y - b)| ‚â§ |x - a| + |y - b| : abs_add _ _
        ... < Œ¥ + (Œµ - Œ¥) : add_lt_add hx hy
        ... = Œµ : add_sub_cancel'_right _ _ },
      { -- Otherwise `Œµ`-nhd of each point `a` is `{a}`
        have hŒµ : ‚àÄ {x y}, |x - y| < Œµ ‚Üí x = y,
        { intros x y h,
          simpa [sub_eq_zero] using h‚ÇÇ _ h },
        filter_upwards [(eventually_abs_sub_lt a Œµ0).prod_nhds (eventually_abs_sub_lt b Œµ0)],
        rintros ‚ü®x, y‚ü© ‚ü®hx : |x - a| < Œµ, hy : |y - b| < Œµ‚ü©,
        simpa [hŒµ hx, hŒµ hy] }
    end,
  continuous_neg := continuous_iff_continuous_at.2 $ Œª a,
    linear_ordered_add_comm_group.tendsto_nhds.2 $ Œª Œµ Œµ0,
      (eventually_abs_sub_lt a Œµ0).mono $ Œª x hx, by rwa [neg_sub_neg, abs_sub_comm] }

@[continuity]
lemma continuous_abs : continuous (abs : Œ± ‚Üí Œ±) := continuous_id.max continuous_neg

lemma filter.tendsto.abs {f : Œ≤ ‚Üí Œ±} {a : Œ±} {l : filter Œ≤} (h : tendsto f l (ùìù a)) :
  tendsto (Œª x, |f x|) l (ùìù (|a|)) :=
(continuous_abs.tendsto _).comp h

lemma tendsto_zero_iff_abs_tendsto_zero (f : Œ≤ ‚Üí Œ±) {l : filter Œ≤} :
  tendsto f l (ùìù 0) ‚Üî tendsto (abs ‚àò f) l (ùìù 0) :=
begin
  refine ‚ü®Œª h, (abs_zero : |(0 : Œ±)| = 0) ‚ñ∏ h.abs, Œª h, _‚ü©,
  have : tendsto (Œª a, -|f a|) l (ùìù 0) := (neg_zero : -(0 : Œ±) = 0) ‚ñ∏ h.neg,
  exact tendsto_of_tendsto_of_tendsto_of_le_of_le this h
    (Œª x, neg_abs_le_self $ f x) (Œª x, le_abs_self $ f x),
end

lemma nhds_basis_Ioo_pos [no_min_order Œ±] [no_max_order Œ±] (a : Œ±) :
  (ùìù a).has_basis (Œª Œµ : Œ±, (0 : Œ±) < Œµ) (Œª Œµ, Ioo (a-Œµ) (a+Œµ)) :=
‚ü®begin
  refine Œª t, (nhds_basis_Ioo a).mem_iff.trans ‚ü®_, _‚ü©,
  { rintros ‚ü®‚ü®l, u‚ü©, ‚ü®hl : l < a, hu : a < u‚ü©, h' : Ioo l u ‚äÜ t‚ü©,
    refine ‚ü®min (a-l) (u-a), by apply lt_min; rwa sub_pos, _‚ü©,
    rintros x ‚ü®hx, hx'‚ü©,
    apply h',
    rw [sub_lt_comm, lt_min_iff, sub_lt_sub_iff_left] at hx,
    rw [‚Üê sub_lt_iff_lt_add', lt_min_iff, sub_lt_sub_iff_right] at hx',
    exact ‚ü®hx.1, hx'.2‚ü© },
  { rintros ‚ü®Œµ, Œµ_pos, h‚ü©,
    exact ‚ü®(a-Œµ, a+Œµ), by simp [Œµ_pos], h‚ü© },
end‚ü©

lemma nhds_basis_abs_sub_lt [no_min_order Œ±] [no_max_order Œ±] (a : Œ±) :
  (ùìù a).has_basis (Œª Œµ : Œ±, (0 : Œ±) < Œµ) (Œª Œµ, {b | |b - a| < Œµ}) :=
begin
  convert nhds_basis_Ioo_pos a,
  { ext Œµ,
    change |x - a| < Œµ ‚Üî a - Œµ < x ‚àß x < a + Œµ,
    simp [abs_lt, sub_lt_iff_lt_add, add_comm Œµ a, add_comm x Œµ] }
end

variable (Œ±)

lemma nhds_basis_zero_abs_sub_lt [no_min_order Œ±] [no_max_order Œ±] :
  (ùìù (0 : Œ±)).has_basis (Œª Œµ : Œ±, (0 : Œ±) < Œµ) (Œª Œµ, {b | |b| < Œµ}) :=
by simpa using nhds_basis_abs_sub_lt (0 : Œ±)

variable {Œ±}

/-- If `a` is positive we can form a basis from only nonnegative `Ioo` intervals -/
lemma nhds_basis_Ioo_pos_of_pos [no_min_order Œ±] [no_max_order Œ±]
  {a : Œ±} (ha : 0 < a) :
  (ùìù a).has_basis (Œª Œµ : Œ±, (0 : Œ±) < Œµ ‚àß Œµ ‚â§ a) (Œª Œµ, Ioo (a-Œµ) (a+Œµ)) :=
‚ü® Œª t, (nhds_basis_Ioo_pos a).mem_iff.trans
  ‚ü®Œª h, let ‚ü®i, hi, hit‚ü© := h in
    ‚ü®min i a, ‚ü®lt_min hi ha, min_le_right i a‚ü©, trans (Ioo_subset_Ioo
    (sub_le_sub_left (min_le_left i a) a) (add_le_add_left (min_le_left i a) a)) hit‚ü©,
  Œª h, let ‚ü®i, hi, hit‚ü© := h in ‚ü®i, hi.1, hit‚ü© ‚ü© ‚ü©

section

variables [topological_space Œ≤] {b : Œ≤} {a : Œ±} {s : set Œ≤}

lemma continuous.abs (h : continuous f) : continuous (Œª x, |f x|) := continuous_abs.comp h

lemma continuous_at.abs (h : continuous_at f b) : continuous_at (Œª x, |f x|) b := h.abs

lemma continuous_within_at.abs (h : continuous_within_at f s b) :
  continuous_within_at (Œª x, |f x|) s b := h.abs

lemma continuous_on.abs (h : continuous_on f s) : continuous_on (Œª x, |f x|) s :=
Œª x hx, (h x hx).abs

lemma tendsto_abs_nhds_within_zero : tendsto (abs : Œ± ‚Üí Œ±) (ùìù[‚â†] 0) (ùìù[>] 0) :=
(continuous_abs.tendsto' (0 : Œ±) 0 abs_zero).inf $ tendsto_principal_principal.2 $ Œª x, abs_pos.2

end

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to `C`
and `g` tends to `at_top` then `f + g` tends to `at_top`. -/
lemma filter.tendsto.add_at_top {C : Œ±} (hf : tendsto f l (ùìù C)) (hg : tendsto g l at_top) :
  tendsto (Œª x, f x + g x) l at_top :=
begin
  nontriviality Œ±,
  obtain ‚ü®C', hC'‚ü© : ‚àÉ C', C' < C := exists_lt C,
  refine tendsto_at_top_add_left_of_le' _ C' _ hg,
  exact (hf.eventually (lt_mem_nhds hC')).mono (Œª x, le_of_lt)
end

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to `C`
and `g` tends to `at_bot` then `f + g` tends to `at_bot`. -/
lemma filter.tendsto.add_at_bot {C : Œ±} (hf : tendsto f l (ùìù C)) (hg : tendsto g l at_bot) :
  tendsto (Œª x, f x + g x) l at_bot :=
@filter.tendsto.add_at_top Œ±·µí·µà _ _ _ _ _ _ _ _ hf hg

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to
`at_top` and `g` tends to `C` then `f + g` tends to `at_top`. -/
lemma filter.tendsto.at_top_add {C : Œ±} (hf : tendsto f l at_top) (hg : tendsto g l (ùìù C)) :
  tendsto (Œª x, f x + g x) l at_top :=
by { conv in (_ + _) { rw add_comm }, exact hg.add_at_top hf }

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to
`at_bot` and `g` tends to `C` then `f + g` tends to `at_bot`. -/
lemma filter.tendsto.at_bot_add {C : Œ±} (hf : tendsto f l at_bot) (hg : tendsto g l (ùìù C)) :
  tendsto (Œª x, f x + g x) l at_bot :=
by { conv in (_ + _) { rw add_comm }, exact hg.add_at_bot hf }
