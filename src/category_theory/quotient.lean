import category_theory.functor
import category_theory.eq_to_hom

/-
  This file defines quotient categories. Given a category and an arbitrary family of relations
  on its homsets, thought of as identifying some homs, we construct a new category on an
  identical type of objects, where related homs are identified.

    Note that we do *not* assume that our relation behaves well under composition, or that it is
  an equivalence relation.
-/

universes v v‚ÇÅ u u‚ÇÅ

namespace category_theory

variables
  {C : Type u} [category.{v} C]
  (r : Œ† (a b : C), (a ‚ü∂ b) ‚Üí (a ‚ü∂ b) ‚Üí Prop)
include r

/-- The type of objects in the quotient category --/
structure quotient := (to_C : C)
def of_C (a : C) : quotient r := ‚ü®r, a‚ü©

namespace quotient

/- Generates the closure of a family of relations wrt composition from left and right
  If m‚ÇÅ and m‚ÇÇ are identified, then fm‚ÇÅg and fm‚ÇÇg should also be identified. -/
inductive ccl {s t : C} : (s ‚ü∂ t) ‚Üí (s ‚ü∂ t) ‚Üí Prop
| intro {a b} (f : s ‚ü∂ a) (m‚ÇÅ m‚ÇÇ : a ‚ü∂ b) (g : b ‚ü∂ t) (h : r _ _ m‚ÇÅ m‚ÇÇ) :
  ccl (f ‚â´ m‚ÇÅ ‚â´ g) (f ‚â´ m‚ÇÇ ‚â´ g)

lemma comp_left {a b c : C} (f : a ‚ü∂ b) : Œ† (g‚ÇÅ g‚ÇÇ : b ‚ü∂ c) (h : ccl r g‚ÇÅ g‚ÇÇ),
  ccl r (f ‚â´ g‚ÇÅ) (f ‚â´ g‚ÇÇ)
| _ _ ‚ü®x, m‚ÇÅ, m‚ÇÇ, y, h‚ü© := by simpa using ccl.intro (f ‚â´ x) m‚ÇÅ m‚ÇÇ y h

lemma comp_right {a b c : C} (g : b ‚ü∂ c) : Œ† (f‚ÇÅ f‚ÇÇ : a ‚ü∂ b) (h : ccl r f‚ÇÅ f‚ÇÇ),
  ccl r (f‚ÇÅ ‚â´ g) (f‚ÇÇ ‚â´ g)
| _ _ ‚ü®x, m‚ÇÅ, m‚ÇÇ, y, h‚ü© := by simpa using ccl.intro x m‚ÇÅ m‚ÇÇ (y ‚â´ g) h

def hom (s t : quotient r) := quot $ @ccl C _ r s.to_C t.to_C

-- We get well-defined composition on the quotient because of comp_left and comp_right
def comp {a b c : quotient r} : hom r a b ‚Üí hom r b c ‚Üí hom r a c :=
Œª hf hg, quot.lift_on hf ( Œª f, quot.lift_on hg (Œª g, quot.mk _ (f ‚â´ g))
  (Œª g‚ÇÅ g‚ÇÇ h, quot.sound $ comp_left r f g‚ÇÅ g‚ÇÇ h) )
  (Œª f‚ÇÅ f‚ÇÇ h, quot.induction_on hg $ Œª g, quot.sound $ comp_right r g f‚ÇÅ f‚ÇÇ h)

@[simp]
lemma hcomp_mk {a b c : quotient r} (f : a.to_C ‚ü∂ b.to_C) (g : b.to_C ‚ü∂ c.to_C) :
  comp r (quot.mk _ f) (quot.mk _ g) = quot.mk _ (f ‚â´ g) := rfl

instance category : category (quotient r) :=
{ hom := hom r,
  id := Œª a, quot.mk _ (ùüô a.to_C),
  comp := @comp _ _ r }

-- The functor from a category to its quotient
@[simps]
def functor : C ‚•§ quotient r :=
{ obj := of_C r,
  map := Œª _ _ f, quot.mk _ f }

-- We haven't made our category any bigger
protected lemma induction {P : Œ† {a b : quotient r}, (a ‚ü∂ b) ‚Üí Prop}
  (h : ‚àÄ {x y : C} (f : x ‚ü∂ y), P ((functor r).map f)) :
  ‚àÄ {a b : quotient r} (f : a ‚ü∂ b), P f :=
begin rintros ‚ü®x‚ü© ‚ü®y‚ü© ‚ü®f‚ü©, exact h f, end

-- Related homs are identical in the quotient category
protected lemma sound {a b : C} (f‚ÇÅ f‚ÇÇ : a ‚ü∂ b) (h : r a b f‚ÇÅ f‚ÇÇ) :
  quot.mk (ccl r) f‚ÇÅ = quot.mk _ f‚ÇÇ :=
by simpa using quot.sound (@ccl.intro C _ r a b a b (ùüô a) f‚ÇÅ f‚ÇÇ (ùüô b) h)

variables {r} {D : Type*} [category D]
  (F : C ‚•§ D)
  (H : ‚àÄ (x y : C) (f‚ÇÅ f‚ÇÇ : x ‚ü∂ y), r _ _ f‚ÇÅ f‚ÇÇ ‚Üí F.map f‚ÇÅ = F.map f‚ÇÇ)
include H

-- The lift to the quotient category of a functor that maps related homs to identical homs
@[simps]
def lift : quotient r ‚•§ D :=
{ obj := Œª a, F.obj a.to_C,
  map := Œª a b hf, quot.lift_on hf (Œª f, F.map f)
    begin
      rintros _ _ ‚ü®x, y, f, m‚ÇÅ, m‚ÇÇ, g, h‚ü©,
      unfold,
      repeat { rw functor.map_comp },
      rw H x y m‚ÇÅ m‚ÇÇ h,
    end,
  map_id' := Œª a, F.map_id' a.to_C,
  map_comp' := begin rintros a b c ‚ü®f‚ü© ‚ü®g‚ü©, exact F.map_comp' f g end }

@[simp]
lemma lift.is_lift : (functor r) ‚ãô lift F H = F :=
category_theory.functor.ext (Œª a, rfl) (by simp)

end quotient

end category_theory
