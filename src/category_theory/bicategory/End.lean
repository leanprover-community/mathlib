/-
Copyright (c) 2022 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.bicategory.basic
import category_theory.monoidal.category

/-!
# Endomorphisms of an object in a bicategory, as a monoidal category.
-/

namespace category_theory

variables {C : Type*} [bicategory C]

/-- The endomorphisms of an object in a bicategory can be considered as a monoidal category. -/
@[derive category]
def End_monoidal (X : C) := X ‚ü∂ X

instance (X : C) : inhabited (End_monoidal X) := ‚ü®ùüô X‚ü©

open_locale bicategory

open monoidal_category
open bicategory

instance (X : C) : monoidal_category (End_monoidal X) :=
{ tensor_obj := Œª X Y, X ‚â´ Y,
  tensor_hom := Œª W X Y Z f g, (f ‚ñ∑ Y) ‚â´ (X ‚óÅ g),
  tensor_unit := ùüô _,
  associator := Œª X Y Z, Œ±_ X Y Z,
  left_unitor := Œª X, Œª_ X,
  right_unitor := Œª X, œÅ_ X,
  tensor_comp' := Œª X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ,
    by rw [bicategory.whisker_left_comp, bicategory.comp_whisker_right, category.assoc,
      category.assoc, bicategory.whisker_exchange_assoc], }

end category_theory
