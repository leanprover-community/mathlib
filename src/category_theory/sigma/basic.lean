/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.natural_isomorphism
import category_theory.eq_to_hom
import data.sigma.basic
import category_theory.pi.basic

/-!
# Disjoint union of categories

We define the category structure on a sigma-type (disjoint union) of categories.
-/

namespace category_theory
namespace sigma

universes w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variables {I : Type w‚ÇÅ} {C : I ‚Üí Type u‚ÇÅ} [Œ† i, category.{v‚ÇÅ} (C i)]

/--
The type of morphisms of a disjoint union of categories: for `X : C i` and `Y : C j`, a morphism
`(i, X) ‚ü∂ (j, Y)` if `i = j` is just a morphism `X ‚ü∂ Y`, and if `i ‚â† j` there are no such morphisms.
-/
inductive sigma_hom : (Œ£ i, C i) ‚Üí (Œ£ i, C i) ‚Üí Type (max w‚ÇÅ v‚ÇÅ u‚ÇÅ)
| mk : Œ† (i : I) (X Y : C i), (X ‚ü∂ Y) ‚Üí sigma_hom ‚ü®i, X‚ü© ‚ü®i, Y‚ü©

namespace sigma_hom

/-- The identity morphism on an object. -/
def id : Œ† (X : Œ£ i, C i), sigma_hom X X
| ‚ü®i, X‚ü© := mk i _ _ (ùüô _)

/-- Composition of sigma homomorphisms. -/
def comp : Œ† {X Y Z : Œ£ i, C i}, sigma_hom X Y ‚Üí sigma_hom Y Z ‚Üí sigma_hom X Z
| _ _ _ (mk _ X _ f) (mk i Y Z g) := mk _ _ _ (f ‚â´ g)

instance : category_struct (Œ£ i, C i) :=
{ hom := sigma_hom,
  id := id,
  comp := Œª X Y Z f g, comp f g }

@[simp]
lemma comp_def (i : I) (X Y Z : C i) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  comp (mk i X Y f) (mk i Y Z g) = mk i X Z (f ‚â´ g) :=
rfl

lemma assoc : ‚àÄ (X Y Z W : Œ£ i, C i) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ W), (f ‚â´ g) ‚â´ h = f ‚â´ g ‚â´ h
| _ _ _ _ (mk _ X _ f) (mk _ Y _ g) (mk i Z W h) :=
  begin
    change mk _ _ _ _ = matched _ _ _ _,
    simp,
  end

lemma id_comp : ‚àÄ (X Y : Œ£ i, C i) (f : X ‚ü∂ Y), ùüô X ‚â´ f = f
| _ _ (matched i X Y f) :=
  begin
    change matched _ _ _ _ = matched _ _ _ _,
    simp,
  end

lemma comp_id : ‚àÄ (X Y : Œ£ i, C i) (f : X ‚ü∂ Y), f ‚â´ ùüô Y = f
| _ _ (matched i X Y f) :=
  begin
    change matched _ _ _ _ = matched _ _ _ _,
    simp,
  end

end sigma_hom

instance sigma : category (Œ£ i, C i) :=
{ id_comp' := sigma_hom.id_comp,
  comp_id' := sigma_hom.comp_id,
  assoc' := sigma_hom.assoc }

/-- The inclusion functor into the disjoint union of categories. -/
@[simps]
def incl (i : I) : C i ‚•§ Œ£ i, C i :=
{ obj := Œª X, ‚ü®i, X‚ü©,
  map := Œª X Y f, sigma_hom.matched _ _ _ f }

instance (i : I) : full (incl i : C i ‚•§ Œ£ i, C i) :=
{ preimage := Œª X Y ‚ü®_, _, _, f‚ü©, f,
  witness' := Œª X Y ‚ü®_, _, _, f‚ü©, rfl }.

instance (i : I) : faithful (incl i : C i ‚•§ Œ£ i, C i) := {}.

section
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] (F : Œ† i, C i ‚•§ D)

def desc_map : ‚àÄ (X Y : Œ£ i, C i), (X ‚ü∂ Y) ‚Üí ((F X.1).obj X.2 ‚ü∂ (F Y.1).obj Y.2)
| _ _ (sigma_hom.matched i X Y g) := (F i).map g

@[simps obj]
def desc : (Œ£ i, C i) ‚•§ D :=
{ obj := Œª X, (F X.1).obj X.2,
  map := Œª X Y g, desc_map F X Y g,
  map_id' := Œª X,
  begin
    cases X with i X,
    apply (F i).map_id,
  end,
  map_comp' :=
  begin
    rintro ‚ü®i, X‚ü© ‚ü®_, Y‚ü© ‚ü®_, Z‚ü© ‚ü®i, _, Y, f‚ü© ‚ü®_, _, Z, g‚ü©,
    apply (F i).map_comp,
  end }

def incl_desc (i : I) : incl i ‚ãô desc F ‚âÖ F i :=
nat_iso.of_components (Œª X, iso.refl _) (by tidy)

def desc_uniq (q : (Œ£ i, C i) ‚•§ D) (h : Œ† i, incl i ‚ãô q ‚âÖ F i) : q ‚âÖ desc F :=
nat_iso.of_components (Œª ‚ü®i, X‚ü©, (h i).app X)
begin
  rintro ‚ü®i, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©,
  apply (h i).hom.naturality f,
end

def desc_hom_ext (q‚ÇÅ q‚ÇÇ : (Œ£ i, C i) ‚•§ D) (h : Œ† i, incl i ‚ãô q‚ÇÅ ‚âÖ incl i ‚ãô q‚ÇÇ) :
  q‚ÇÅ ‚âÖ q‚ÇÇ :=
desc_uniq (Œª i, incl i ‚ãô q‚ÇÇ) q‚ÇÅ h ‚â™‚â´ (desc_uniq _ _ (Œª i, iso.refl _)).symm

@[simps]
def joining (F G : (Œ£ i, C i) ‚•§ D) (h : Œ† (i : I), incl i ‚ãô F ‚ü∂ incl i ‚ãô G): F ‚ü∂ G :=
{ app :=
  begin
    rintro ‚ü®j, X‚ü©,
    apply (h j).app X,
  end,
  naturality' :=
  begin
    rintro ‚ü®j, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©,
    apply (h j).naturality,
  end }


end

section

variables (C) {J : Type w‚ÇÇ}

@[simps {rhs_md := semireducible}]
def map (h : J ‚Üí I) : (Œ£ (j : J), C (h j)) ‚•§ (Œ£ (i : I), C i) :=
desc (Œª j, incl (h j))

def incl_comp_map (h : J ‚Üí I) (j : J) : incl j ‚ãô map C h ‚âÖ incl (h j) :=
incl_desc _ _

variable (I)

def map_id : map C (id : I ‚Üí I) ‚âÖ ùü≠ (Œ£ i, C i) :=
desc_hom_ext _ _ (Œª i, nat_iso.of_components (Œª X, iso.refl _) (by tidy))

variables {I} {K : Type w‚ÇÉ}

def map_comp (f : K ‚Üí J) (g : J ‚Üí I) : map (C ‚àò g) f ‚ãô (map C g : _) ‚âÖ map C (g ‚àò f) :=
desc_uniq _ _ $ Œª k,
  (iso_whisker_right (incl_comp_map (C ‚àò g) f k) (map C g : _) : _) ‚â™‚â´ incl_comp_map _ _ _

end

namespace functor

variables {C}
variables {D : I ‚Üí Type u‚ÇÅ} [‚àÄ i, category.{v‚ÇÅ} (D i)]

/--
Assemble an `I`-indexed family of functors into a functor between the sigma types.
-/
def sigma (F : Œ† i, C i ‚•§ D i) : (Œ£ i, C i) ‚•§ (Œ£ i, D i) :=
desc (Œª i, F i ‚ãô incl i)

end functor

namespace nat_trans

variables {C}
variables {D : I ‚Üí Type u‚ÇÅ} [‚àÄ i, category.{v‚ÇÅ} (D i)]
variables {F G : Œ† i, C i ‚•§ D i}

/--
Assemble an `I`-indexed family of natural transformations into a single natural transformation.
-/
def sigma (Œ± : Œ† i, F i ‚ü∂ G i) : functor.sigma F ‚ü∂ functor.sigma G :=
{ app := Œª f, sigma_hom.matched _ _ _ ((Œ± f.1).app _),
  naturality' :=
  begin
    rintro ‚ü®i, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©,
    change sigma_hom.matched _ _ _ _ = sigma_hom.matched _ _ _ _,
    rw (Œ± i).naturality,
  end }

end nat_trans

end sigma
end category_theory
