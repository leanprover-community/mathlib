/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, E. W. Ayers
-/

import category_theory.over
import category_theory.limits.shapes.finite_limits
import category_theory.yoneda
import order.complete_lattice
import data.set.lattice

/-!
# Theory of sieves

- For an object `X` of a category `C`, a `sieve X` is a set of morphisms to `X`
  which is closed under left-composition.
- The complete lattice structure on sieves is given, as well as the Galois insertion
  given by downward-closing.
- A `sieve X` (functorially) induces a presheaf on `C` together with a monomorphism to
  the yoneda embedding of `X`.

## Tags

sieve, pullback
-/

universes v u
namespace category_theory

/--
For an object `X` of a category `C`, a `sieve X` is a set of morphisms to `X` which is closed under
left-composition.
-/
structure sieve {C : Type u} [category.{v} C] (X : C) :=
(arrows : Œ† ‚¶ÉY‚¶Ñ, set (Y ‚ü∂ X))
(downward_closed : ‚àÄ {Y Z f} (hf : arrows f) (g : Z ‚ü∂ Y), arrows (g ‚â´ f))
attribute [simp, priority 100] sieve.downward_closed

namespace sieve

variables {C : Type u} [category.{v} C]

variables {X Y Z : C} {S R : sieve X}

/-- A sieve gives a subset of the over category of `X`. -/
def set_over (S : sieve X) : set (over X) := Œª f, S.arrows f.hom

lemma arrows_ext : Œ† {R S : sieve X}, R.arrows = S.arrows ‚Üí R = S
| ‚ü®Ra, _‚ü© ‚ü®Sa, _‚ü© rfl := rfl

@[ext]
protected lemma ext {R S : sieve X}
  (h : ‚àÄ ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), R.arrows f ‚Üî S.arrows f) :
  R = S :=
arrows_ext $ funext $ Œª x, funext $ Œª f, propext $ h f

protected lemma ext_iff {R S : sieve X} :
  R = S ‚Üî (‚àÄ ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), R.arrows f ‚Üî S.arrows f) :=
‚ü®Œª h Y f, h ‚ñ∏ iff.rfl, sieve.ext‚ü©

open lattice

/-- The supremum of a collection of sieves: the union of them all. -/
protected def Sup (ùíÆ : set (sieve X)) : (sieve X) :=
{ arrows := Œª Y, {f | ‚àÉ S ‚àà ùíÆ, sieve.arrows S f},
  downward_closed := Œª Y Z f, by { rintro ‚ü®S, hS, hf‚ü© g, exact ‚ü®S, hS, S.downward_closed hf _‚ü© } }

/-- The infimum of a collection of sieves: the intersection of them all. -/
protected def Inf (ùíÆ : set (sieve X)) : (sieve X) :=
{ arrows := Œª Y, {f | ‚àÄ S ‚àà ùíÆ, sieve.arrows S f},
  downward_closed := Œª Y Z f hf g S H, S.downward_closed (hf S H) g }

/-- The union of two sieves is a sieve. -/
protected def union (S R : sieve X) : sieve X :=
{ arrows := Œª Y f, S.arrows f ‚à® R.arrows f,
  downward_closed := by { rintros Y Z f (h | h) g; simp [h] } }

/-- The intersection of two sieves is a sieve. -/
protected def inter (S R : sieve X) : sieve X :=
{ arrows := Œª Y f, S.arrows f ‚àß R.arrows f,
  downward_closed := by { rintros Y Z f ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© g, simp [h‚ÇÅ, h‚ÇÇ] } }

/--
Sieves on an object `X` form a complete lattice.
We generate this directly rather than using the galois insertion for nicer definitional
properties.
-/
instance : complete_lattice (sieve X) :=
{ le           := Œª S R, ‚àÄ Y (f : Y ‚ü∂ X), S.arrows f ‚Üí R.arrows f,
  le_refl      := Œª S f q, id,
  le_trans     := Œª S‚ÇÅ S‚ÇÇ S‚ÇÉ S‚ÇÅ‚ÇÇ S‚ÇÇ‚ÇÉ Y f h, S‚ÇÇ‚ÇÉ _ _ (S‚ÇÅ‚ÇÇ _ _ h),
  le_antisymm  := Œª S R p q, sieve.ext (Œª Y f, ‚ü®p _ _, q _ _‚ü©),
  top          := { arrows := Œª _, set.univ, downward_closed := Œª Y Z f g h, ‚ü®‚ü© },
  bot          := { arrows := Œª _, ‚àÖ, downward_closed := Œª _ _ _ p _, false.elim p },
  sup          := sieve.union,
  inf          := sieve.inter,
  Sup          := sieve.Sup,
  Inf          := sieve.Inf,
  le_Sup       := Œª ùíÆ S hS Y f hf, ‚ü®S, hS, hf‚ü©,
  Sup_le       := Œª ‚Ñ∞ S hS Y f, by { rintro ‚ü®R, hR, hf‚ü©, apply hS R hR _ _ hf },
  Inf_le       := Œª _ _ hS _ _ h, h _ hS,
  le_Inf       := Œª _ _ hS _ _ hf _ hR, hS _ hR _ _ hf,
  le_sup_left  := Œª _ _ _ _, or.inl,
  le_sup_right := Œª _ _ _ _, or.inr,
  sup_le       := Œª _ _ _ a b _ _ hf, hf.elim (a _ _) (b _ _),
  inf_le_left  := Œª _ _ _ _, and.left,
  inf_le_right := Œª _ _ _ _, and.right,
  le_inf       := Œª _ _ _ p q _ _ z, ‚ü®p _ _ z, q _ _ z‚ü©,
  le_top       := Œª _ _ _ _, trivial,
  bot_le       := Œª _ _ _, false.elim }

/-- The maximal sieve always exists. -/
instance sieve_inhabited : inhabited (sieve X) := ‚ü®‚ä§‚ü©

@[simp]
lemma mem_Inf {Ss : set (sieve X)} {Y} (f : Y ‚ü∂ X) :
  (Inf Ss).arrows f ‚Üî ‚àÄ S ‚àà Ss, sieve.arrows S f :=
iff.rfl

@[simp]
lemma mem_Sup {Ss : set (sieve X)} {Y} (f : Y ‚ü∂ X) :
  (Sup Ss).arrows f ‚Üî ‚àÉ S ‚àà Ss, sieve.arrows S f :=
iff.rfl

@[simp]
lemma mem_inter {R S : sieve X} {Y} (f : Y ‚ü∂ X) :
  (R ‚äì S).arrows f ‚Üî R.arrows f ‚àß S.arrows f :=
iff.rfl

@[simp]
lemma mem_union {R S : sieve X} {Y} (f : Y ‚ü∂ X) :
  (R ‚äî S).arrows f ‚Üî R.arrows f ‚à® S.arrows f :=
iff.rfl

@[simp]
lemma mem_top (f : Y ‚ü∂ X) : (‚ä§ : sieve X).arrows f := trivial

/-- Take the downward-closure of a set of morphisms to `X`. -/
inductive generate_sets (ùí¢ : set (over X)) : Œ† (Y : C), set (Y ‚ü∂ X)
| basic : Œ† {Y : C} {f : Y ‚ü∂ X}, over.mk f ‚àà ùí¢ ‚Üí generate_sets _ f
| close : Œ† {Y Z} {f : Y ‚ü∂ X} (g : Z ‚ü∂ Y), generate_sets _ f ‚Üí generate_sets _ (g ‚â´ f)

/-- Generate the smallest sieve containing the given set of arrows. -/
def generate (ùí¢ : set (over X)) : sieve X :=
{ arrows := generate_sets ùí¢,
  downward_closed := Œª _ _ _ h _, generate_sets.close _ h }

open order lattice

lemma sets_iff_generate (S : set (over X)) (S' : sieve X) :
  generate S ‚â§ S' ‚Üî S ‚â§ S'.set_over :=
‚ü®Œª H g hg,
  begin
    have : over.mk g.hom = g,
      cases g, dsimp [over.mk],
      congr' 1, apply subsingleton.elim,
    rw ‚Üê this at *,
    exact H _ _ (generate_sets.basic hg),
  end,
Œª ss Y f hf,
begin
  induction hf,
  case basic : X g hg { exact ss hg },
  case close : Y Z f g hf‚ÇÅ hf‚ÇÇ { exact S'.downward_closed hf‚ÇÇ _ },
end‚ü©

/-- Show that there is a galois insertion (generate, set_over). -/
def gi_generate : galois_insertion (generate : set (over X) ‚Üí sieve X) set_over :=
{ gc := sets_iff_generate,
  choice := Œª ùí¢ _, generate ùí¢,
  choice_eq := Œª _ _, rfl,
  le_l_u := Œª S Y f hf, generate_sets.basic hf }

/-- Given a morphism `h : Y ‚ü∂ X`, send a sieve S on X to a sieve on Y
    as the inverse image of S with `_ ‚â´ h`.
    That is, `sieve.pullback S h := (‚â´ h) '‚Åª¬π S`. -/
def pullback (h : Y ‚ü∂ X) (S : sieve X) : sieve Y :=
{ arrows := Œª Y sl, S.arrows (sl ‚â´ h),
  downward_closed := Œª Z W f g h, by simp [g] }

@[simp] lemma mem_pullback (h : Y ‚ü∂ X) {f : Z ‚ü∂ Y} :
  (S.pullback h).arrows f ‚Üî S.arrows (f ‚â´ h) := iff.rfl

@[simp]
lemma pullback_id : S.pullback (ùüô _) = S :=
by simp [sieve.ext_iff]

@[simp]
lemma pullback_top {f : Y ‚ü∂ X} : (‚ä§ : sieve X).pullback f = ‚ä§ :=
top_unique (Œª _ g, id)

lemma pullback_comp {f : Y ‚ü∂ X} {g : Z ‚ü∂ Y} (S : sieve X) :
  S.pullback (g ‚â´ f) = (S.pullback f).pullback g :=
by simp [sieve.ext_iff]

@[simp]
lemma pullback_inter {f : Y ‚ü∂ X} (S R : sieve X) :
 (S ‚äì R).pullback f = S.pullback f ‚äì R.pullback f :=
by simp [sieve.ext_iff]

/-- If the identity arrow is in a sieve, the sieve is maximal. -/
lemma id_mem_iff_eq_top : S.arrows (ùüô X) ‚Üî S = ‚ä§ :=
‚ü®Œª h, top_unique $ Œª Y f _, by simpa using downward_closed _ h f,
 Œª h, h.symm ‚ñ∏ trivial‚ü©

lemma pullback_eq_top_iff_mem (f : Y ‚ü∂ X) : S.arrows f ‚Üî S.pullback f = ‚ä§ :=
by rw [‚Üê id_mem_iff_eq_top, mem_pullback, category.id_comp]

lemma pullback_eq_top_of_mem (S : sieve X) {f : Y ‚ü∂ X} : S.arrows f ‚Üí S.pullback f = ‚ä§ :=
(pullback_eq_top_iff_mem f).1

/--
Push a sieve `R` on `Y` forward along an arrow `f : Y ‚ü∂ X`: `gf : Z ‚ü∂ X`
is in the sieve if `gf` factors through some `g : Z ‚ü∂ Y` which is in `R`.
-/
def pushforward (f : Y ‚ü∂ X) (R : sieve Y) : sieve X :=
{ arrows := Œª Z gf, ‚àÉ g, g ‚â´ f = gf ‚àß R.arrows g,
  downward_closed := Œª Z‚ÇÅ Z‚ÇÇ g ‚ü®j, k, z‚ü© h, ‚ü®h ‚â´ j, by simp [k], by simp [z]‚ü© }

@[simp]
lemma mem_pushforward_of_comp {R : sieve Y} {Z : C} {g : Z ‚ü∂ Y} (hg : R.arrows g) (f : Y ‚ü∂ X) :
  (R.pushforward f).arrows (g ‚â´ f) :=
‚ü®g, rfl, hg‚ü©

lemma pushforward_comp {f : Y ‚ü∂ X} {g : Z ‚ü∂ Y} (R : sieve Z) :
  R.pushforward (g ‚â´ f) = (R.pushforward g).pushforward f :=
sieve.ext (Œª W h, ‚ü®Œª ‚ü®f‚ÇÅ, hq, hf‚ÇÅ‚ü©, ‚ü®f‚ÇÅ ‚â´ g, by simpa, f‚ÇÅ, rfl, hf‚ÇÅ‚ü©,
                   Œª ‚ü®y, hy, z, hR, hz‚ü©, ‚ü®z, by rwa reassoc_of hR, hz‚ü©‚ü©)

lemma galois_connection (f : Y ‚ü∂ X) : galois_connection (sieve.pushforward f) (sieve.pullback f) :=
Œª S R, ‚ü®Œª hR Z g hg, hR _ _ ‚ü®g, rfl, hg‚ü©, Œª hS Z g ‚ü®h, hg, hh‚ü©, hg ‚ñ∏ hS Z h hh‚ü©

lemma pullback_monotone (f : Y ‚ü∂ X) : monotone (sieve.pullback f) :=
(galois_connection f).monotone_u

lemma pushforward_monotone (f : Y ‚ü∂ X) : monotone (sieve.pushforward f) :=
(galois_connection f).monotone_l

lemma le_pushforward_pullback (f : Y ‚ü∂ X) (R : sieve Y) :
  R ‚â§ (R.pushforward f).pullback f :=
(galois_connection f).le_u_l _

lemma pullback_pushforward_le (f : Y ‚ü∂ X) (R : sieve X) :
  (R.pullback f).pushforward f ‚â§ R :=
(galois_connection f).l_u_le _

lemma pushforward_union {f : Y ‚ü∂ X} (S R : sieve Y) :
  (S ‚äî R).pushforward f = S.pushforward f ‚äî R.pushforward f :=
(galois_connection f).l_sup

/-- If `f` is a monomorphism, the pushforward-pullback adjunction on sieves is coreflective. -/
def galois_coinsertion_of_mono (f : Y ‚ü∂ X) [mono f] :
  galois_coinsertion (sieve.pushforward f) (sieve.pullback f) :=
begin
  apply (galois_connection f).to_galois_coinsertion,
  rintros S Z g ‚ü®g‚ÇÅ, hf, hg‚ÇÅ‚ü©,
  rw cancel_mono f at hf,
  rwa ‚Üê hf,
end

/-- If `f` is a split epi, the pushforward-pullback adjunction on sieves is reflective. -/
def galois_insertion_of_split_epi (f : Y ‚ü∂ X) [split_epi f] :
  galois_insertion (sieve.pushforward f) (sieve.pullback f) :=
begin
  apply (galois_connection f).to_galois_insertion,
  intros S Z g hg,
  refine ‚ü®g ‚â´ section_ f, by simpa‚ü©,
end

/-- A sieve induces a presheaf. -/
@[simps]
def functor (S : sieve X) : C·µí·µñ ‚•§ Type v :=
{ obj := Œª Y, {g : Y.unop ‚ü∂ X // S.arrows g},
  map := Œª Y Z f g, ‚ü®f.unop ‚â´ g.1, downward_closed _ g.2 _‚ü© }

/--
If a sieve S is contained in a sieve T, then we have a morphism of presheaves on their induced
presheaves.
-/
@[simps]
def nat_trans_of_le {S T : sieve X} (h : S ‚â§ T) : S.functor ‚ü∂ T.functor :=
{ app := Œª Y f, ‚ü®f.1, h _ _ f.2‚ü© }.

/-- The natural inclusion from the functor induced by a sieve to the yoneda embedding. -/
@[simps]
def functor_inclusion (S : sieve X) : S.functor ‚ü∂ yoneda.obj X :=
{ app := Œª Y f, f.1 }.

lemma nat_trans_of_le_comm {S T : sieve X} (h : S ‚â§ T) :
  nat_trans_of_le h ‚â´ functor_inclusion _ = functor_inclusion _ :=
rfl

/-- The presheaf induced by a sieve is a subobject of the yoneda embedding. -/
instance functor_inclusion_is_mono : mono (functor_inclusion S) :=
‚ü®Œª Z f g h, by { ext Y y, apply congr_fun (nat_trans.congr_app h Y) y }‚ü©

end sieve
end category_theory
