import topology.opens
import category_theory.sites.grothendieck
import category_theory.sites.pretopology
import category_theory.limits.lattice

universe u

variables (T : Type u) [topological_space T]

namespace category_theory
open topological_space limits

/-- The Grothendieck topology associated to a topological space. -/
def associated : grothendieck_topology (opens T) :=
{ sieves := Œª X S, ‚àÄ x ‚àà X, ‚àÉ U (f : U ‚ü∂ X), S f ‚àß x ‚àà U,
  top_mem' := Œª X x hx, ‚ü®_, ùüô _, trivial, hx‚ü©,
  pullback_stable' := Œª X Y S f hf y hy,
  begin
    rcases hf y (le_of_hom f hy) with ‚ü®U, g, hg, hU‚ü©,
    refine ‚ü®U ‚äì Y, hom_of_le inf_le_right, _, hU, hy‚ü©,
    apply S.downward_closed hg (hom_of_le inf_le_left),
  end,
  transitive' := Œª X S hS R hR x hx,
  begin
    rcases hS x hx with ‚ü®U, f, hf, hU‚ü©,
    rcases hR hf _ hU with ‚ü®V, g, hg, hV‚ü©,
    exact ‚ü®_, g ‚â´ f, hg, hV‚ü©,
  end }

/-- The Grothendieck pretopology associated to a topological space. -/
def associated_p : pretopology (opens T) :=
{ coverings := Œª X R, ‚àÄ x ‚àà X, ‚àÉ U (f : U ‚ü∂ X), R f ‚àß x ‚àà U,
  has_isos := Œª X Y f i x hx,
        by exactI ‚ü®_, _, arrows_with_codomain.singleton_arrow_self _, le_of_hom (inv f) hx‚ü©,
  pullbacks := Œª X Y f S hS x hx,
  begin
    rcases hS _ (le_of_hom f hx) with ‚ü®U, g, hg, hU‚ü©,
    refine ‚ü®_, _, ‚ü®_, _, hg, rfl, rfl‚ü©, _‚ü©,
    have : U ‚äì Y ‚â§ pullback g f,
      refine le_of_hom (pullback.lift (hom_of_le inf_le_left) (hom_of_le inf_le_right) rfl),
    apply this ‚ü®hU, hx‚ü©,
  end,
  transitive := Œª X S Ti hS hTi x hx,
  begin
    rcases hS x hx with ‚ü®U, f, hf, hU‚ü©,
    rcases hTi f hf x hU with ‚ü®V, g, hg, hV‚ü©,
    exact ‚ü®_, _, ‚ü®_, g, f, hf, hg, rfl‚ü©, hV‚ü©,
  end }

/--
The pretopology associated to a space induces the Grothdendieck topology associated to the space.
-/
lemma same_topology : pretopology.to_grothendieck _ (associated_p T) = associated T :=
begin
  apply le_antisymm,
  { rintro X S ‚ü®R, hR, RS‚ü© x hx,
    rcases hR x hx with ‚ü®U, f, hf, hU‚ü©,
    exact ‚ü®_, f, RS _ hf, hU‚ü© },
  { intros X S hS,
    exact ‚ü®S, hS, le_refl _‚ü© }
end

end category_theory
