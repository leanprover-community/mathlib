/-
Copyright (c) 2020 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

import category_theory.sites.canonical
import category_theory.sites.sheaf

/-!
# Grothendieck Topology and Sheaves on the Category of Types

In this file we define a grothendieck topology on the category of types,
and construct the canonical function that sends a type to a sheaf over
the category of types.
-/

universe u

namespace category_theory

/-- A Grothendieck topology associated to the category of all types.
A sieve is a covering iff it is jointly surjective. -/
def types_grothendieck_topology : grothendieck_topology (Type u) :=
{ sieves := Œª Œ± S, ‚àÄ x : Œ±, S (Œª _ : punit, x),
  top_mem' := Œª Œ± x, trivial,
  pullback_stable' := Œª Œ± Œ≤ S f hs x, hs (f x),
  transitive' := Œª Œ± S hs R hr x, hr (hs x) punit.star }

/-- The discrete sieve on a type, which only includes arrows whose image is a subsingleton. -/
def discrete_sieve (Œ± : Type u) : sieve Œ± :=
{ arrows := Œª Œ≤ f, ‚àÉ x, ‚àÄ y, f y = x,
  downward_closed' := Œª Œ≤ Œ≥ f ‚ü®x, hx‚ü© g, ‚ü®x, Œª y, hx $ g y‚ü© }

lemma discrete_sieve_mem (Œ± : Type u) : discrete_sieve Œ± ‚àà types_grothendieck_topology Œ± :=
Œª x, ‚ü®x, Œª y, rfl‚ü©

/-- The discrete presieve on a type, which only includes arrows whose domain is a singleton. -/
def discrete_presieve (Œ± : Type u) : presieve Œ± :=
Œª Œ≤ f, ‚àÉ x : Œ≤, ‚àÄ y : Œ≤, y = x

lemma generate_discrete_presieve_mem (Œ± : Type u) :
  sieve.generate (discrete_presieve Œ±) ‚àà types_grothendieck_topology Œ± :=
Œª x, ‚ü®punit, id, Œª _, x, ‚ü®punit.star, Œª _, subsingleton.elim _ _‚ü©, rfl‚ü©

namespace presieve

theorem is_sheaf_yoneda' {Œ± : Type u} : is_sheaf types_grothendieck_topology (yoneda.obj Œ±) :=
Œª Œ≤ S hs x hx, ‚ü®Œª y, x _ (hs y) punit.star,
Œª Œ≥ f h, funext $ Œª z : Œ≥,
  have _ := congr_fun (hx (ùüô _) (Œª _ : punit, z) (hs $ f z) h rfl) punit.star,
  by { convert this, exact rfl },
Œª (f : Œ≤ ‚Üí Œ±) hf, funext $ Œª y : Œ≤, have _ := congr_fun (hf _ (hs y)) punit.star, by convert this‚ü©

open opposite

/-- Given a presheaf `P` on the category of types, construct
a map `P(Œ±) ‚Üí (Œ± ‚Üí P(*))` for all type `Œ±`. -/
def eval (P : (Type u)·µí·µñ ‚•§ Type u) (Œ± : Type u) (s : P.obj (op Œ±)) (x : Œ±) : P.obj (op punit) :=
P.map (has_hom.hom.op (Œª _, x : punit ‚ü∂ Œ±)) s

/-- Given a sheaf `S` on the category of types, construct a map
`(Œ± ‚Üí P(*)) ‚Üí P(Œ±)` that is inverse to `eval`. -/
noncomputable def types_glue (P : (Type u)·µí·µñ ‚•§ Type u)
  (hp : is_sheaf types_grothendieck_topology P)
  (Œ± : Type u) (f : Œ± ‚Üí P.obj (op punit)) : P.obj (op Œ±) :=
(hp.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ±)).amalgamate
  (Œª Œ≤ g hg, P.map (has_hom.hom.op $ Œª x, punit.star) $ f $ g $ classical.some hg)
  (Œª Œ≤ Œ≥ Œ¥ g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ h,
    (hp.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ¥)).is_separated_for.ext $
    Œª Œµ g ‚ü®x, hx‚ü©, have f‚ÇÅ (classical.some hf‚ÇÅ) = f‚ÇÇ (classical.some hf‚ÇÇ),
      from classical.some_spec hf‚ÇÅ (g‚ÇÅ $ g x) ‚ñ∏ classical.some_spec hf‚ÇÇ (g‚ÇÇ $ g x) ‚ñ∏ congr_fun h _,
      by { dsimp only, simp_rw [‚Üê functor_to_types.map_comp_apply, this, ‚Üê op_comp], refl })

lemma eval_types_glue {P hp Œ±} (f) : eval.{u} P Œ± (types_glue P hp Œ± f) = f :=
funext $ Œª x, (is_sheaf_for.valid_glue _ _ _ $
  by exact ‚ü®punit.star, Œª _, subsingleton.elim _ _‚ü©).trans $
by { convert functor_to_types.map_id_apply _ _, rw ‚Üê op_id, congr }

lemma types_glue_eval {P hp Œ±} (s) : types_glue.{u} P hp Œ± (eval P Œ± s) = s :=
(hp.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ±)).is_separated_for.ext $ Œª Œ≤ f hf,
(is_sheaf_for.valid_glue _ _ _ hf).trans $ (functor_to_types.map_comp_apply _ _ _ _).symm.trans $
by { rw ‚Üê op_comp, congr' 2, exact funext (Œª x, congr_arg f (classical.some_spec hf x).symm) }

/-- Given a sheaf `S`, construct an equivalence `P(Œ±) ‚âÉ (Œ± ‚Üí P(*))`. -/
noncomputable def eval_equiv (P : (Type u)·µí·µñ ‚•§ Type u)
  (hp : is_sheaf types_grothendieck_topology P)
  (Œ± : Type u) : P.obj (op Œ±) ‚âÉ (Œ± ‚Üí P.obj (op punit)) :=
{ to_fun := eval P Œ±,
  inv_fun := types_glue P hp Œ±,
  left_inv := types_glue_eval,
  right_inv := eval_types_glue }

end presieve

lemma subcanonical_types_grothendieck_topology :
  sheaf.subcanonical types_grothendieck_topology.{u} :=
sheaf.le_finest_topology _ _ $ Œª P ‚ü®Œ±, hŒ±‚ü©, hŒ± ‚ñ∏ presieve.is_sheaf_yoneda'

end category_theory
