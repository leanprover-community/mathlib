/-
Copyright (c) 2022 R√©mi Bottinelli. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©mi Bottinelli
-/
import category_theory.filtered
import data.set.finite

/-!
# Mittag Leffler

This files defines the Mittag-Leffler condition for cofiltered systems and (TODO) other properties
of such systems and their sections.

## Main definitions

Given the functor `F : J ‚•§ Type v`:

* For `j : J`, `F.eventual_range j` is the intersections of all ranges of morphisms `F.map f`
  where `f` has codomain `j`.
* `is_mittag_leffler` states that the functor `F : J ‚Üí Type v`, satisfies the Mittag-Leffler
  condition: the ranges of morphisms `F.map f` (with `f` having codomain `j`) stabilize.
* If `J` is cofiltered `F.to_eventual_ranges` is the subfunctor of `F` obtained by restriction
  to `F.eventual_range`.


## Main statements

* `is_mittag_leffler_of_exists_finite_range` shows that if `J` is cofiltered and for all `j`,
  there exists some `i` and `f : i ‚ü∂ j` such that the range of `F.map f` is finite, then
  `F` is Mittag-Leffler.
* `to_eventual_ranges_surjective` shows that if `F` is Mittag-Leffler, then `F.to_eventual_ranges`
  has all morphisms `F.map f` surjective.

## Todo

* Specialize to inverse systems and fintype systems.
* Prove [Stacks: Lemma 0597](https://stacks.math.columbia.edu/tag/0597)

## References

* [Stacks: Mittag-Leffler systems](https://stacks.math.columbia.edu/tag/0594)

## Tags

Mittag-Leffler, surjective, eventual range, inverse system,

-/

universes u v w

namespace category_theory
namespace functor

variables {J : Type u} [category J] (F : J ‚•§ Type v)

/--
The eventual range of the functor `F : J ‚•§ Type v` at index `j : J` is the intersection
of the ranges of all maps `F.map f` with `i : J` and `f : i ‚ü∂ j`.
-/
def eventual_range (j : J) := ‚ãÇ (i : J) (f : i ‚ü∂ j), set.range (F.map f)

/--
The functor `F : J ‚•§ Type v` satisfies the Mittag-Leffler condition if for all `j : J`,
there exists some `i : J` and `f : i ‚ü∂ j` such that for all `k : J` and `g : k ‚ü∂ j`, the range
of `F.map f` is contained in that of `F.map g`;
in other words (see `is_mittag_leffler_iff_eventual_range`), the eventual range at `j` is attained
by some `f : i ‚ü∂ j`.
-/
def is_mittag_leffler :=
‚àÄ (j : J), ‚àÉ (i) (f : i ‚ü∂ j), ‚àÄ (k) (g : k ‚ü∂ j), set.range (F.map f) ‚äÜ set.range (F.map g)

lemma is_mittag_leffler_iff_eventual_range :
  F.is_mittag_leffler ‚Üî ‚àÄ (j : J), ‚àÉ (i) (f : i ‚ü∂ j), F.eventual_range j = set.range (F.map f) :=
begin
  refine forall_congr (Œª j, exists_congr $ Œª i, exists_congr $ Œª f, _),
  split,
  { rintro h, apply subset_antisymm,
    { apply set.Inter‚ÇÇ_subset, },
    { apply set.subset_Inter‚ÇÇ,
      exact Œª k g, h k g, }, },
  { rintro h k g, rw h.symm,
    apply set.Inter‚ÇÇ_subset, },
end

lemma eventual_range_eq_range_precomp
  {i j k : J} (f : i ‚ü∂ j) (g : j ‚ü∂ k) (h : F.eventual_range k = set.range (F.map g)) :
  F.eventual_range k = (set.range (F.map $ f ‚â´ g)) :=
begin
  apply subset_antisymm,
  { apply set.Inter‚ÇÇ_subset, },
  { simp only [h, types_comp, functor.map_comp], apply set.range_comp_subset_range, }
end

lemma is_mittag_leffler_of_surjective
  (h : (‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).surjective)) : F.is_mittag_leffler :=
begin
  refine Œª j, ‚ü®j, ùüô j, Œª k g, subset_of_eq _‚ü©,
  simp only [map_id, types_id, set.range_id],
  exact (set.range_iff_surjective.mpr $ h k j g).symm,
end

variables [is_cofiltered J]

lemma is_mittag_leffler_of_exists_finite_range
  (h : ‚àÄ (j : J), ‚àÉ i (f : i ‚ü∂ j), (set.range (F.map f)).finite ) :
  F.is_mittag_leffler :=
begin
  rintro j,
  suffices : ‚àÉ (f : Œ£' i, i ‚ü∂ j), ‚àÄ (f' : Œ£' i, i ‚ü∂ j),
               set.range (F.map f'.2) ‚â§ set.range (F.map f.2) ‚Üí
                 set.range (F.map f'.2) = set.range (F.map f.2),
  { obtain ‚ü®‚ü®i, f‚ü©, fmin‚ü© := this,
    refine ‚ü®i, f, Œª i' f', _‚ü©,
    refine min_of_ge_directed_on (is_cofiltered.ranges_directed F j)
                                          _ ‚ü®‚ü®i, f‚ü©, rfl‚ü© _ _ ‚ü®‚ü®i', f'‚ü©, rfl‚ü©,
    simp only [set.mem_range, psigma.exists, forall_exists_index],
    rintro _ k g rfl gf,
    exact fmin ‚ü®k, g‚ü© gf, },

  let fins := subtype { f : Œ£' i, i ‚ü∂ j | (set.range (F.map f.2)).finite },
  haveI : nonempty fins := by { obtain ‚ü®i, f, fin‚ü© := h j, exact ‚ü®‚ü®‚ü®i, f‚ü©, fin‚ü©‚ü©, },
  let fmin := function.argmin (Œª (f : fins), f.prop.to_finset.card) nat.lt_wf,
  use fmin.val,
  rintro g gf,
  cases lt_or_eq_of_le gf with h',
  { have gfin : (set.range (F.map g.2)).finite := fmin.prop.subset gf,
    refine ((Œª (f : fins), f.prop.to_finset.card).not_lt_argmin nat.lt_wf ‚ü®g, gfin‚ü© _).elim,
    exact finset.card_lt_card (set.finite.to_finset_ssubset.mpr h'), },
  { assumption, },
end

/--
The subfunctor of `F` obtained by restricting to the eventual range at each index.
-/
def to_eventual_ranges : J ‚•§ Type v :=
{ obj := Œª j, F.eventual_range j,
  map := Œª i j f, set.maps_to.restrict (F.map f) _ _ (
    begin
      rintro x h,
      simp only [eventual_range, set.mem_Inter, set.mem_range] at h ‚ä¢,
      rintro i' f',
      obtain ‚ü®l, g, g', e‚ü© := category_theory.is_cofiltered.cone_over_cospan f f',
      obtain ‚ü®z, rfl‚ü© := h l g,
      use F.map g' z,
      replace e := congr_fun (congr_arg F.map e) z,
      simp_rw functor_to_types.map_comp_apply at e,
      exact e.symm,
    end ),
 map_id' := Œª i, by {simp only [map_id], apply subtype.map_id, },
 map_comp' := Œª _ _ _ _ _, by {funext, simp only [map_comp], symmetry, apply subtype.map_comp, } }


/--
The sections of the functor `F : J ‚•§ Type v` are in bijection with the sections of
`F.eventual_ranges`.
-/
def to_eventual_ranges_sections_equiv :
  F.to_eventual_ranges.sections ‚âÉ F.sections :=
{ to_fun := Œª ss,
    ‚ü® Œª j, (ss.val j).val,
      Œª i j f, by simpa only [‚Üêsubtype.coe_inj, subtype.coe_mk] using ss.prop f ‚ü©,
  inv_fun := Œª s,
    ‚ü® Œª j,
      ‚ü® s.val j, by
        { dsimp [eventual_range],
          simp only [set.mem_Inter, set.mem_range],
          exact Œª i f, ‚ü®s.val i, s.prop f‚ü©, } ‚ü©,
      Œª i j ij, subtype.mk_eq_mk.mpr (s.prop ij)‚ü©,
  left_inv := by
    simp only [function.right_inverse, function.left_inverse, subtype.val_eq_coe, set_coe.forall,
               subtype.coe_mk, subtype.coe_eta, eq_self_iff_true, implies_true_iff],
  right_inv := by
    simp only [function.left_inverse, function.right_inverse, eq_self_iff_true, set_coe.forall,
               implies_true_iff, subtype.coe_mk] }

/--
If `F` satisfies the Mittag-Leffler condition, its restriction to eventual ranges is a surjective
functor.
-/
lemma to_eventual_ranges_surjective (ml : F.is_mittag_leffler) :
  ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.to_eventual_ranges.map f).surjective :=
begin
  rintros i j f ‚ü®x, hx‚ü©,
  rw is_mittag_leffler_iff_eventual_range at ml,
  dsimp only [to_eventual_ranges],
  simp only [set_coe.exists],
  obtain ‚ü®i‚ÇÄ, ii‚ÇÄ, ei‚ÇÄ‚ü© := ml i,
  obtain ‚ü®j‚ÇÄ, jj‚ÇÄ, ej‚ÇÄ‚ü© := ml j,
  obtain ‚ü®k, ki‚ÇÄ, kj‚ÇÄ, e‚ü© := category_theory.is_cofiltered.cone_over_cospan (ii‚ÇÄ ‚â´ f) jj‚ÇÄ,
  let ei := F.eventual_range_eq_range_precomp ki‚ÇÄ ii‚ÇÄ ei‚ÇÄ,
  let ej := F.eventual_range_eq_range_precomp kj‚ÇÄ jj‚ÇÄ ej‚ÇÄ,
  obtain ‚ü®z, rfl‚ü© := ej.rec_on hx,
  use F.map (ki‚ÇÄ ‚â´ ii‚ÇÄ) z,
  simp_rw [ei, set.mem_range_self, exists_true_left, ‚Üêe, functor_to_types.map_comp_apply],
  refl,
end

/-- If `F` has all arrows surjective, then it "factors through a poset". -/
lemma thin_diagram_of_surjective (Fsur : ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).surjective) :
  ‚àÄ i j (f g : i ‚ü∂ j), F.map f = F.map g :=
begin
  rintro i j f g,
  let œÜ := is_cofiltered.eq_hom f g,
  suffices : F.map œÜ ‚â´ F.map f = F.map œÜ ‚â´ F.map g,
  { let œÜs := Fsur _ _ œÜ,
    rw ‚Üêcategory_theory.epi_iff_surjective at œÜs,
    exact œÜs.left_cancellation _ _ this, },
  simp_rw [‚Üêmap_comp, is_cofiltered.eq_condition],
end

/-- If `F` is nonempty at each index and Mittag-Leffler, then so is `F.to_eventual_ranges`. -/
lemma to_eventual_ranges_nonempty (ml : F.is_mittag_leffler) [‚àÄ (j : J), nonempty (F.obj j)] :
  ‚àÄ (j : J), nonempty (F.to_eventual_ranges.obj j) :=
begin
  intro j,
  rw is_mittag_leffler_iff_eventual_range at ml,
  obtain ‚ü®i,f,h‚ü© := ml j,
  dsimp [to_eventual_ranges], rw h,
  apply set.nonempty.to_subtype,
  apply set.range_nonempty,
end

end functor
end category_theory
