import category_theory.types
import category_theory.comma
import category_theory.equivalence
import category_theory.punit
import category_theory.eq_to_hom

namespace category_theory

universes v u
variables {C : Type u} [ùíû : category.{v} C]
include ùíû

def category_of_elements (F : C ‚•§ Type u) : category (Œ£ c : C, F.obj c) :=
{ hom := Œª p q, { f : p.1 ‚ü∂ q.1 // (F.map f) p.2 = q.2 },
  id := Œª p, ‚ü® ùüô p.1, by obviously ‚ü©,
  comp := Œª p q r f g, ‚ü® f.val ‚â´ g.val, by obviously ‚ü© }

namespace category_of_elements
local attribute [instance] category_of_elements
variable (F : C ‚•§ Type u)

def œÄ : (Œ£ c : C, F.obj c) ‚•§ C :=
{ obj := Œª X, X.1,
  map := Œª X Y f, f.val }

def to_comma : (Œ£ c : C, F.obj c) ‚•§ comma (functor.of.obj punit) F :=
{ obj := Œª X, { left := punit.star, right := X.1, hom := Œª _, X.2 },
  map := Œª X Y f, { right := f.val, } }

def from_comma : comma (functor.of.obj punit) F ‚•§ (Œ£ c : C, F.obj c) :=
{ obj := Œª X, ‚ü®X.right, X.hom (punit.star)‚ü©,
  map := Œª X Y f, ‚ü®f.right, congr_fun f.w'.symm punit.star‚ü© }

section
local attribute [simp] to_comma from_comma

def comma_equivalence : (Œ£ c : C, F.obj c) ‚âå comma (functor.of.obj punit) F :=
{ functor := to_comma F,
  inverse := from_comma F,
  fun_inv_id' := nat_iso.of_components (Œª X, eq_to_iso (by tidy)) (by tidy),
  inv_fun_id' := nat_iso.of_components
    (Œª X, { hom := begin tidy, exact ùüô _, simp, end, inv := begin tidy, exact ùüô _, simp, end })
    (by tidy) }
end

end category_of_elements
end category_theory
