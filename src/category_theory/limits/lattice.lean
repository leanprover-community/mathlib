/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.limits.shapes.finite_limits
import order.complete_lattice

universes u

open category_theory

namespace category_theory.limits

variables {Œ± : Type u}

@[priority 100] -- see Note [lower instance priority]
instance has_finite_limits_of_semilattice_inf_top [semilattice_inf_top Œ±] :
  has_finite_limits Œ± :=
Œª J ùí•‚ÇÅ ùí•‚ÇÇ, by exactI
  { has_limit := Œª F, has_limit.mk
    { cone :=
      { X := finset.univ.inf F.obj,
        œÄ := { app := Œª j, hom_of_le (finset.inf_le (fintype.complete _)) } },
      is_limit := { lift := Œª s, hom_of_le (finset.le_inf (Œª j _, (s.œÄ.app j).down.down)) } } }

@[priority 100] -- see Note [lower instance priority]
instance has_finite_colimits_of_semilattice_sup_bot [semilattice_sup_bot Œ±] :
  has_finite_colimits Œ± :=
Œª J ùí•‚ÇÅ ùí•‚ÇÇ, by exactI
  { has_colimit := Œª F, has_colimit.mk
    { cocone :=
      { X := finset.univ.sup F.obj,
        Œπ := { app := Œª i, hom_of_le (finset.le_sup (fintype.complete _)) } },
      is_colimit := { desc := Œª s, hom_of_le (finset.sup_le (Œª j _, (s.Œπ.app j).down.down)) } } }

-- It would be nice to only use the `Inf` half of the complete lattice, but
-- this seems not to have been described separately.
@[priority 100] -- see Note [lower instance priority]
instance has_limits_of_complete_lattice [complete_lattice Œ±] : has_limits Œ± :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F, has_limit.mk
    { cone :=
      { X := Inf (set.range F.obj),
        œÄ :=
        { app := Œª j, hom_of_le (complete_lattice.Inf_le _ _ (set.mem_range_self _)) } },
      is_limit :=
      { lift := Œª s, hom_of_le (complete_lattice.le_Inf _ _
        begin rintros _ ‚ü®j, rfl‚ü©, exact le_of_hom (s.œÄ.app j), end) } } } }

@[priority 100] -- see Note [lower instance priority]
instance has_colimits_of_complete_lattice [complete_lattice Œ±] : has_colimits Œ± :=
{ has_colimits_of_shape := Œª J ùí•, by exactI
  { has_colimit := Œª F, has_colimit.mk
    { cocone :=
      { X := Sup (set.range F.obj),
        Œπ :=
        { app := Œª j, hom_of_le (complete_lattice.le_Sup _ _ (set.mem_range_self _)) } },
      is_colimit :=
      { desc := Œª s, hom_of_le (complete_lattice.Sup_le _ _
        begin rintros _ ‚ü®j, rfl‚ü©, exact le_of_hom (s.Œπ.app j), end) } } } }

end category_theory.limits
