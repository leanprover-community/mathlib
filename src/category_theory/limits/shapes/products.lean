-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.limits.limits
import category_theory.discrete_category

open category_theory

namespace category_theory.limits

universes v u

variables {Œ≤ : Type v}
variables {C : Sort u} [ùíû : category.{v+1} C]
include ùíû

-- We don't need an analogue of `pair` (for binary products), `parallel_pair` (for equalizers),
-- or `(co)span`, since we already have `functor.of_function`.

def fan (f : Œ≤ ‚Üí C) := cone (functor.of_function f)

def fan.of_function {f : Œ≤ ‚Üí C} {P : C} (p : Œ† b, P ‚ü∂ f b) : fan f :=
{ X := P,
  œÄ := { app := p } }

def cone.of_fan {Œ≤ : Type v} {F : (discrete Œ≤) ‚•§ C} (t : fan (F.obj)) : cone F :=
{ X := t.X,
  œÄ := { app := t.œÄ.app } }

def fan.of_cone {Œ≤ : Type v} {F : (discrete Œ≤) ‚•§ C} (t : cone F) : fan (F.obj) :=
{ X := t.X,
  œÄ := { app := t.œÄ.app } }

def fan.œÄ {f : Œ≤ ‚Üí C} (t : fan f) (b : Œ≤) : t.X ‚ü∂ f b := t.œÄ.app b

def cofan (f : Œ≤ ‚Üí C) := cocone (functor.of_function f)

def cofan.of_function {f : Œ≤ ‚Üí C} {P : C} (p : Œ† b, f b ‚ü∂ P) : cofan f :=
{ X := P,
  Œπ := { app := p } }

def cocone.of_cofan {Œ≤ : Type v} {F : (discrete Œ≤) ‚•§ C} (t : cofan (F.obj)) : cocone F :=
{ X := t.X,
  Œπ := { app := t.Œπ.app } }

def cofan.of_cocone {Œ≤ : Type v} {F : (discrete Œ≤) ‚•§ C} (t : cocone F) : cofan (F.obj) :=
{ X := t.X,
  Œπ := { app := t.Œπ.app } }

def cofan.Œπ {f : Œ≤ ‚Üí C} (t : cofan f) (b : Œ≤) : f b ‚ü∂ t.X := t.Œπ.app b

end category_theory.limits
