/-
-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison
-/

import category_theory.limits.shapes.products
import category_theory.limits.shapes.equalizers

/-!
# Constructing limits from products and equalizers.

If a category has all products, and all equalizers, then it has all limits.

TODO: provide the dual result.
-/

open category_theory
open opposite

namespace category_theory.limits

universes v u
variables {C : Type u} [ùíû : category.{v} C]
include ùíû

@[simp] def equalizer_diagram [has_products.{v} C] {J} [small_category J] (F : J ‚•§ C) : walking_parallel_pair ‚•§ C :=
let pi_obj := limits.pi_obj F.obj in
let pi_hom := limits.pi_obj (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), F.obj f.1.2) in
let s : pi_obj ‚ü∂ pi_hom :=
  pi.lift (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), pi.œÄ F.obj f.1.1 ‚â´ F.map f.2) in
let t : pi_obj ‚ü∂ pi_hom :=
  pi.lift (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), pi.œÄ F.obj f.1.2) in
parallel_pair s t

@[simp] def equalizer_diagram.cones_hom [has_products.{v} C] {J} [small_category J] (F : J ‚•§ C) :
  (equalizer_diagram F).cones ‚ü∂ F.cones :=
{ app := Œª X c,
  { app := Œª j, c.app walking_parallel_pair.zero ‚â´ pi.œÄ _ j,
    naturality' := Œª j j' f,
    begin
      have L := c.naturality walking_parallel_pair_hom.left,
      have R := c.naturality walking_parallel_pair_hom.right,
      have t := congr_arg (Œª g, g ‚â´ pi.œÄ _ (‚ü®(j, j'), f‚ü© : Œ£ (p : J √ó J), p.fst ‚ü∂ p.snd)) (R.symm.trans L),
      dsimp at t,
      dsimp,
      simpa only [limit.lift_œÄ, fan.mk_œÄ_app, category.assoc, category.id_comp] using t,
    end }, }.

@[simp] def equalizer_diagram.cones_inv [has_products.{v} C] {J} [small_category J] (F : J ‚•§ C) :
  F.cones ‚ü∂ (equalizer_diagram F).cones :=
{ app := Œª X c,
  begin
    refine (fork.of_Œπ _ _).œÄ,
    { exact pi.lift c.app },
    { ext f,
      rcases f with ‚ü®‚ü®A,B‚ü©,f‚ü©,
      dsimp,
      simp only [limit.lift_œÄ, limit.lift_œÄ_assoc, fan.mk_œÄ_app, category.assoc],
      rw ‚Üê(c.naturality f),
      dsimp,
      simp only [category.id_comp], }
  end,
  naturality' := Œª X Y f, by { ext c j, cases j; tidy, } }.

def equalizer_diagram.cones_iso [has_products.{v} C] {J} [small_category J] (F : J ‚•§ C) :
  (equalizer_diagram F).cones ‚âÖ F.cones :=
{ hom := equalizer_diagram.cones_hom F,
  inv := equalizer_diagram.cones_inv F,
  hom_inv_id' :=
  begin
    ext X c j,
    cases j,
    { ext, simp },
    { ext,
      have t := c.naturality walking_parallel_pair_hom.left,
      conv at t { dsimp, to_lhs, simp only [category.id_comp] },
      simp [t], }
  end }

instance has_limit_of_has_products_of_has_equalizers [has_products.{v} C] [has_equalizers.{v} C] {J} [small_category J] (F : J ‚•§ C) :
  has_limit.{v} F :=
has_limit.of_cones_iso (equalizer_diagram F) F (equalizer_diagram.cones_iso F)

def limits_from_equalizers_and_products
  [has_products.{v} C] [has_equalizers.{v} C] : has_limits.{v} C :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F, by apply_instance } }

end category_theory.limits
