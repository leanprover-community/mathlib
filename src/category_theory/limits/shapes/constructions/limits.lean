/-
-- Copyright (c) 2017 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison
-/

import category_theory.limits.shapes.products
import category_theory.limits.shapes.equalizers

/-!
# Constructing limits from products and equalizers.

If a category has all products, and all equalizers, then it has all limits.

TODO: provide the dual result.
-/

open category_theory

namespace category_theory.limits

universes v u
variables {C : Type u} [ùíû : category.{v+1} C]
include ùíû

def limits_from_equalizers_and_products
  [has_products.{v} C] [has_equalizers.{v} C] : has_limits.{v} C :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F,
{ cone :=
  begin
    let Œ≤_obj := (Œª j : J, F.obj j),
    let Œ≤_hom := (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), F.obj f.1.2),
    let pi_obj := limits.pi_obj Œ≤_obj,
    let pi_hom := limits.pi_obj Œ≤_hom,
    let s : pi_obj ‚ü∂ pi_hom :=
      pi.lift (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), pi.œÄ Œ≤_obj f.1.1 ‚â´ F.map f.2),
    let t : pi_obj ‚ü∂ pi_hom :=
      pi.lift (Œª f : (Œ£ p : J √ó J, p.1 ‚ü∂ p.2), pi.œÄ Œ≤_obj f.1.2),
    exact
    { X := equalizer s t,
      œÄ :=
      { app := Œª j, equalizer.Œπ s t ‚â´ pi.œÄ Œ≤_obj j,
        naturality' := Œª j j' f,
        begin
          rw category.assoc,
          have p := congr_arg (Œª œÜ, œÜ ‚â´ pi.œÄ Œ≤_hom ‚ü® ‚ü® j, j' ‚ü©, f ‚ü©) (equalizer.w s t),
          -- TODO cleanup
          dsimp at p,
          simp,
          erw category.id_comp,
          erw category.assoc at p,
          simp at p,
          exact (eq.symm p)
        end } }
  end,
  is_limit :=
  { lift := Œª c,
        equalizer.lift _ _
          (pi.lift (Œª j : J, begin have r := c.œÄ.app j, dsimp at r, exact r end))
          (begin ext1, dsimp, simp, end),
      uniq' := begin tidy, end }
} } }

end category_theory.limits
