/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Bhavik Mehta
-/
import category_theory.limits.limits
import category_theory.limits.functor_category

/-!
# The colimit of `coyoneda.obj X` is `punit`

We calculate the colimit of `Y ‚Ü¶ (X ‚ü∂ Y)`, which is just `punit`.

(This is used later in characterising cofinal functors.)
-/

open opposite
open category_theory
open category_theory.limits

universes v u

namespace category_theory

namespace coyoneda
variables {C : Type v} [small_category.{v} C]

/--
The colimit cocone over `coyoneda.obj X`, with cocone point `punit`.
-/
@[simps]
def colimit_cocone (X : C·µí·µñ) : cocone (coyoneda.obj X) :=
{ X := punit,
  Œπ := { app := by tidy, } }

/--
The proposed colimit cocone over `coyoneda.obj X` is a colimit cocone.
-/
@[simps]
def colimit_cocone_is_colimit (X : C·µí·µñ) : is_colimit (colimit_cocone X) :=
{ desc := Œª s x, s.Œπ.app (unop X) (ùüô _),
  fac' := Œª s Y, by { ext f, convert congr_fun (s.w f).symm (ùüô (unop X)), simp, },
  uniq' := Œª s m w, by { ext ‚ü®‚ü©, rw ‚Üê w, simp, } }

instance (X : C·µí·µñ) : has_colimit (coyoneda.obj X) :=
has_colimit.mk { cocone := _, is_colimit := colimit_cocone_is_colimit X }

/--
The colimit of `coyoneda.obj X` is isomorphic to `punit`.
-/
noncomputable
def colimit_coyoneda_iso (X : C·µí·µñ) : colimit (coyoneda.obj X) ‚âÖ punit :=
colimit.iso_colimit_cocone { cocone := _, is_colimit := colimit_cocone_is_colimit X }

end coyoneda

variables {C : Type u} [category.{v} C]

open limits

/-- The yoneda embedding `yoneda.obj X : C·µí·µñ ‚•§ Type v` for `X : C` preserves limits. -/
instance yoneda_preserves_limits (X : C) : preserves_limits (yoneda.obj X) :=
{ preserves_limits_of_shape := Œª J ùí•, by exactI
  { preserves_limit := Œª K,
    { preserves := Œª c t,
      { lift := Œª s x, has_hom.hom.unop (t.lift ‚ü®op X, Œª j, (s.œÄ.app j x).op, Œª j‚ÇÅ j‚ÇÇ Œ±, _‚ü©),
        fac' := Œª s j, funext $ Œª x, has_hom.hom.op_inj (t.fac _ _),
        uniq' := Œª s m w, funext $ Œª x,
        begin
          refine has_hom.hom.op_inj (t.uniq ‚ü®op X, _, _‚ü© _ (Œª j, _)),
          { dsimp, simp [‚Üê s.w Œ±] }, -- See library note [dsimp, simp]
          { exact has_hom.hom.unop_inj (congr_fun (w j) x) },
        end } } } }

/-- The coyoneda embedding `coyoneda.obj X : C ‚•§ Type v` for `X : C·µí·µñ` preserves limits. -/
instance coyoneda_preserves_limits (X : C·µí·µñ) : preserves_limits (coyoneda.obj X) :=
{ preserves_limits_of_shape := Œª J ùí•, by exactI
  { preserves_limit := Œª K,
    { preserves := Œª c t,
      { lift := Œª s x, t.lift ‚ü®unop X, Œª j, s.œÄ.app j x, Œª j‚ÇÅ j‚ÇÇ Œ±, by { dsimp, simp [‚Üê s.w Œ±]}‚ü©,
          -- See library note [dsimp, simp]
        fac' := Œª s j, funext $ Œª x, t.fac _ _,
        uniq' := Œª s m w, funext $ Œª x,
        begin
          refine (t.uniq ‚ü®unop X, _‚ü© _ (Œª j, _)),
          exact congr_fun (w j) x,
        end } } } }

end category_theory
