import category_theory.limits.preserves.basic
import category_theory.limits.shapes.finite_limits
import category_theory.limits.functor_category
import category_theory.filtered
import category_theory.full_subcategory

namespace category_theory

universes w v u‚ÇÅ u‚ÇÇ

variables {J : Type v} [small_category J]
variables {C : Type u‚ÇÅ} [category.{v} C]
variables {D : Type u‚ÇÇ} [category.{v} D]

namespace limits

class preserves_filtered_colimits (F : C ‚•§ D) : Type (max u‚ÇÅ u‚ÇÇ (v+1)) :=
(preserves_colimits_of_shape : Œ† {J : Type v} [ùí• : small_category J] [is_filtered J],
  by exactI preserves_colimits_of_shape J F)

variables (C D)

def PreservesFilteredColimits := Œ£ F : C ‚•§ D, preserves_filtered_colimits F

instance : category.{max u‚ÇÅ v} (PreservesFilteredColimits C D) :=
induced_category.category (Œª F, F.1)

namespace PreservesFilteredColimits

@[derive [full, faithful]]
def forget : PreservesFilteredColimits C D ‚•§ (C ‚•§ D) :=
induced_functor _

def small_ulift (J : Type v) := ulift.{w} J
instance (J : Type v) [small_category J] : small_category (small_ulift.{w} J) :=
{ hom  := Œª X Y, ulift (X.down ‚ü∂ Y.down),
  id   := Œª X, ulift.up (ùüô X.down),
  comp := Œª _ _ _ f g, ulift.up (f.down ‚â´ g.down) }

def down (J : Type v) [small_category J] : small_ulift.{w} J ‚•§ J :=
{ obj := Œª X, X.down,
  map := Œª X Y f, f.down, }

variables {C' : Type (u‚ÇÅ+1)} [large_category C']
variables {D' : Type (u‚ÇÅ+1)} [large_category D']
variables {J' : Type (u‚ÇÅ+1)} [small_category J']

variables [has_limits D']
-- example : has_limits (C ‚•§ D) := by apply_instance


example (F : J' ‚•§ (C' ‚•§ D')) : has_limit F := by apply_instance

instance : has_finite_limits (PreservesFilteredColimits C D) :=
Œª J ùí• ‚Ñ±, by exactI
{ has_limit := Œª F,
  { cone :=
    { X := ‚ü®limit (F ‚ãô forget C D), sorry‚ü©,
      œÄ := sorry, },
    is_limit := sorry, } }

-- TODO forget preserves finite limits

end PreservesFilteredColimits

end limits

end category_theory
