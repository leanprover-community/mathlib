/-
Copyright (c) 2020 David W√§rn. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David W√§rn
-/

import category_theory.groupoid
import category_theory.endomorphism
import group_theory.group_action
import category_theory.single_obj

/-!
# The action category and the action groupoid.

Defines the action category associated with a multiplicative action
and the action groupoid associated with a group action.
-/

open mul_action
namespace category_theory

variables (M : Type*) [monoid M] (X : Type*) [ùíú : mul_action M X] (x : X)
include ùíú

/-- A multiplicative action of `M` on `X` induces a category structure on `X` where
  a morphism `x ‚ü∂ y` is a scalar `m : M` such that `m ‚Ä¢ x = y`. To prevent conflicts,
  the object type of this category is an inductive type wrapping `X`. -/
structure action_category := (as : X)

namespace action_category

instance [inhabited X] : inhabited (action_category M X) := ‚ü®{as := default X}‚ü©

@[simps]
instance : category (action_category M X) :=
{ hom := Œª x y, {m : M // m ‚Ä¢ x.as = y.as },
  id := Œª x, ‚ü®1, mul_action.one_smul _ x.as‚ü©,
  comp := Œª x y z f g, ‚ü®g.val * f.val, by rw [‚Üêsmul_smul, f.2, g.2] ‚ü©,
  assoc' := Œª x y z w f g h, by simp only [mul_assoc] }

/-- The functor from the action category to the single object category,
  mapping a morphism to its label. -/
def projection : action_category M X ‚•§ single_obj M :=
{ obj := Œª _, single_obj.star M,
  map := Œª _ _ f, f.val }

instance : faithful (projection M X) := by obviously

/-- The stabilizer of a point is isomorphic to the Endomorphism monoid at
  the corresponding point. In fact they are defeq. -/
def stabilizer_iso_End : stabilizer M x ‚âÉ* End ({as := x} : action_category M X) :=
mul_equiv.refl _

omit ùíú
variables (G : Type*) [group G] [mul_action G X]

/-- The action category associated with a group action is a groupoid. -/
@[simps]
instance : groupoid (action_category G X) :=
{ inv := Œª x y f, ‚ü®f.val‚Åª¬π, calc f.val‚Åª¬π ‚Ä¢ y.as = f.val‚Åª¬π ‚Ä¢ f.val ‚Ä¢ x.as : by rw f.2
                                            ... = x.as : by {rw smul_smul, simp} ‚ü©,
  inv_comp' := by { intros, rw subtype.ext, simp, },
  comp_inv' := by { intros, rw subtype.ext, simp, } }

end action_category
end category_theory
