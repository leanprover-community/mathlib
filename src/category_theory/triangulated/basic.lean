/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw
-/
import category_theory.additive.basic
import category_theory.shift
import category_theory.abelian.additive_functor

/-!
# Triangles

This file contains the definition of triangles in an additive category with an additive shift.

TODO: generalise this to n-angles in n-angulated categories as in https://arxiv.org/abs/1006.4592
-/

noncomputable theory

open category_theory
open category_theory.preadditive
open category_theory.limits

universes v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace category_theory.triangulated
open category_theory.category

/--
We work in an additive category C equipped with an additive shift.
-/
variables (C : Type u) [category.{v} C] [has_shift C] [additive_category C]
[functor.additive (shift C).functor]


/--
A triangle in C is a sextuple (X,Y,Z,f,g,h) where X,Y,Z are objects of C,
and f: X ‚Üí Y, g: Y ‚Üí Z, h: Z ‚Üí Œ£X are morphisms in C.
See https://stacks.math.columbia.edu/tag/0144.
-/
structure triangle :=
(obj1 : C)
(obj2 : C)
(obj3 : C)
(mor1 : obj1 ‚ü∂ obj2)
(mor2 : obj2 ‚ü∂ obj3)
(mor3 : obj3 ‚ü∂ obj1‚ü¶1‚üß)

local attribute [instance] has_zero_object.has_zero
instance [has_zero_object C] : inhabited (triangle C) :=
‚ü®{ obj1 := 0,
  obj2 := 0,
  obj3 := 0,
  mor1 := 0,
  mor2 := 0,
  mor3 := 0 }‚ü©

/--
For each object in C, there is a triangle of the form (X,X,0,ùüô_X,0,0)
-/
def contractible_triangle (X : C) : triangle C :=
{ obj1 := X,
  obj2 := X,
  obj3 := 0,
  mor1 := ùüô X,
  mor2 := 0,
  mor3 := 0 }

/--
If you rotate a triangle, you get another triangle.
-/
def triangle.rotate (T : triangle C) : triangle C :=
{ obj1 := T.obj2,
  obj2 := T.obj3,
  obj3 := T.obj1‚ü¶1‚üß,
  mor1 := T.mor2,
  mor2 := T.mor3,
  mor3 := T.mor1‚ü¶1‚üß' }

--TODO: Opposite rotation gives another triangle.


variable {C}

/--
A morphism of triangles (X,Y,Z,f,g,h)‚Üí(X',Y',Z',f',g',h') in C is a triple of morphisms
a: X ‚Üí X', b: Y ‚Üí Y', c: Z ‚Üí Z' such that b ‚â´ f = f' ‚â´ a, c ‚â´ g = g' ‚â´ b,
and a[1] ‚â´ h = h' ‚â´ c.
In other words, we have a commutative diagram:
     f      g      h
  X  --> Y  --> Z  --> X[1]
  |      |      |       |
  |a     |b     |c      |a[1]
  V      V      V       V
  X' --> Y' --> Z' --> X'[1]
     f'     g'     h'

See https://stacks.math.columbia.edu/tag/0144.
-/
@[ext]
structure triangle_morphism (T‚ÇÅ : triangle C) (T‚ÇÇ : triangle C):=
(trimor1 : T‚ÇÅ.obj1 ‚ü∂ T‚ÇÇ.obj1)
(trimor2 : T‚ÇÅ.obj2 ‚ü∂ T‚ÇÇ.obj2)
(trimor3 : T‚ÇÅ.obj3 ‚ü∂ T‚ÇÇ.obj3)
(comm1: T‚ÇÅ.mor1 ‚â´ trimor2 = trimor1 ‚â´ T‚ÇÇ.mor1)
(comm2: T‚ÇÅ.mor2 ‚â´ trimor3 = trimor2 ‚â´ T‚ÇÇ.mor2)
(comm3: T‚ÇÅ.mor3 ‚â´ trimor1‚ü¶1‚üß' = trimor3 ‚â´ T‚ÇÇ.mor3)
attribute [reassoc] triangle_morphism.comm1 triangle_morphism.comm2 triangle_morphism.comm3

/--
The identity triangle morphism.
-/
def triangle_morphism_id (T : triangle C) : triangle_morphism T T :=
{ trimor1 := ùüô T.obj1,
  trimor2 := ùüô T.obj2,
  trimor3 := ùüô T.obj3,
  comm1 := by rw [id_comp, comp_id],
  comm2 := by rw [id_comp, comp_id],
  comm3 := by { dsimp, simp } }

instance (T: triangle C): inhabited (triangle_morphism T T) := ‚ü® triangle_morphism_id T ‚ü©

variables {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ: triangle C}
/--
Composition of triangle morphisms gives a triangle morphism.
-/
def triangle_morphism.comp (f : triangle_morphism T‚ÇÅ T‚ÇÇ) (g : triangle_morphism T‚ÇÇ T‚ÇÉ) :
triangle_morphism T‚ÇÅ T‚ÇÉ :=
{ trimor1 := f.trimor1 ‚â´ g.trimor1,
  trimor2 := f.trimor2 ‚â´ g.trimor2,
  trimor3 := f.trimor3 ‚â´ g.trimor3,
  comm1 := by rw [f.comm1_assoc, g.comm1, assoc],
  comm2 := by rw [f.comm2_assoc, g.comm2, assoc],
  comm3 := by rw [functor.map_comp, f.comm3_assoc, g.comm3, assoc], }

namespace triangle_morphism

@[simp]
lemma id_comp (f: triangle_morphism T‚ÇÅ T‚ÇÇ) : (triangle_morphism_id T‚ÇÅ).comp f = f :=
begin
  unfold comp,
  unfold triangle_morphism_id,
  cases f,
  simp only [eq_self_iff_true, id_comp, and_self],
end

@[simp]
lemma comp_id (f: triangle_morphism T‚ÇÅ T‚ÇÇ) : f.comp (triangle_morphism_id T‚ÇÇ) = f :=
begin
  unfold comp,
  unfold triangle_morphism_id,
  cases f,
  simp only [eq_self_iff_true, and_self, comp_id],
end

@[simp]
lemma comp_assoc (f: triangle_morphism T‚ÇÅ T‚ÇÇ) (g: triangle_morphism T‚ÇÇ T‚ÇÉ)
  (h: triangle_morphism T‚ÇÉ T‚ÇÑ) : (f.comp g).comp h = f.comp (g.comp h) :=
begin
  unfold comp,
  simp only [eq_self_iff_true, assoc, and_self],
end

/--
You can also rotate a triangle morphism to get a morphism between the two rotated triangles.
-/
def rotate (f : triangle_morphism T‚ÇÅ T‚ÇÇ)
: triangle_morphism (T‚ÇÅ.rotate C) (T‚ÇÇ.rotate C):=
{ trimor1 := f.trimor2,
  trimor2 := f.trimor3,
  trimor3 := f.trimor1‚ü¶1‚üß',
  comm1 := by exact f.comm2,
  comm2 := by exact f.comm3,
  comm3 := begin
    change T‚ÇÅ.mor1‚ü¶1‚üß' ‚â´ (shift C).functor.map f.trimor2
      = (shift C).functor.map f.trimor1 ‚â´ T‚ÇÇ.mor1‚ü¶1‚üß',
    dsimp,
    repeat {rw ‚Üê functor.map_comp},
    rw f.comm1,
  end }

end triangle_morphism

/--
Triangles with triangle morphisms form a category.
-/
instance triangle_category : category (triangle C) :=
{ hom   := Œª A B, triangle_morphism A B,
  id    := Œª A, triangle_morphism_id A,
  comp  := Œª A B C f g, f.comp g }

/--
Rotating triangles gives an endofunctor on this category.
-/
def rotate : (triangle C) ‚•§ (triangle C) :=
{ obj := triangle.rotate C,
  map := Œª _ _ f, f.rotate,
  map_id' := begin
    assume T‚ÇÅ,
    change triangle_morphism.rotate (triangle_morphism_id T‚ÇÅ) =
    triangle_morphism_id (triangle.rotate C T‚ÇÅ),
    unfold triangle_morphism_id,
    unfold triangle_morphism.rotate,
    dsimp,
    ext,
    { dsimp,
      refl,
    },
    {
      dsimp,
      refl,
    },
    {
      dsimp,
      rw (shift C).functor.map_id,
      refl,
    }
  end,
  map_comp' := begin
    intros T‚ÇÅ T‚ÇÇ T‚ÇÉ f g,
    unfold triangle_morphism.rotate,
    ext,
    {
      dsimp,
      refl,
    },
    {
      dsimp,
      refl,
    },
    {
      dsimp,
      change (shift C).functor.map (f.trimor1 ‚â´ g.trimor1) = ((shift C).functor.map f.trimor1) ‚â´ ((shift C).functor.map g.trimor1),
      rw (shift C).functor.map_comp,
    }
  end
}
--TODO: Opposite rotation is a functor.
--TODO: Rotating triangles gives a shift of the category of triangles.




end category_theory.triangulated
