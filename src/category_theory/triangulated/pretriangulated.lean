/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw
-/
import category_theory.additive.basic
import category_theory.shift
import category_theory.preadditive.additive_functor
import category_theory.triangulated.basic
import category_theory.triangulated.rotate

/-!
# Pretriangulated Categories

This file contains the definition of pretriangulated categories and triangulated functors
between them.

TODO: generalise this to n-angulated categories as in https://arxiv.org/abs/1006.4592
-/

noncomputable theory

open category_theory
open category_theory.preadditive

universes v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace category_theory.triangulated
open category_theory.category

/-
We work in an additive category `C` equipped with an additive shift.
-/
variables (C : Type u) [category.{v} C] [has_shift C] [additive_category C]
[functor.additive (shift C).functor] [functor.additive (shift C).inverse]

/--
An additive category `C` with an additive shift, and a class of "distinguished triangles"
relative to that shift is called pretriangulated if the following hold:
* Any triangle that is isomorphic to a distinguished triangle is also distinguished.
* Any triangle of the form `(X,X,0,id,0,0)` is distinguished.
* For any morphism `f : X ‚ü∂ Y` there exists a distinguished triangle of the form `(X,Y,Z,f,g,h)`.
* The triangle `(X,Y,Z,f,g,h)` is distinguished if and only if `(Y,Z,X‚ü¶1‚üß,g,h,-f‚ü¶1‚üß)` is.
* Given a diagram:
  ```
        f       g       h
    X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
    ‚îÇ       ‚îÇ                ‚îÇ
    ‚îÇa      ‚îÇb               ‚îÇa‚ü¶1‚üß'
    V       V                V
    X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
        f'      g'      h'
  ```
  where the left square commutes, and whose rows are distinguished triangles,
  there exists a morphism `c : Z ‚ü∂ Z'` such that `(a,b,c)` is a triangle morphism.
See https://stacks.math.columbia.edu/tag/0145
-/
class pretriangulated :=
(distinguished_triangles [] : set (triangle C))
(isomorphic_distinguished : Œ† (T‚ÇÅ ‚àà distinguished_triangles) (T‚ÇÇ : triangle C) (T‚ÇÅ ‚âÖ T‚ÇÇ),
  T‚ÇÇ ‚àà distinguished_triangles)
(contractible_distinguished : Œ† (X : C), (contractible_triangle C X) ‚àà distinguished_triangles)
(distinguished_cocone_triangle : Œ† (X Y : C) (f: X ‚ü∂ Y), (‚àÉ (Z : C) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶1‚üß),
  triangle.mk _ f g h ‚àà distinguished_triangles))
(rotate_distinguished_triangle : Œ† (T : triangle C),
  T ‚àà distinguished_triangles ‚Üî T.rotate ‚àà distinguished_triangles)
(complete_distinguished_triangle_morphism : Œ† (T‚ÇÅ T‚ÇÇ : triangle C)
  (h‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles) (h‚ÇÇ : T‚ÇÇ ‚àà distinguished_triangles) (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ)
  (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (comm‚ÇÅ : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ),
  (‚àÉ (c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ), (T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ) ‚àß (T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ) ))

namespace pretriangulated
variables [pretriangulated C]

notation `dist_triang`:20 C := distinguished_triangles C
/--
Given any distinguished triangle `T`, then we know `T.rotate` is also distinguished.
-/
lemma rot_of_dist_triangle (T ‚àà dist_triang C) : (T.rotate ‚àà dist_triang C) :=
(rotate_distinguished_triangle T).mp H

/--
Given any distinguished triangle `T`, then we know `T.inv_rotate` is also distinguished.
-/
lemma inv_rot_of_dist_triangle (T ‚àà dist_triang C) : (T.inv_rotate ‚àà dist_triang C) :=
(rotate_distinguished_triangle (T.inv_rotate)).mpr
  (isomorphic_distinguished T H (T.inv_rotate.rotate) T (inv_rot_comp_rot.symm.app T))

/--
Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `f ‚â´ g = 0`.
See https://stacks.math.columbia.edu/tag/0146
-/
lemma comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ (T ‚àà dist_triang C) : T.mor‚ÇÅ ‚â´ T.mor‚ÇÇ = 0 :=
begin
  have h := contractible_distinguished T.obj‚ÇÅ,
  have f := complete_distinguished_triangle_morphism,
  specialize f (contractible_triangle C T.obj‚ÇÅ) T h H (ùüô T.obj‚ÇÅ) T.mor‚ÇÅ,
  have t : (contractible_triangle C T.obj‚ÇÅ).mor‚ÇÅ ‚â´ T.mor‚ÇÅ = ùüô T.obj‚ÇÅ ‚â´ T.mor‚ÇÅ,
    by refl,
  specialize f t,
  cases f with c f,
  rw ‚Üê f.left,
  simp only [limits.zero_comp, contractible_triangle_mor‚ÇÇ],
end -- TODO : tidy this proof up

/--
Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `g ‚â´ h = 0`.
See https://stacks.math.columbia.edu/tag/0146
-/
lemma comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ  (T ‚àà dist_triang C) : T.mor‚ÇÇ ‚â´ T.mor‚ÇÉ = 0 :=
comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C T.rotate (rot_of_dist_triangle C T H)

/--
Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `h ‚â´ f‚ü¶1‚üß = 0`.
See https://stacks.math.columbia.edu/tag/0146
-/
lemma comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ (T ‚àà dist_triang C) :
  T.mor‚ÇÉ ‚â´ ((shift C).functor.map T.mor‚ÇÅ) = 0 :=
have H‚ÇÇ : _ := rot_of_dist_triangle C T.rotate (rot_of_dist_triangle C T H),
by simpa using comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C (T.rotate.rotate) H‚ÇÇ

/-
TODO: If `C` is pretriangulated with respect to a shift,
then `C·µí·µñ` is pretriangulated with respect to the inverse shift.
-/
end pretriangulated
end category_theory.triangulated

namespace category_theory.triangulated
namespace pretriangulated

variables (C : Type u‚ÇÅ) [category.{v‚ÇÅ} C] [has_shift C] [additive_category C]
[functor.additive (shift C).functor] [functor.additive (shift C).inverse]
variables (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D] [has_shift D] [additive_category D]
[functor.additive (shift D).functor] [functor.additive (shift D).inverse]

/--
A triangulated functor between pretriangulated categories `C` and `D` is a functor `F : C ‚•§ D`
together with given functorial isomorphisms `Œæ X : F(X‚ü¶1‚üß) ‚ü∂ F(X)‚ü¶1‚üß` with extra conditions
involving images of triangles.
-/
structure triangulated_functor_struct extends (C ‚•§ D) :=
(nat_iso : (shift C).functor ‚ãô to_functor ‚âÖ to_functor ‚ãô (shift D).functor)

instance : inhabited (triangulated_functor_struct C C) :=
‚ü®{ obj := Œª X, X,
  map := Œª _ _ f, f,
  nat_iso := by refl }‚ü©

variables {C D}
/--
Given a `triangulated_functor_struct` we can define a function from triangles of `C` to
triangles of `D`.
-/
@[simp]
def triangulated_functor_struct.map_triangle (F : triangulated_functor_struct C D)
  (T : triangle C) : triangle D :=
{ obj‚ÇÅ := F.obj T.obj‚ÇÅ,
  obj‚ÇÇ := F.obj T.obj‚ÇÇ,
  obj‚ÇÉ := F.obj T.obj‚ÇÉ,
  mor‚ÇÅ := F.map T.mor‚ÇÅ,
  mor‚ÇÇ := F.map T.mor‚ÇÇ,
  mor‚ÇÉ := F.map T.mor‚ÇÉ ‚â´ F.nat_iso.hom.app T.obj‚ÇÅ }

variables (C D)
/--
A triangulated functor between pretriangulated categories `C` and `D` is a functor `F : C ‚•§ D`
together with given functorial isomorphisms `Œæ X : F(X‚ü¶1‚üß) ‚ü∂ F(X)‚ü¶1‚üß` such that for every
distinguished triangle `(X,Y,Z,f,g,h)` of `C`, the triangle
`(F(X), F(Y), F(Z), F(f), F(g), F(h) ‚â´ (Œæ X))` is a distinguished triangle of `D`.
See https://stacks.math.columbia.edu/tag/014V
-/
structure triangulated_functor [pretriangulated C] [pretriangulated D] extends
  triangulated_functor_struct C D :=
(map_distinguished : Œ† (T: triangle C), (T ‚àà dist_triang C) ‚Üí
  (to_triangulated_functor_struct.map_triangle T ‚àà dist_triang D) )

instance [pretriangulated C] : inhabited (triangulated_functor C C) :=
‚ü®{obj := Œª X, X,
  map := Œª _ _ f, f,
  nat_iso := by refl ,
  map_distinguished := begin
    rintros ‚ü®_,_,_,_‚ü© Tdt,
    dsimp at *,
    rwa category.comp_id,
  end }‚ü©

end pretriangulated
end category_theory.triangulated
