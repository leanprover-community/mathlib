/-
Copyright (c) 2021 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import category_theory.monoidal.category
import category_theory.groupoid

universes v u

namespace category_theory
open monoidal_category

variables {C : Type u}

section
variables (C)

inductive free_monoidal_category : Type u
| of : C ‚Üí free_monoidal_category
| unit : free_monoidal_category
| tensor : free_monoidal_category ‚Üí free_monoidal_category ‚Üí free_monoidal_category

end

local notation `F` := free_monoidal_category

namespace free_monoidal_category

inductive hom : F C ‚Üí F C ‚Üí Type u
| id (X) : hom X X
| Œ±_hom (X Y Z : F C) : hom ((X.tensor Y).tensor Z) (X.tensor (Y.tensor Z))
| Œ±_inv (X Y Z : F C) : hom (X.tensor (Y.tensor Z)) ((X.tensor Y).tensor Z)
| l_hom (X) : hom (unit.tensor X) X
| l_inv (X) : hom X (unit.tensor X)
| œÅ_hom (X : F C) : hom (X.tensor unit) X
| œÅ_inv (X : F C) : hom X (X.tensor unit)
| comp {X Y Z} (f : hom X Y) (g : hom Y Z) : hom X Z
| tensor {W X Y Z} (f : hom W Y) (g : hom X Z) : hom (W.tensor X) (Y.tensor Z)

infixr ` ‚ü∂·µê `:10 := hom

inductive hom_equiv : Œ† (X Y : F C), (X ‚ü∂·µê Y) ‚Üí (X ‚ü∂·µê Y) ‚Üí Prop
| refl {X Y} (f) : hom_equiv X Y f f
| symm {X Y} (f g) : hom_equiv X Y f g ‚Üí hom_equiv X Y g f
| trans {X Y} {f g h} : hom_equiv X Y f g ‚Üí hom_equiv X Y g h ‚Üí hom_equiv X Y f h
| comp {X Y Z : F C} {f f' : X ‚ü∂·µê Y} {g g' : Y ‚ü∂·µê Z} :
    hom_equiv X Y f f' ‚Üí hom_equiv Y Z g g' ‚Üí hom_equiv X Z (f.comp g) (f'.comp g')
| tensor {W X Y Z : F C} {f f' : W ‚ü∂·µê X} {g g' : Y ‚ü∂·µê Z} :
    hom_equiv _ _ f f' ‚Üí hom_equiv _ _ g g' ‚Üí hom_equiv _ _ (f.tensor g) (f'.tensor g')
| comp_id {X Y} (f : X ‚ü∂·µê Y) : hom_equiv X Y (f.comp (hom.id _)) f
| id_comp {X Y} (f : X ‚ü∂·µê Y) : hom_equiv X Y ((hom.id _).comp f) f
| assoc {X Y U V : F C} (f : X ‚ü∂·µê U) (g : U ‚ü∂·µê V) (h : V ‚ü∂·µê Y) :
    hom_equiv X Y ((f.comp g).comp h) (f.comp (g.comp h))
| tensor_id {X Y : F C} : hom_equiv _ _ ((hom.id X).tensor (hom.id Y)) (hom.id _)
| tensor_comp {X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ : F C} (f‚ÇÅ : X‚ÇÅ ‚ü∂·µê Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂·µê Y‚ÇÇ) (g‚ÇÅ : Y‚ÇÅ ‚ü∂·µê Z‚ÇÅ) (g‚ÇÇ : Y‚ÇÇ ‚ü∂·µê Z‚ÇÇ) :
    hom_equiv _ _ ((f‚ÇÅ.comp g‚ÇÅ).tensor (f‚ÇÇ.comp g‚ÇÇ)) ((f‚ÇÅ.tensor f‚ÇÇ).comp (g‚ÇÅ.tensor g‚ÇÇ))
| Œ±_hom_inv {X Y Z : F C} : hom_equiv _ _ ((hom.Œ±_hom X Y Z).comp (hom.Œ±_inv X Y Z)) (hom.id _)
| Œ±_inv_hom {X Y Z : F C} : hom_equiv _ _ ((hom.Œ±_inv X Y Z).comp (hom.Œ±_hom X Y Z)) (hom.id _)
| associator_naturality {X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ : F C} (f‚ÇÅ : X‚ÇÅ ‚ü∂·µê Y‚ÇÅ) (f‚ÇÇ : X‚ÇÇ ‚ü∂·µê Y‚ÇÇ) (f‚ÇÉ : X‚ÇÉ ‚ü∂·µê Y‚ÇÉ) :
    hom_equiv _ _ (((f‚ÇÅ.tensor f‚ÇÇ).tensor f‚ÇÉ).comp (hom.Œ±_hom Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ))
      ((hom.Œ±_hom X‚ÇÅ X‚ÇÇ X‚ÇÉ).comp (f‚ÇÅ.tensor (f‚ÇÇ.tensor f‚ÇÉ)))
| œÅ_hom_inv {X : F C} : hom_equiv _ _ ((hom.œÅ_hom X).comp (hom.œÅ_inv X)) (hom.id _)
| œÅ_inv_hom {X : F C} : hom_equiv _ _ ((hom.œÅ_inv X).comp (hom.œÅ_hom X)) (hom.id _)
| œÅ_naturality {X Y : F C} (f : X ‚ü∂·µê Y) : hom_equiv _ _
    ((f.tensor (hom.id unit)).comp (hom.œÅ_hom Y)) ((hom.œÅ_hom X).comp f)
| l_hom_inv {X : F C} : hom_equiv _ _ ((hom.l_hom X).comp (hom.l_inv X)) (hom.id _)
| l_inv_hom {X : F C} : hom_equiv _ _ ((hom.l_inv X).comp (hom.l_hom X)) (hom.id _)
| l_naturality {X Y : F C} (f : X ‚ü∂·µê Y) : hom_equiv _ _
    (((hom.id unit).tensor f).comp (hom.l_hom Y)) ((hom.l_hom X).comp f)
| pentagon {W X Y Z : F C} : hom_equiv _ _
  (((hom.Œ±_hom W X Y).tensor (hom.id Z)).comp
    ((hom.Œ±_hom W (X.tensor Y) Z).comp ((hom.id W).tensor (hom.Œ±_hom X Y Z))))
  ((hom.Œ±_hom (W.tensor X) Y Z).comp (hom.Œ±_hom W X (Y.tensor Z)))
| triangle {X Y : F C} : hom_equiv _ _ ((hom.Œ±_hom X unit Y).comp ((hom.id X).tensor (hom.l_hom Y)))
  ((hom.œÅ_hom X).tensor (hom.id Y))

def setoid_hom (X Y : F C) : setoid (X ‚ü∂·µê Y) :=
‚ü®hom_equiv X Y,
  ‚ü®Œª f, hom_equiv.refl f, Œª f g, hom_equiv.symm f g, Œª f g h hfg hgh, hom_equiv.trans hfg hgh‚ü©‚ü©

attribute [instance] setoid_hom

section
open free_monoidal_category.hom_equiv

instance category_free_monoidal_category : category.{u} (F C) :=
{ hom := Œª X Y, quotient (free_monoidal_category.setoid_hom X Y),
  id := Œª X, ‚ü¶free_monoidal_category.hom.id _‚üß,
  comp := Œª X Y Z f g, quotient.map‚ÇÇ hom.comp (by { intros f f' hf g g' hg, exact comp hf hg }) f g,
  id_comp' := by { rintro X Y ‚ü®f‚ü©, exact quotient.sound (id_comp f) },
  comp_id' := by { rintro X Y ‚ü®f‚ü©, exact quotient.sound (comp_id f) },
  assoc' := by { rintro W X Y Z ‚ü®f‚ü© ‚ü®g‚ü© ‚ü®h‚ü©, exact quotient.sound (assoc f g h) } }

instance : monoidal_category (F C) :=
{ tensor_obj := Œª X Y, free_monoidal_category.tensor X Y,
  tensor_hom := Œª X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ, quotient.map‚ÇÇ hom.tensor $
    by { intros _ _ h _ _ h', exact hom_equiv.tensor h h'},
  tensor_id' := Œª X Y, quotient.sound tensor_id,
  tensor_comp' := Œª X‚ÇÅ Y‚ÇÅ Z‚ÇÅ X‚ÇÇ Y‚ÇÇ Z‚ÇÇ,
    by { rintros ‚ü®f‚ÇÅ‚ü© ‚ü®f‚ÇÇ‚ü© ‚ü®g‚ÇÅ‚ü© ‚ü®g‚ÇÇ‚ü©, exact quotient.sound (tensor_comp _ _ _ _) },
  tensor_unit := free_monoidal_category.unit,
  associator := Œª X Y Z,
    ‚ü®‚ü¶hom.Œ±_hom X Y Z‚üß, ‚ü¶hom.Œ±_inv X Y Z‚üß, quotient.sound Œ±_hom_inv, quotient.sound Œ±_inv_hom‚ü©,
  associator_naturality' := Œª X‚ÇÅ X‚ÇÇ X‚ÇÉ Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ,
    by { rintros ‚ü®f‚ÇÅ‚ü© ‚ü®f‚ÇÇ‚ü© ‚ü®f‚ÇÉ‚ü©, exact quotient.sound (associator_naturality _ _ _) },
  left_unitor := Œª X,
   ‚ü®‚ü¶hom.l_hom X‚üß, ‚ü¶hom.l_inv X‚üß, quotient.sound l_hom_inv, quotient.sound l_inv_hom‚ü©,
  left_unitor_naturality' := Œª X Y, by { rintro ‚ü®f‚ü©, exact quotient.sound (l_naturality _) },
  right_unitor := Œª X,
   ‚ü®‚ü¶hom.œÅ_hom X‚üß, ‚ü¶hom.œÅ_inv X‚üß, quotient.sound œÅ_hom_inv, quotient.sound œÅ_inv_hom‚ü©,
  right_unitor_naturality' := Œª X Y, by { rintro ‚ü®f‚ü©, exact quotient.sound (œÅ_naturality _) },
  pentagon' := Œª W X Y Z, quotient.sound pentagon,
  triangle' := Œª X Y, quotient.sound triangle }

@[simp] lemma mk_comp {X Y Z : F C} (f : X ‚ü∂·µê Y) (g : Y ‚ü∂·µê Z) :
  ‚ü¶f.comp g‚üß = @category_struct.comp (F C) _ _ _ _ ‚ü¶f‚üß ‚ü¶g‚üß :=
rfl

@[simp] lemma mk_tensor {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : F C} (f : X‚ÇÅ ‚ü∂·µê Y‚ÇÅ) (g : X‚ÇÇ ‚ü∂·µê Y‚ÇÇ) :
  ‚ü¶f.tensor g‚üß = @monoidal_category.tensor_hom (F C) _ _ _ _ _ _ ‚ü¶f‚üß ‚ü¶g‚üß :=
rfl

@[simp] lemma mk_id {X : F C} : ‚ü¶hom.id X‚üß = ùüô X := rfl
@[simp] lemma mk_Œ±_hom {X Y Z : F C} : ‚ü¶hom.Œ±_hom X Y Z‚üß = (Œ±_ X Y Z).hom := rfl
@[simp] lemma mk_Œ±_inv {X Y Z : F C} : ‚ü¶hom.Œ±_inv X Y Z‚üß = (Œ±_ X Y Z).inv := rfl
@[simp] lemma mk_œÅ_hom {X : F C} : ‚ü¶hom.œÅ_hom X‚üß = (œÅ_ X).hom := rfl
@[simp] lemma mk_œÅ_inv {X : F C} : ‚ü¶hom.œÅ_inv X‚üß = (œÅ_ X).inv := rfl
@[simp] lemma mk_l_hom {X : F C} : ‚ü¶hom.l_hom X‚üß = (Œª_ X).hom := rfl
@[simp] lemma mk_l_inv {X : F C} : ‚ü¶hom.l_inv X‚üß = (Œª_ X).inv := rfl
@[simp] lemma tensor_eq_tensor {X Y : F C} : X.tensor Y = X ‚äó Y := rfl
@[simp] lemma unit_eq_unit : free_monoidal_category.unit = ùüô_ (F C) := rfl

section
open hom

@[simp] def inverse' : Œ† {X Y : F C}, (X ‚ü∂·µê Y) ‚Üí (Y ‚ü∂·µê X)
| _ _ (id X) := id X
| _ _ (Œ±_hom _ _ _) := Œ±_inv _ _ _
| _ _ (Œ±_inv _ _ _) := Œ±_hom _ _ _
| _ _ (œÅ_hom _) := œÅ_inv _
| _ _ (œÅ_inv _) := œÅ_hom _
| _ _ (l_hom _) := l_inv _
| _ _ (l_inv _) := l_hom _
| _ _ (comp f g) := (inverse' g).comp (inverse' f)
| _ _ (hom.tensor f g) := (inverse' f).tensor (inverse' g)

end

def inverse {X Y : F C} : (X ‚ü∂ Y) ‚Üí (Y ‚ü∂ X) :=
quotient.lift (Œª f, ‚ü¶inverse' f‚üß)
begin
  intros f g h,
  dsimp only,
  induction h with X f f X Y f h hfg hfg' X Y f g h _ _ hfg hgh X Y Z f f' g g' _ _ hf hg
    X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ f f' g g' _ _ hf hg,
  { refl },
  { exact hfg'.symm },
  { exact hfg.trans hgh },
  { simp only [inverse', mk_comp, hf, hg] },
  { simp only [inverse', mk_tensor, hf, hg] },
  all_goals { simp only [inverse', mk_id, mk_comp, mk_Œ±_hom, mk_Œ±_inv, mk_œÅ_hom, mk_œÅ_inv, mk_l_hom,
    mk_l_inv, category.id_comp, category.comp_id, category.assoc, iso.hom_inv_id, iso.inv_hom_id,
      mk_tensor, monoidal_category.tensor_id, monoidal_category.tensor_comp],
    try { dsimp only [tensor_eq_tensor, unit_eq_unit],
      simp only [eq_self_iff_true, associator_inv_naturality, right_unitor_inv_naturality,
        left_unitor_inv_naturality, pentagon_inv, triangle_assoc_comp_left_inv] } }
end


section functor
variables [category.{v} C] [monoidal_category C]

def project_obj : F C ‚Üí C
| (free_monoidal_category.of X) := X
| free_monoidal_category.unit := ùüô_ C
| (free_monoidal_category.tensor X Y) := project_obj X ‚äó project_obj Y

section
open hom

@[simp]
def project_hom' : Œ† {X Y : F C}, (X ‚ü∂·µê Y) ‚Üí (project_obj X ‚ü∂ project_obj Y)
| _ _ (id _) := ùüô _
| _ _ (Œ±_hom _ _ _) := (Œ±_ _ _ _).hom
| _ _ (Œ±_inv _ _ _) := (Œ±_ _ _ _).inv
| _ _ (l_hom _) := (Œª_ _).hom
| _ _ (l_inv _) := (Œª_ _).inv
| _ _ (œÅ_hom _) := (œÅ_ _).hom
| _ _ (œÅ_inv _) := (œÅ_ _).inv
| _ _ (comp f g) := project_hom' f ‚â´ project_hom' g
| _ _ (hom.tensor f g) := project_hom' f ‚äó project_hom' g

def project_hom {X Y : F C} : (X ‚ü∂ Y) ‚Üí (project_obj X ‚ü∂ project_obj Y) :=
quotient.lift project_hom'
begin
  intros f g h,
  induction h with X Y f X Y f g hfg hfg' X Y f g h _ _ hfg hgh X Y Z f f' g g' _ _ hf hg
    W X Y Z f g f' g' _ _ hfg hfg',
  { refl },
  { exact hfg'.symm },
  { exact hfg.trans hgh },
  { simp only [project_hom', hf, hg] },
  { simp only [project_hom', hfg, hfg'] },
  { simp only [project_hom', category.comp_id] },
  { simp only [project_hom', category.id_comp] },
  { simp only [project_hom', category.assoc ] },
  { simp only [project_hom', monoidal_category.tensor_id], refl },
  { simp only [project_hom', monoidal_category.tensor_comp] },
  { simp only [project_hom', iso.hom_inv_id] },
  { simp only [project_hom', iso.inv_hom_id] },
  { simp only [project_hom', monoidal_category.associator_naturality] },
  { simp only [project_hom', iso.hom_inv_id] },
  { simp only [project_hom', iso.inv_hom_id] },
  { simp only [project_hom'], dsimp [project_obj],
    exact monoidal_category.right_unitor_naturality _ },
  { simp only [project_hom', iso.hom_inv_id] },
  { simp only [project_hom', iso.inv_hom_id] },
  { simp only [project_hom'], dsimp [project_obj],
    exact monoidal_category.left_unitor_naturality _ },
  { simp only [project_hom'], exact monoidal_category.pentagon _ _ _ _ },
  { simp only [project_hom'], exact monoidal_category.triangle _ _ }
end

end

def project : F C ‚•§ C :=
{ obj := project_obj,
  map := Œª X Y, project_hom }

end functor

end

end free_monoidal_category

end category_theory
