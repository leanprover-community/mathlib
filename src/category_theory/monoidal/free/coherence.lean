import category_theory.monoidal.free.basic
import category_theory.discrete_category

universes v u

namespace category_theory

variables {C : Type u}

section
variables (C)

inductive normal_monoidal_object : Type u
| unit : normal_monoidal_object
| tensor : normal_monoidal_object ‚Üí C ‚Üí normal_monoidal_object

notation `N` C := discrete (normal_monoidal_object C)

end

@[simp]
def inclusion' : normal_monoidal_object C ‚Üí F C
| normal_monoidal_object.unit := free_monoidal_category.unit
| (normal_monoidal_object.tensor n a) := free_monoidal_category.tensor (inclusion' n) (free_monoidal_category.of a)

@[simp]
def inclusion : (N C) ‚•§ F C :=
discrete.functor inclusion'

@[simp] def normalize_obj : F C ‚Üí normal_monoidal_object C ‚Üí normal_monoidal_object C
| free_monoidal_category.unit n := n
| (free_monoidal_category.of X) n := normal_monoidal_object.tensor n X
| (free_monoidal_category.tensor X Y) n := normalize_obj Y (normalize_obj X n)

@[simp] lemma normalize_obj_unitor (n : N C) : normalize_obj (ùüô_ (F C)) n = n :=
rfl

@[simp] lemma normalize_obj_tensor (X Y : F C) (n : N C) :
  normalize_obj (X ‚äó Y) n = normalize_obj Y (normalize_obj X n) :=
rfl

def F_hom_mk {X Y : F C} (f : X ‚ü∂·µê Y) : X ‚ü∂ Y :=
‚ü¶f‚üß

@[simp]
def normalize_map_aux : Œ† {X Y : F C},
  (X ‚ü∂·µê Y) ‚Üí
    ((discrete.functor (normalize_obj X) : _ ‚•§ (N C)) ‚ü∂ discrete.functor (normalize_obj Y))
| _ _ (free_monoidal_category_hom.id _) := ùüô _
| _ _ (free_monoidal_category_hom.Œ±_hom _ _ _) := ‚ü®Œª X, ùüô _‚ü©
| _ _ (free_monoidal_category_hom.Œ±_inv _ _ _) := ‚ü®Œª X, ùüô _‚ü©
| _ _ (free_monoidal_category_hom.l_hom _) := ‚ü®Œª X, ùüô _‚ü©
| _ _ (free_monoidal_category_hom.l_inv _) := ‚ü®Œª X, ùüô _‚ü©
| _ _ (free_monoidal_category_hom.œÅ_hom _) := ‚ü®Œª X, ùüô _‚ü©
| _ _ (free_monoidal_category_hom.œÅ_inv _) := ‚ü®Œª X, ùüô _‚ü©
| X Y (@free_monoidal_category_hom.comp _ U V W f g) := normalize_map_aux f ‚â´ normalize_map_aux g
| X Y (@free_monoidal_category_hom.tensor _ T U V W f g) :=
    ‚ü®Œª X, (normalize_map_aux g).app (normalize_obj T X) ‚â´ (discrete.functor (normalize_obj W) : _ ‚•§ N C).map ((normalize_map_aux f).app X), by tidy‚ü©

@[simp]
def normalize : F C ‚•§ ((N C) ‚•§ N C) :=
{ obj := Œª X, discrete.functor (normalize_obj X),
  map := Œª X Y, quotient.lift normalize_map_aux (by tidy) }

def full_normalize : F C ‚•§ N C :=
{ obj := Œª X, (normalize.obj X).obj normal_monoidal_object.unit,
  map := Œª X Y f, (normalize.map f).app normal_monoidal_object.unit }

@[simp]
def tensor_func : F C ‚•§ ((N C) ‚•§ F C) :=
{ obj := Œª X, discrete.functor (Œª n, (inclusion.obj n) ‚äó X),
  map := Œª X Y f, ‚ü®Œª n, ùüô _ ‚äó f, by tidy‚ü© }

lemma tensor_func_map_app {X Y : F C} (f : X ‚ü∂ Y) (n) : (tensor_func.map f).app n =
  ùüô _ ‚äó f :=
rfl

section
variables (C)

@[simp]
def normalize' : F C ‚•§ ((N C) ‚•§ F C) :=
normalize ‚ãô (whiskering_right _ _ _).obj inclusion

@[simp]
def normalize_iso_app :
  Œ† (X : F C) (n : N C), (tensor_func.obj X).obj n ‚âÖ ((normalize' C).obj X).obj n
| (free_monoidal_category.of X) n := iso.refl _
| free_monoidal_category.unit n := œÅ_ _
| (free_monoidal_category.tensor X Y) n :=
  (Œ±_ _ _ _).symm ‚â™‚â´ tensor_iso (normalize_iso_app X n) (iso.refl _) ‚â™‚â´ normalize_iso_app _ _

@[simp]
lemma normalize_iso_app_tensor (X Y : F C) (n : N C) :
  normalize_iso_app C (X ‚äó Y) n =
  (Œ±_ _ _ _).symm ‚â™‚â´ tensor_iso (normalize_iso_app C X n) (iso.refl _) ‚â™‚â´ normalize_iso_app _ _ _ :=
rfl

@[simp]
lemma normalize_iso_app_unitor (n : N C) : normalize_iso_app C (ùüô_ (F C)) n = œÅ_ _ :=
rfl

@[simp]
def normalize_iso_aux (X : F C) : tensor_func.obj X ‚âÖ (normalize' C).obj X :=
nat_iso.of_components (normalize_iso_app C X) (by tidy)

lemma weird {n n' : N C} (f : n ‚ü∂ n')(Z : F C) :
  inclusion.map f ‚äó ùüô Z = (discrete.functor (Œª n, inclusion' n ‚äó Z)).map f :=
by tidy

def normalize_iso : tensor_func ‚âÖ normalize' C :=
nat_iso.of_components (normalize_iso_aux C)
begin
  rintros X Y f,
  apply quotient.induction_on f,
  intro f,
  ext n,
  induction f generalizing n,
  { simp only [mk_id_eq_id, functor.map_id, category.id_comp, category.comp_id] },
  { dsimp,
    rw [monoidal_category.id_tensor_associator_inv_naturality_assoc,
      ‚Üêmonoidal_category.pentagon_inv_assoc],
    simp only [monoidal_category.tensor_hom_inv_id_assoc, monoidal_category.tensor_id, category.id_comp, discrete.functor_map_id,
  monoidal_category.comp_tensor_id, iso.cancel_iso_inv_left, category.assoc],
    dsimp, simp only [category.comp_id] },
  { dsimp,
    simp only [discrete.functor_map_id, monoidal_category.comp_tensor_id, category.assoc],
    rw [monoidal_category.pentagon_inv_assoc, ‚Üêmonoidal_category.associator_inv_naturality_assoc],
    simp only [monoidal_category.tensor_id, iso.cancel_iso_inv_left],
    dsimp, simp only [category.comp_id],},
  { dsimp,
    rw monoidal_category.triangle_assoc_comp_right_assoc,
    simp only [discrete.functor_map_id, category.assoc],
    dsimp, simp only [category.comp_id] },
  { dsimp,
    rw monoidal_category.triangle_assoc_comp_left_inv_assoc,
    simp only [monoidal_category.inv_hom_id_tensor_assoc, monoidal_category.tensor_id, category.id_comp, discrete.functor_map_id],
    dsimp, simp only [category.comp_id] },
  { dsimp,
    rw [‚Üê(iso.inv_comp_eq _).2 (monoidal_category.right_unitor_tensor _ _),
      category.assoc, ‚Üêmonoidal_category.right_unitor_naturality],
    simp only [discrete.functor_map_id, iso.cancel_iso_inv_left, category.assoc],
    dsimp, simp only [category.comp_id] },
  { dsimp,
    rw [‚Üê(iso.eq_comp_inv _).1 (monoidal_category.right_unitor_tensor_inv _ _)],
    simp only [iso.hom_inv_id_assoc, monoidal_category.right_unitor_conjugation, discrete.functor_map_id, category.assoc],
    dsimp, simp only [category.comp_id], },
  { dsimp at *,
    rw [monoidal_category.id_tensor_comp, category.assoc, f_ih_g ‚ü¶f_g‚üß, ‚Üêcategory.assoc,
      f_ih_f ‚ü¶f_f‚üß, category.assoc, ‚Üêfunctor.map_comp],
    congr' 2 },
  { dsimp at *,
    rw monoidal_category.associator_inv_naturality_assoc,
    slice_lhs 2 3 { rw [‚Üêmonoidal_category.tensor_comp, f_ih_f ‚ü¶f_f‚üß],
      congr, skip,
      rw category.comp_id,
      rw [‚Üê@category.id_comp (F C) _ _ _ ‚ü¶f_g‚üß] },
    rw monoidal_category.tensor_comp,
    simp only [category.assoc],
    congr' 2,
    rw [‚Üêmk_tensor_eq_tensor, quotient.lift_mk],
    dsimp,
    rw [functor.map_comp, ‚Üêcategory.assoc, ‚Üêf_ih_g ‚ü¶f_g‚üß],
    rw [‚Üê@category.comp_id (F C) _ _ _ ‚ü¶f_g‚üß],
    rw ‚Üêcategory.id_comp ((discrete.functor inclusion').map _),
    rw monoidal_category.tensor_comp,
    dsimp,
    simp only [category.assoc, category.comp_id],
    congr' 1,
    convert (normalize_iso_aux C f_Z).hom.naturality ((normalize_map_aux f_f).app n),
    dsimp,
    exact weird _ _ _, }
end

def full_normalize_iso : ùü≠ (F C) ‚âÖ full_normalize ‚ãô inclusion :=
nat_iso.of_components
  (Œª X, (Œª_ X).symm ‚â™‚â´ ((normalize_iso C).app X).app normal_monoidal_object.unit)
  begin
    intros X Y f,
    dsimp,
    rw [monoidal_category.left_unitor_inv_naturality_assoc, category.assoc],
    congr' 1,
    have := nat_iso.naturality_2 (normalize_iso.{u} C) f,
    erw ‚Üêtensor_func_map_app f normal_monoidal_object.unit,
    rw ‚Üêthis,
    dsimp,
    simp only [category.assoc],
    congr' 1,
    slice_lhs 2 3 { rw [‚Üênat_trans.comp_app, ‚Üênat_trans.comp_app], },
    simp only [nat_trans.id_app, category.comp_id, iso.inv_hom_id],
    dsimp, simp,
    congr' 1,
  end

end

instance coherence {X Y : F C} : subsingleton (X ‚ü∂ Y) :=
begin
  constructor,
  intros f g,
  rw [‚Üêfunctor.id_map f, ‚Üêfunctor.id_map g],
  have : full_normalize.map f = full_normalize.map g := subsingleton.elim _ _,
  simp [‚Üênat_iso.naturality_2 (full_normalize_iso.{u} C), this]
end

instance : groupoid.{u} (F C) :=
{ inv := Œª X Y, inverse, ..(by apply_instance : category (F C)) }

end category_theory
