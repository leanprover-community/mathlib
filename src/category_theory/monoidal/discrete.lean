/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.monoidal.natural_transformation
import category_theory.discrete_category
import algebra.group.hom

/-!
# Monoids as discrete monoidal categories

The discrete category on a monoid is a monoidal category.
Multiplicative morphisms induced monoidal functors.
-/

universes u

open category_theory

variables (M : Type u) [monoid M]

namespace category_theory

instance monoid_discrete : monoid (discrete M) := by { dsimp [discrete], apply_instance }

instance : monoidal_category (discrete M) :=
{ tensor_unit := 1,
  tensor_obj := Œª X Y, X * Y,
  tensor_hom := Œª W X Y Z f g, ‚ü®‚ü®by rw [f.1.1, g.1.1]‚ü©‚ü©,
  left_unitor := Œª X, discrete.iso (one_mul X),
  right_unitor := Œª X, discrete.iso (mul_one X),
  associator := Œª X Y Z, discrete.iso (mul_assoc _ _ _), }

variables {M} {N : Type u} [monoid N]

/--
A multiplicative morphism between monoids gives a monoidal functor between the corresponding
discrete monoidal categories.
-/
def discrete.monoidal_functor (F : M ‚Üí* N) : monoidal_functor (discrete M) (discrete N) :=
{ obj := F,
  map := Œª X Y f, ‚ü®‚ü®F.congr_arg f.1.1‚ü©‚ü©,
  Œµ := ‚ü®‚ü®F.map_one.symm‚ü©‚ü©,
  Œº := Œª X Y, ‚ü®‚ü®(F.map_mul X Y).symm‚ü©‚ü©, }

variables {K : Type u} [monoid K]

/--
The monoidal natural isomorphism corresponding to composing two multiplicative morphisms.
-/
def discrete.monoidal_functor_comp (F : M ‚Üí* N) (G : N ‚Üí* K) :
  discrete.monoidal_functor F ‚äó‚ãô discrete.monoidal_functor G ‚âÖ
  discrete.monoidal_functor (G.comp F) :=
{ hom := { app := Œª X, ùüô _, },
  inv := { app := Œª X, ùüô _, }, }

end category_theory
