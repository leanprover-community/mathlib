/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.monoidal.functor
import category_theory.full_subcategory

/-!
# Monoidal natural transformations

Natural transformations between (lax) monoidal functors must satisfy
an additional compatibility relation with the tensorators:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`.

(Lax) monoidal functors between a fixed pair of monoidal categories
themselves form a category.
-/

open category_theory

universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open category_theory.category
open category_theory.functor

namespace category_theory

open monoidal_category

variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] [monoidal_category.{v‚ÇÅ} C]
          {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] [monoidal_category.{v‚ÇÇ} D]

/--
A monoidal natural transformation is a natural transformation between (lax) monoidal functors
additionally satisfying:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`
-/
@[ext]
structure monoidal_nat_trans (F G : lax_monoidal_functor C D)
  extends nat_trans F.to_functor G.to_functor :=
(unit' : F.Œµ ‚â´ app (ùüô_ C) = G.Œµ . obviously)
(tensor' : ‚àÄ X Y, F.Œº _ _ ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº _ _ . obviously)

restate_axiom monoidal_nat_trans.tensor'
attribute [simp, reassoc] monoidal_nat_trans.tensor
restate_axiom monoidal_nat_trans.unit'
attribute [simp, reassoc] monoidal_nat_trans.unit

namespace monoidal_nat_trans

/--
The identity monoidal natural transformation.
-/
@[simps]
def id (F : lax_monoidal_functor C D) : monoidal_nat_trans F F :=
{ ..(ùüô F.to_functor) }

instance (F : lax_monoidal_functor C D) : inhabited (monoidal_nat_trans F F) := ‚ü®id F‚ü©

/--
Vertical composition of monoidal natural transformations.
-/
@[simps]
def vcomp {F G H : lax_monoidal_functor C D}
  (Œ± : monoidal_nat_trans F G) (Œ≤ : monoidal_nat_trans G H) : monoidal_nat_trans F H :=
{ ..(nat_trans.vcomp Œ±.to_nat_trans Œ≤.to_nat_trans) }

instance category_lax_monoidal_functor : category (lax_monoidal_functor C D) :=
{ hom := monoidal_nat_trans,
  id := id,
  comp := Œª F G H Œ± Œ≤, vcomp Œ± Œ≤, }

instance category_monoidal_functor : category (monoidal_functor C D) :=
induced_category.category monoidal_functor.to_lax_monoidal_functor

variables {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E] [monoidal_category.{v‚ÇÉ} E]

/--
Horizontal composition of monoidal natural transformations.
-/
@[simps]
def hcomp {F G : lax_monoidal_functor C D} {H K : lax_monoidal_functor D E}
  (Œ± : monoidal_nat_trans F G) (Œ≤ : monoidal_nat_trans H K) :
  monoidal_nat_trans (F ‚äó‚ãô H) (G ‚äó‚ãô K) :=
{ unit' :=
  begin
    dsimp, simp,
    conv_lhs { rw [‚ÜêK.to_functor.map_comp, Œ±.unit], },
  end,
  tensor' := Œª X Y,
  begin
    dsimp, simp,
    conv_lhs { rw [‚ÜêK.to_functor.map_comp, Œ±.tensor, K.to_functor.map_comp], },
  end,
  ..(nat_trans.hcomp Œ±.to_nat_trans Œ≤.to_nat_trans) }

end monoidal_nat_trans

end category_theory
