import number_theory.number_field.canonical_embedding
import group_theory.torsion

section torsion

variables {G : Type*}

@[to_additive]
lemma comm_monoid.mem_torsion [comm_monoid G] (g : G) :
  g ‚àà comm_monoid.torsion G ‚Üî is_of_fin_order g := iff.rfl

@[to_additive]
lemma comm_group.mem_torsion [comm_group G] (g : G) :
  g ‚àà comm_group.torsion G ‚Üî is_of_fin_order g := iff.rfl

end torsion

open_locale classical

variables (K : Type*) [field K]

localized "notation `ùì§`K := (number_field.ring_of_integers K)À£" in units

namespace number_field.unit

section to_field_unit

open number_field

def to_field_unit : (ùì§ K) ‚Üí* KÀ£ := units.map (algebra_map (ring_of_integers K) K)

lemma injective.to_field_unit : function.injective (to_field_unit K) :=
begin
  intros x y hxy,
  rw units.ext_iff,
  have t1 := congr_arg (coe : KÀ£ ‚Üí K) hxy,
  simp_rw [to_field_unit, units.coe_map] at t1,
  exact (no_zero_smul_divisors.algebra_map_injective (ring_of_integers K) K) t1,
end

lemma ext.to_field_unit (x y : (ùì§ K)) :
  x = y ‚Üî to_field_unit K x = to_field_unit K y :=
‚ü®Œª h, congr_arg (to_field_unit K) h, Œª h, (injective.to_field_unit K) h‚ü©

instance : has_coe (ùì§ K) KÀ£ := ‚ü®to_field_unit K‚ü©

lemma coe_injective : function.injective (coe : (ùì§ K) ‚Üí KÀ£) :=
injective.to_field_unit K

@[simp]
lemma coe_ext (x y : (ùì§ K)) : x = y ‚Üî (x : KÀ£) = (y : KÀ£) :=
ext.to_field_unit K _ _

@[simp]
lemma coe_inv (x : (ùì§ K)) : ((x‚Åª¬π : (ùì§ K)): KÀ£) = (x : KÀ£)‚Åª¬π :=
map_inv (to_field_unit K) _

@[simp]
lemma coe_pow (x : (ùì§ K)) (n : ‚Ñï) : ((x ^ n : (ùì§ K)) : KÀ£) = (x : KÀ£) ^ n :=
map_pow (to_field_unit K) _ _

def unit_subgroup : subgroup KÀ£ := monoid_hom.range (to_field_unit K)

lemma mem_unit_subgroup (x : KÀ£) :
  x ‚àà unit_subgroup K ‚Üî is_integral ‚Ñ§ (x : K) ‚àß is_integral ‚Ñ§ (x‚Åª¬π : K) :=
begin
  split,
  { rintros ‚ü®x, rfl‚ü©,
    exact ‚ü®x.val.2, by { convert x.inv.2, rw ‚Üê units.coe_inv, refl, }‚ü© },
  { exact Œª ‚ü®hx, hxi‚ü©, ‚ü®‚ü®‚ü®x.1, hx‚ü©, ‚ü®x.1‚Åª¬π, hxi‚ü©,
      by { simpa only [units.val_eq_coe, units.mul_inv', mul_mem_class.mk_mul_mk], },
      by { simpa only [units.val_eq_coe, units.inv_mul', mul_mem_class.mk_mul_mk], }‚ü©,
      by { simpa only [units.ext_iff], }‚ü©, },
end

end to_field_unit

section roots_of_unity

open number_field number_field.infinite_place

def roots_of_unity : subgroup ùì§ K := comm_group.torsion (ùì§ K)

lemma mem_roots_of_unity [number_field K] (x : (ùì§ K)) :
  x ‚àà roots_of_unity K ‚Üî ‚àÄ w : infinite_place K, w x = 1 :=
begin
  rw ( eq_iff_eq x 1 : (‚àÄ w : infinite_place K, w x = 1) ‚Üî ‚àÄ (œÜ : K ‚Üí+* ‚ÑÇ), ‚ÄñœÜ (x : K)‚Äñ = 1),
  rw [roots_of_unity, comm_group.mem_torsion, is_of_fin_order_iff_pow_eq_one],
  split,
  { rintros ‚ü®n, ‚ü®hn1, hn2‚ü©‚ü© œÜ,
    lift n to ‚Ñï+ using hn1,
    rw [coe_ext, coe_pow, units.ext_iff, units.coe_pow] at hn2,
    exact norm_map_one_of_pow_eq_one œÜ.to_monoid_hom hn2, },
  { intro h,
    obtain ‚ü®n , ‚ü®hn, hx‚ü©‚ü© := embeddings.pow_eq_one_of_norm_eq_one K ‚ÑÇ x.1.2 h,
    exact ‚ü®n, ‚ü®hn, by { rwa [coe_ext, coe_pow, units.ext_iff, units.coe_pow], }‚ü©‚ü©},
end

lemma finite_roots_of_unity [number_field K]: finite (roots_of_unity K) :=
begin
  suffices : ((coe : (ùì§ K) ‚Üí K) '' { x : (ùì§ K) | x ‚àà (roots_of_unity K )}).finite,
  { refine set.finite_coe_iff.mpr (set.finite.of_finite_image this (set.inj_on_of_injective _ _)),
    rw ( rfl : coe = (coe : KÀ£ ‚Üí K) ‚àò (coe : (ùì§ K) ‚Üí KÀ£)),
    exact (function.injective.of_comp_iff units.ext _).mpr (unit.coe_injective K), },
  refine (embeddings.finite_of_norm_le K ‚ÑÇ 1).subset _,
  rintros a ‚ü®‚ü®u, _, _, _‚ü©, ‚ü®hu, rfl‚ü©‚ü©,
  split,
  { exact u.2, },
  { rw ‚Üê le_iff_le,
    convert Œª w, le_of_eq (((mem_roots_of_unity K _).mp hu) w) using 1, },
end

lemma roots_of_unity_cyclic [number_field K]: is_cyclic (roots_of_unity K) :=
begin
  haveI := finite_roots_of_unity K,
  exact subgroup_units_cyclic _,
end

end roots_of_unity

end number_field.unit

noncomputable def number_field.log_embedding : KÀ£ ‚Üí (number_field.infinite_place K ‚Üí ‚Ñù) :=
Œª x w, real.log (w x)

namespace number_field.log_embedding

open number_field fintype number_field.infinite_place number_field.unit finite_dimensional

lemma map_one : log_embedding K 1 = 0 :=
by simpa only [log_embedding, map_one, real.log_one, units.coe_one, coe_coe, algebra_map.coe_one]

lemma map_mul (x y : KÀ£) :
  log_embedding K (x * y) = log_embedding K x + log_embedding K y :=
by simpa only [log_embedding, map_mul, real.log_mul, units.coe_mul, ne.def, map_eq_zero,
  units.ne_zero, not_false_iff]

lemma map_inv (x : KÀ£) : log_embedding K x‚Åª¬π = - log_embedding K x :=
by simpa [log_embedding, map_inv, real.log_inv]

lemma eq_zero_iff (x : KÀ£) :
  log_embedding K x = 0 ‚Üî (‚àÄ w : infinite_place K, w x = 1) :=
begin
  dsimp only [log_embedding],
  rw function.funext_iff,
  simp_rw pi.zero_apply,
  split,
  { exact Œª h w, real.eq_one_of_pos_of_log_eq_zero ((w.pos_iff x).mpr (units.ne_zero x)) (h w), },
  { intros h w,
    simp [‚Üê coe_coe, h w, real.log_one], },
end

lemma nnnorm_eq [number_field K] (x : KÀ£) :
  ‚Äñlog_embedding K x‚Äñ‚Çä = finset.univ.sup (Œª w : infinite_place K, ‚Äñreal.log (w x)‚Äñ‚Çä ) :=
by simp only [pi.nnnorm_def, log_embedding]

lemma le_of_le [number_field K] (x : KÀ£) (r : ‚Ñù) :
  ‚Äñlog_embedding K x‚Äñ ‚â§ r ‚Üî ‚àÄ w : infinite_place K, real.exp (- r) ‚â§ w x ‚àß w x ‚â§ real.exp r :=
begin
   obtain hr | hr := lt_or_le r 0,
  { split,
    { intro h, exfalso,
      exact (not_le.mpr (lt_of_le_of_lt h hr)) (norm_nonneg _), },
    { intro h, exfalso,
      obtain ‚ü®w‚ü© := infinite_place.nonempty K,
      have := real.exp_le_exp.mp (le_trans (h w).1 (h w).2),
      linarith, }},
  { lift r to nnreal using hr,
    simp_rw [‚Üê coe_nnnorm, nnnorm_eq, nnreal.coe_le_coe, finset.sup_le_iff, finset.mem_univ,
      forall_true_left, ‚Üê nnreal.coe_le_coe, coe_nnnorm, real.norm_eq_abs, abs_le],
    split,
    { intros h w,
      specialize h w,
      rwa [‚Üê real.log_le_iff_le_exp, ‚Üê real.le_log_iff_exp_le],
      all_goals { exact (infinite_place.pos_iff w x).mpr (units.ne_zero x), }},
    { intros h w,
      specialize h w,
      rwa [real.log_le_iff_le_exp, real.le_log_iff_exp_le],
      all_goals { exact (infinite_place.pos_iff w x).mpr (units.ne_zero x), }}}
end

localized "notation `E` := (infinite_place K ‚Üí ‚Ñù)" in units

def unit_lattice : add_subgroup (E) :=
{ carrier := (log_embedding K) '' (unit_subgroup K),
  add_mem' :=
  begin
    rintros _ _ ‚ü®u, ‚ü®hu, rfl‚ü©‚ü© ‚ü®v, ‚ü®hv, rfl‚ü©‚ü©,
    exact ‚ü®u * v, ‚ü®(unit_subgroup K).mul_mem hu hv, map_mul K u v‚ü©‚ü©,
  end,
  zero_mem' := ‚ü®1, ‚ü®(unit_subgroup K).one_mem, map_one K‚ü©‚ü©,
  neg_mem' :=
  begin
    rintros _ ‚ü®u, ‚ü®hu, rfl‚ü©‚ü©,
    refine ‚ü®u‚Åª¬π, ‚ü®(unit_subgroup K).inv_mem hu, map_inv K u‚ü©‚ü©,
  end }

localized "notation `Œõ` := (unit_lattice K)" in units

lemma unit_lattice.kernel [number_field K] (x : ùì§ K) :
  log_embedding K x = 0 ‚Üî x ‚àà roots_of_unity K :=
by { rw [eq_zero_iff, mem_roots_of_unity K x], refl, }

lemma unit_lattice.discrete [number_field K]: discrete_topology Œõ :=
begin
  suffices : (metric.closed_ball (0 : Œõ) 1).finite,
  { exact
    add_group.discrete_of_finite_ball (by norm_num) (this.subset metric.ball_subset_closed_ball), },
  let A := {x : KÀ£ | is_integral ‚Ñ§ (x : K) ‚àß ‚àÄ œÜ : (K ‚Üí+* ‚ÑÇ), ‚ÄñœÜ x‚Äñ ‚â§ real.exp 1},
  have t1 : A.finite,
  { suffices : ((coe : KÀ£ ‚Üí K) '' A).finite,
    { exact this.of_finite_image (set.inj_on_of_injective units.ext _), },
    refine set.finite.subset (embeddings.finite_of_norm_le K ‚ÑÇ (real.exp 1)) _,
    rintros _ ‚ü®u, ‚ü®hu, rfl‚ü©‚ü©,
    rw set.mem_set_of_eq,
    exact hu, },
  have t2 : ((log_embedding K) '' A).finite := set.finite.image _ t1,
  suffices : ((coe : Œõ ‚Üí E)'' (metric.closed_ball 0 1)).finite,
  { exact this.of_finite_image (set.inj_on_of_injective (subtype.val_injective) _), },
  refine t2.subset _,
  rintros _ ‚ü®‚ü®_, ‚ü®x, ‚ü®hx, rfl‚ü©‚ü©‚ü©, ‚ü®hu, rfl‚ü©‚ü©,
  use x,
  split,
  { split,
    { rw set_like.mem_coe at hx,
      rw mem_unit_subgroup at hx,
      exact hx.1, },
    { intro œÜ,
      rw metric.mem_closed_ball at hu,
      rw dist_zero_right at hu,
      rw add_subgroup.coe_norm at hu,
      rw subtype.coe_mk at hu,
      rw le_of_le at hu,
      specialize hu (mk œÜ),
      rw apply at hu,
      exact hu.right, }},
  { refl, },
end

lemma unit_lattice.free_module : module.free ‚Ñ§ (unit_lattice K) := by sorry

lemma unit_lattice.rank_le [number_field K] :
  finrank ‚Ñ§ (unit_lattice K) ‚â§  card (infinite_place K) - 1 := by sorry

lemma unit_lattice.le_rank [number_field K] :
  card (infinite_place K) - 1 ‚â§ finrank ‚Ñ§ (unit_lattice K)  := by sorry

lemma unit_lattice.rank [number_field K] :
  finrank ‚Ñ§ (unit_lattice K) = card (infinite_place K) - 1 :=
le_antisymm (unit_lattice.rank_le K) (unit_lattice.le_rank K)

end number_field.log_embedding
