/-
Copyright (c) 2021 Alex Kontorovich and Heather Macbeth and Marc Masdeu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth, Marc Masdeu
-/

import analysis.complex.upper_half_plane
import linear_algebra.general_linear_group
import analysis.matrix

/-!
# The action of the modular group SL(2, ‚Ñ§) on the upper half-plane

We define the action of `SL(2,‚Ñ§)` on `‚Ñç` (via restriction of the `SL(2,‚Ñù)` action in
`analysis.complex.upper_half_plane`). We then define the standard fundamental domain
(`modular_group.fundamental_domain`, `ùíü`) for this action and show
(`modular_group.exists_smul_mem_fundamental_domain`) that any point in `‚Ñç` can be
moved inside `ùíü`.

## Main definitions

The standard (closed) fundamental domain of the action of `SL(2,‚Ñ§)` on `‚Ñç`:
`fundamental_domain := {z | 1 ‚â§ (z : ‚ÑÇ).norm_sq ‚àß |z.re| ‚â§ (1 : ‚Ñù) / 2}`

The standard open fundamental domain of the action of `SL(2,‚Ñ§)` on `‚Ñç`:
`fundamental_domain_open := {z | 1 < (z : ‚ÑÇ).norm_sq ‚àß |z.re| < (1 : ‚Ñù) / 2}`


## Main results

Any `z : ‚Ñç` can be moved to `ùíü` by an element of `SL(2,‚Ñ§)`:
`exists_smul_mem_fundamental_domain (z : ‚Ñç) : ‚àÉ g : SL(2,‚Ñ§), g ‚Ä¢ z ‚àà ùíü`

If both `z` and `Œ≥ ‚Ä¢ z` are in the open domain `ùíü·µí` then `z = Œ≥ ‚Ä¢ z`:
`fun_dom_lemma‚ÇÇ (z : ‚Ñç) (g : SL(2,‚Ñ§)) (hz : z ‚àà ùíü·µí) (hg : g ‚Ä¢ z ‚àà ùíü·µí) : z = g ‚Ä¢ z`

# Discussion

Standard proofs make use of the identity

`g ‚Ä¢ z = a / c - 1 / (c (cz + d))`

for `g = [[a, b], [c, d]]` in `SL(2)`, but this requires separate handling of whether `c = 0`.
Instead, our proof makes use of the following perhaps novel identity (see
`modular_group.smul_eq_lc_row0_add`):

`g ‚Ä¢ z = (a c + b d) / (c^2 + d^2) + (d z - c) / ((c^2 + d^2) (c z + d))`

where there is no issue of division by zero.

Another feature is that we delay until the very end the consideration of special matrices
`T=[[1,1],[0,1]]` (see `modular_group.T`) and `S=[[0,-1],[1,0]]` (see `modular_group.S`), by
instead using abstract theory on the properness of certain maps (phrased in terms of the filters
`filter.cocompact`, `filter.cofinite`, etc) to deduce existence theorems, first to prove the
existence of `g` maximizing `(g‚Ä¢z).im` (see `modular_group.exists_max_im`), and then among
those, to minimize `|(g‚Ä¢z).re|` (see `modular_group.exists_row_one_eq_and_min_re`).
-/

/- Disable these instances as they are not the simp-normal form, and having them disabled ensures
we state lemmas in this file without spurious `coe_fn` terms. -/
local attribute [-instance] matrix.special_linear_group.has_coe_to_fun
local attribute [-instance] matrix.general_linear_group.has_coe_to_fun

open complex matrix matrix.special_linear_group upper_half_plane
noncomputable theory

local notation `SL(` n `, ` R `)`:= special_linear_group (fin n) R
local prefix `‚Üë‚Çò`:1024 := @coe _ (matrix (fin 2) (fin 2) ‚Ñ§) _


open_locale upper_half_plane complex_conjugate

local attribute [instance] fintype.card_fin_even

namespace modular_group

section upper_half_plane_action

/-- For a subring `R` of `‚Ñù`, the action of `SL(2, R)` on the upper half-plane, as a restriction of
the `SL(2, ‚Ñù)`-action defined by `upper_half_plane.mul_action`. -/
instance {R : Type*} [comm_ring R] [algebra R ‚Ñù] : mul_action SL(2, R) ‚Ñç :=
mul_action.comp_hom ‚Ñç (map (algebra_map R ‚Ñù))

lemma coe_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : ‚Üë(g ‚Ä¢ z) = num g z / denom g z := rfl
lemma re_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g ‚Ä¢ z).re = (num g z / denom g z).re := rfl
@[simp] lemma smul_coe (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g : SL(2,‚Ñù)) ‚Ä¢ z = g ‚Ä¢ z := rfl

@[simp] lemma neg_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : -g ‚Ä¢ z = g ‚Ä¢ z :=
show ‚Üë(-g) ‚Ä¢ _ = _, by simp [neg_smul g z]

lemma im_smul (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : (g ‚Ä¢ z).im = (num g z / denom g z).im := rfl

lemma im_smul_eq_div_norm_sq (g : SL(2, ‚Ñ§)) (z : ‚Ñç) :
  (g ‚Ä¢ z).im = z.im / (complex.norm_sq (denom g z)) :=
im_smul_eq_div_norm_sq g z

@[simp] lemma denom_apply (g : SL(2, ‚Ñ§)) (z : ‚Ñç) : denom g z = ‚Üë‚Çòg 1 0 * z + ‚Üë‚Çòg 1 1 := by simp

end upper_half_plane_action

section bottom_row

/-- The two numbers `c`, `d` in the "bottom_row" of `g=[[*,*],[c,d]]` in `SL(2, ‚Ñ§)` are coprime. -/
lemma bottom_row_coprime {R : Type*} [comm_ring R] (g : SL(2, R)) :
  is_coprime ((‚Üëg : matrix (fin 2) (fin 2) R) 1 0) ((‚Üëg : matrix (fin 2) (fin 2) R) 1 1) :=
begin
  use [- (‚Üëg : matrix (fin 2) (fin 2) R) 0 1, (‚Üëg : matrix (fin 2) (fin 2) R) 0 0],
  rw [add_comm, neg_mul, ‚Üêsub_eq_add_neg, ‚Üêdet_fin_two],
  exact g.det_coe,
end

/-- Every pair `![c, d]` of coprime integers is the "bottom_row" of some element `g=[[*,*],[c,d]]`
of `SL(2,‚Ñ§)`. -/
lemma bottom_row_surj {R : Type*} [comm_ring R] :
  set.surj_on (Œª g : SL(2, R), @coe _ (matrix (fin 2) (fin 2) R) _ g 1) set.univ
    {cd | is_coprime (cd 0) (cd 1)} :=
begin
  rintros cd ‚ü®b‚ÇÄ, a, gcd_eqn‚ü©,
  let A := ![![a, -b‚ÇÄ], cd],
  have det_A_1 : det A = 1,
  { convert gcd_eqn,
    simp [A, det_fin_two, (by ring : a * (cd 1) + b‚ÇÄ * (cd 0) = b‚ÇÄ * (cd 0) + a * (cd 1))] },
  refine ‚ü®‚ü®A, det_A_1‚ü©, set.mem_univ _, _‚ü©,
  ext; simp [A]
end

end bottom_row

section tendsto_lemmas

open filter continuous_linear_map
local attribute [instance] matrix.normed_group matrix.normed_space
local attribute [simp] coe_smul

/-- The function `(c,d) ‚Üí |cz+d|^2` is proper, that is, preimages of bounded-above sets are finite.
-/
lemma tendsto_norm_sq_coprime_pair (z : ‚Ñç) :
  filter.tendsto (Œª p : fin 2 ‚Üí ‚Ñ§, ((p 0 : ‚ÑÇ) * z + p 1).norm_sq)
  cofinite at_top :=
begin
  let œÄ‚ÇÄ : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù := linear_map.proj 0,
  let œÄ‚ÇÅ : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù := linear_map.proj 1,
  let f : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚ÑÇ := œÄ‚ÇÄ.smul_right (z:‚ÑÇ) + œÄ‚ÇÅ.smul_right 1,
  have f_def : ‚áëf = Œª (p : fin 2 ‚Üí ‚Ñù), (p 0 : ‚ÑÇ) * ‚Üëz + p 1,
  { ext1,
    dsimp only [linear_map.coe_proj, real_smul,
      linear_map.coe_smul_right, linear_map.add_apply],
    rw mul_one, },
  have : (Œª (p : fin 2 ‚Üí ‚Ñ§), norm_sq ((p 0 : ‚ÑÇ) * ‚Üëz + ‚Üë(p 1)))
    = norm_sq ‚àò f ‚àò (Œª p : fin 2 ‚Üí ‚Ñ§, (coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò p),
  { ext1,
    rw f_def,
    dsimp only [function.comp],
    rw [of_real_int_cast, of_real_int_cast], },
  rw this,
  have hf : f.ker = ‚ä•,
  { let g : ‚ÑÇ ‚Üí‚Çó[‚Ñù] (fin 2 ‚Üí ‚Ñù) :=
      linear_map.pi ![im_lm, im_lm.comp ((z:‚ÑÇ) ‚Ä¢ (conj_ae  : ‚ÑÇ ‚Üí‚Çó[‚Ñù] ‚ÑÇ))],
    suffices : ((z:‚ÑÇ).im‚Åª¬π ‚Ä¢ g).comp f = linear_map.id,
    { exact linear_map.ker_eq_bot_of_inverse this },
    apply linear_map.ext,
    intros c,
    have hz : (z:‚ÑÇ).im ‚â† 0 := z.2.ne',
    rw [linear_map.comp_apply, linear_map.smul_apply, linear_map.id_apply],
    ext i,
    dsimp only [g, pi.smul_apply, linear_map.pi_apply, smul_eq_mul],
    fin_cases i,
    { show ((z : ‚ÑÇ).im)‚Åª¬π * (f c).im = c 0,
      rw [f_def, add_im, of_real_mul_im, of_real_im, add_zero, mul_left_comm,
        inv_mul_cancel hz, mul_one], },
    { show ((z : ‚ÑÇ).im)‚Åª¬π * ((z : ‚ÑÇ) * conj (f c)).im = c 1,
      rw [f_def, ring_hom.map_add, ring_hom.map_mul, mul_add, mul_left_comm, mul_conj,
        conj_of_real, conj_of_real, ‚Üê of_real_mul, add_im, of_real_im, zero_add,
        inv_mul_eq_iff_eq_mul‚ÇÄ hz],
      simp only [of_real_im, of_real_re, mul_im, zero_add, mul_zero] } },
  have h‚ÇÅ := (linear_equiv.closed_embedding_of_injective hf).tendsto_cocompact,
  have h‚ÇÇ : tendsto (Œª p : fin 2 ‚Üí ‚Ñ§, (coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò p) cofinite (cocompact _),
  { convert tendsto.pi_map_Coprod (Œª i, int.tendsto_coe_cofinite),
    { rw Coprod_cofinite },
    { rw Coprod_cocompact } },
  exact tendsto_norm_sq_cocompact_at_top.comp (h‚ÇÅ.comp h‚ÇÇ)
end


/-- Given `coprime_pair` `p=(c,d)`, the matrix `[[a,b],[*,*]]` is sent to `a*c+b*d`.
  This is the linear map version of this operation.
-/
def lc_row0 (p : fin 2 ‚Üí ‚Ñ§) : (matrix (fin 2) (fin 2) ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù :=
((p 0:‚Ñù) ‚Ä¢ linear_map.proj 0 + (p 1:‚Ñù) ‚Ä¢ linear_map.proj 1 : (fin 2 ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] ‚Ñù).comp
  (linear_map.proj 0)

@[simp] lemma lc_row0_apply (p : fin 2 ‚Üí ‚Ñ§) (g : matrix (fin 2) (fin 2) ‚Ñù) :
  lc_row0 p g = p 0 * g 0 0 + p 1 * g 0 1 :=
rfl

lemma lc_row0_apply' (a b : ‚Ñù) (c d : ‚Ñ§) (v : fin 2 ‚Üí ‚Ñù) :
  lc_row0 ![c, d] ![![a, b], v] = c * a + d * b :=
by simp

/-- Linear map sending the matrix [a, b; c, d] to the matrix [ac‚ÇÄ + bd‚ÇÄ, - ad‚ÇÄ + bc‚ÇÄ; c, d], for
some fixed `(c‚ÇÄ, d‚ÇÄ)`. -/
@[simps] def lc_row0_extend {cd : fin 2 ‚Üí ‚Ñ§} (hcd : is_coprime (cd 0) (cd 1)) :
  (matrix (fin 2) (fin 2) ‚Ñù) ‚âÉ‚Çó[‚Ñù] matrix (fin 2) (fin 2) ‚Ñù :=
linear_equiv.Pi_congr_right
![begin
    refine linear_map.general_linear_group.general_linear_equiv ‚Ñù (fin 2 ‚Üí ‚Ñù)
      (general_linear_group.to_linear (plane_conformal_matrix (cd 0 : ‚Ñù) (-(cd 1 : ‚Ñù)) _)),
    norm_cast,
    rw neg_sq,
    exact hcd.sq_add_sq_ne_zero
  end,
  linear_equiv.refl ‚Ñù (fin 2 ‚Üí ‚Ñù)]

/-- The map `lc_row0` is proper, that is, preimages of cocompact sets are finite in
`[[* , *], [c, d]]`.-/
theorem tendsto_lc_row0 {cd : fin 2 ‚Üí ‚Ñ§} (hcd : is_coprime (cd 0) (cd 1)) :
  tendsto (Œª g : {g : SL(2, ‚Ñ§) // ‚Üë‚Çòg 1 = cd}, lc_row0 cd ‚Üë(‚Üëg : SL(2, ‚Ñù)))
    cofinite (cocompact ‚Ñù) :=
begin
  let mB : ‚Ñù ‚Üí (matrix (fin 2) (fin 2)  ‚Ñù) := Œª t, ![![t, (-(1:‚Ñ§):‚Ñù)], coe ‚àò cd],
  have hmB : continuous mB,
  { simp only [continuous_pi_iff, fin.forall_fin_two],
    have : ‚àÄ c : ‚Ñù, continuous (Œª x : ‚Ñù, c) := Œª c, continuous_const,
    exact ‚ü®‚ü®continuous_id, @this (-1 : ‚Ñ§)‚ü©, ‚ü®this (cd 0), this (cd 1)‚ü©‚ü© },
  refine filter.tendsto.of_tendsto_comp _ (comap_cocompact hmB),
  let f‚ÇÅ : SL(2, ‚Ñ§) ‚Üí matrix (fin 2) (fin 2) ‚Ñù :=
    Œª g, matrix.map (‚Üëg : matrix _ _ ‚Ñ§) (coe : ‚Ñ§ ‚Üí ‚Ñù),
  have cocompact_‚Ñù_to_cofinite_‚Ñ§_matrix :
    tendsto (Œª m : matrix (fin 2) (fin 2) ‚Ñ§, matrix.map m (coe : ‚Ñ§ ‚Üí ‚Ñù)) cofinite (cocompact _),
  { simpa only [Coprod_cofinite, Coprod_cocompact]
      using tendsto.pi_map_Coprod (Œª i : fin 2, tendsto.pi_map_Coprod
        (Œª j : fin 2, int.tendsto_coe_cofinite)) },
  have hf‚ÇÅ : tendsto f‚ÇÅ cofinite (cocompact _) :=
    cocompact_‚Ñù_to_cofinite_‚Ñ§_matrix.comp subtype.coe_injective.tendsto_cofinite,
  have hf‚ÇÇ : closed_embedding (lc_row0_extend hcd) :=
    (lc_row0_extend hcd).to_continuous_linear_equiv.to_homeomorph.closed_embedding,
  convert hf‚ÇÇ.tendsto_cocompact.comp (hf‚ÇÅ.comp subtype.coe_injective.tendsto_cofinite) using 1,
  ext ‚ü®g, rfl‚ü© i j : 3,
  fin_cases i; [fin_cases j, skip],
  -- the following are proved by `simp`, but it is replaced by `simp only` to avoid timeouts.
  { simp only [mB, mul_vec, dot_product, fin.sum_univ_two, _root_.coe_coe, coe_matrix_coe,
      int.coe_cast_ring_hom, lc_row0_apply, function.comp_app, cons_val_zero, lc_row0_extend_apply,
      linear_map.general_linear_group.coe_fn_general_linear_equiv,
      general_linear_group.to_linear_apply, coe_plane_conformal_matrix, neg_neg, mul_vec_lin_apply,
      cons_val_one, head_cons] },
  { convert congr_arg (Œª n : ‚Ñ§, (-n:‚Ñù)) g.det_coe.symm using 1,
    simp only [f‚ÇÅ, mul_vec, dot_product, fin.sum_univ_two, matrix.det_fin_two, function.comp_app,
      subtype.coe_mk, lc_row0_extend_apply, cons_val_zero,
      linear_map.general_linear_group.coe_fn_general_linear_equiv,
      general_linear_group.to_linear_apply, coe_plane_conformal_matrix, mul_vec_lin_apply,
      cons_val_one, head_cons, map_apply, neg_mul, int.cast_sub, int.cast_mul, neg_sub],
    ring },
  { refl }
end

/-- This replaces `(g‚Ä¢z).re = a/c + *` in the standard theory with the following novel identity:

  `g ‚Ä¢ z = (a c + b d) / (c^2 + d^2) + (d z - c) / ((c^2 + d^2) (c z + d))`

  which does not need to be decomposed depending on whether `c = 0`. -/
lemma smul_eq_lc_row0_add {p : fin 2 ‚Üí ‚Ñ§} (hp : is_coprime (p 0) (p 1)) (z : ‚Ñç) {g : SL(2,‚Ñ§)}
  (hg : ‚Üë‚Çòg 1 = p) :
  ‚Üë(g ‚Ä¢ z) = ((lc_row0 p ‚Üë(g : SL(2, ‚Ñù))) : ‚ÑÇ) / (p 0 ^ 2 + p 1 ^ 2)
    + ((p 1 : ‚ÑÇ) * z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1)) :=
begin
  have nonZ1 : (p 0 : ‚ÑÇ) ^ 2 + (p 1) ^ 2 ‚â† 0 := by exact_mod_cast hp.sq_add_sq_ne_zero,
  have : (coe : ‚Ñ§ ‚Üí ‚Ñù) ‚àò p ‚â† 0 := Œª h, hp.ne_zero ((@int.cast_injective ‚Ñù _ _ _).comp_left h),
  have nonZ2 : (p 0 : ‚ÑÇ) * z + p 1 ‚â† 0 := by simpa using linear_ne_zero _ z this,
  field_simp [nonZ1, nonZ2, denom_ne_zero, -upper_half_plane.denom, -denom_apply],
  rw (by simp : (p 1 : ‚ÑÇ) * z - p 0 = ((p 1) * z - p 0) * ‚Üë(det (‚Üëg : matrix (fin 2) (fin 2) ‚Ñ§))),
  rw [‚Üêhg, det_fin_two],
  simp only [int.coe_cast_ring_hom, coe_matrix_coe, coe_fn_eq_coe,
    int.cast_mul, of_real_int_cast, map_apply, denom, int.cast_sub],
  ring,
end

lemma tendsto_abs_re_smul (z:‚Ñç) {p : fin 2 ‚Üí ‚Ñ§} (hp : is_coprime (p 0) (p 1)) :
  tendsto (Œª g : {g : SL(2, ‚Ñ§) // ‚Üë‚Çòg 1 = p}, |((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re|)
    cofinite at_top :=
begin
  suffices : tendsto (Œª g : (Œª g : SL(2, ‚Ñ§), ‚Üë‚Çòg 1) ‚Åª¬π' {p}, (((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re))
    cofinite (cocompact ‚Ñù),
  { exact tendsto_norm_cocompact_at_top.comp this },
  have : ((p 0 : ‚Ñù) ^ 2 + p 1 ^ 2)‚Åª¬π ‚â† 0,
  { apply inv_ne_zero,
    exact_mod_cast hp.sq_add_sq_ne_zero },
  let f := homeomorph.mul_right‚ÇÄ _ this,
  let ff := homeomorph.add_right (((p 1:‚ÑÇ)* z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1))).re,
  convert ((f.trans ff).closed_embedding.tendsto_cocompact).comp (tendsto_lc_row0 hp),
  ext g,
  change ((g : SL(2, ‚Ñ§)) ‚Ä¢ z).re = (lc_row0 p ‚Üë(‚Üëg : SL(2, ‚Ñù))) / (p 0 ^ 2 + p 1 ^ 2)
  + (((p 1:‚ÑÇ )* z - p 0) / ((p 0 ^ 2 + p 1 ^ 2) * (p 0 * z + p 1))).re,
  exact_mod_cast (congr_arg complex.re (smul_eq_lc_row0_add hp z g.2))
end

end tendsto_lemmas

section fundamental_domain

local attribute [simp] coe_smul re_smul

/-- For `z : ‚Ñç`, there is a `g : SL(2,‚Ñ§)` maximizing `(g‚Ä¢z).im` -/
lemma exists_max_im (z : ‚Ñç) :
  ‚àÉ g : SL(2, ‚Ñ§), ‚àÄ g' : SL(2, ‚Ñ§), (g' ‚Ä¢ z).im ‚â§ (g ‚Ä¢ z).im :=
begin
  classical,
  let s : set (fin 2 ‚Üí ‚Ñ§) := {cd | is_coprime (cd 0) (cd 1)},
  have hs : s.nonempty := ‚ü®![1, 1], is_coprime_one_left‚ü©,
  obtain ‚ü®p, hp_coprime, hp‚ü© :=
    filter.tendsto.exists_within_forall_le hs (tendsto_norm_sq_coprime_pair z),
  obtain ‚ü®g, -, hg‚ü© := bottom_row_surj hp_coprime,
  refine ‚ü®g, Œª g', _‚ü©,
  rw [im_smul_eq_div_norm_sq, im_smul_eq_div_norm_sq, div_le_div_left],
  { simpa [‚Üê hg] using hp (‚Üë‚Çòg' 1) (bottom_row_coprime g') },
  { exact z.im_pos },
  { exact norm_sq_denom_pos g' z },
  { exact norm_sq_denom_pos g z },
end

/-- Given `z : ‚Ñç` and a bottom row `(c,d)`, among the `g : SL(2,‚Ñ§)` with this bottom row, minimize
  `|(g‚Ä¢z).re|`.  -/
lemma exists_row_one_eq_and_min_re (z:‚Ñç) {cd : fin 2 ‚Üí ‚Ñ§} (hcd : is_coprime (cd 0) (cd 1)) :
  ‚àÉ g : SL(2,‚Ñ§), ‚Üë‚Çòg 1 = cd ‚àß (‚àÄ g' : SL(2,‚Ñ§), ‚Üë‚Çòg 1 = ‚Üë‚Çòg' 1 ‚Üí
  |(g ‚Ä¢ z).re| ‚â§ |(g' ‚Ä¢ z).re|) :=
begin
  haveI : nonempty {g : SL(2, ‚Ñ§) // ‚Üë‚Çòg 1 = cd} :=
    let ‚ü®x, hx‚ü© := bottom_row_surj hcd in ‚ü®‚ü®x, hx.2‚ü©‚ü©,
  obtain ‚ü®g, hg‚ü© := filter.tendsto.exists_forall_le (tendsto_abs_re_smul z hcd),
  refine ‚ü®g, g.2, _‚ü©,
  { intros g1 hg1,
    have : g1 ‚àà ((Œª g : SL(2, ‚Ñ§), ‚Üë‚Çòg 1) ‚Åª¬π' {cd}),
    { rw [set.mem_preimage, set.mem_singleton_iff],
      exact eq.trans hg1.symm (set.mem_singleton_iff.mp (set.mem_preimage.mp g.2)) },
    exact hg ‚ü®g1, this‚ü© },
end

/-- The matrix `T = [[1,1],[0,1]]` as an element of `SL(2,‚Ñ§)` -/
def T : SL(2,‚Ñ§) := ‚ü®![![1, 1], ![0, 1]], by norm_num [matrix.det_fin_two]‚ü©

/-- The matrix `T' (= T‚Åª¬π) = [[1,-1],[0,1]]` as an element of `SL(2,‚Ñ§)` -/
def T' : SL(2,‚Ñ§) := ‚ü®![![1, -1], ![0, 1]], by norm_num [matrix.det_fin_two]‚ü©

/-- The matrix `S = [[0,-1],[1,0]]` as an element of `SL(2,‚Ñ§)` -/
def S : SL(2,‚Ñ§) := ‚ü®![![0, -1], ![1, 0]], by norm_num [matrix.det_fin_two]‚ü©

lemma coe_T : ‚Üë‚ÇòT = ![![1, 1], ![0, 1]] := rfl

lemma coe_T_inv : ‚Üë‚Çò(T‚Åª¬π) = ![![1, -1], ![0, 1]] :=
begin
  rw [coe_inv, coe_T, adjugate_fin_two],
  simp,
end

/-- `coe_T_zpow` is the matrix `T` raised to the power `n : ‚Ñ§`. -/
lemma coe_T_zpow (n : ‚Ñ§) : ‚Üë‚Çò(T ^ n) = ![![1, n], ![0,1]] :=
begin
  induction n using int.induction_on with n h n h,
  { rw [zpow_zero, coe_one],  ext i j,
    fin_cases i; fin_cases j; simp, },
  { rw [zpow_add, zpow_one, coe_mul, h, coe_T], ext i j,
    fin_cases i; fin_cases j; simp [matrix.mul, dot_product, fin.sum_univ_succ]; ring, },
  { rw [zpow_sub, zpow_one, coe_mul, h, coe_T_inv], ext i j,
    fin_cases i; fin_cases j; simp [matrix.mul, dot_product, fin.sum_univ_succ]; ring, },
end

/- If `c = 1`, then `g = [[1,a],[0,1]] * S * [[1,d],[0,1]]`. -/
lemma g_eq_of_c_eq_one (g : SL(2,‚Ñ§)) (hc : ‚Üë‚Çòg 1 0 = 1) :
  g = T^(‚Üë‚Çòg 0 0) * S * T^(‚Üë‚Çòg 1 1) :=
begin
  ext i j, fin_cases i; fin_cases j,
  { simp [S, coe_T_zpow, matrix.mul_apply, fin.sum_univ_succ] },
  { have g_det : (1:‚Ñ§) = ‚Üë‚Çòg 0 0 * ‚Üë‚Çòg 1 1 - 1 * ‚Üë‚Çòg 0 1,
    { convert det_fin_two ‚Üë‚Çòg using 1,
      { rw g.det_coe },
      rw hc,
      ring },
    simp [S, coe_T_zpow, matrix.mul_apply, fin.sum_univ_succ],
    rw g_det,
    simp, },
  { simpa [S, coe_T_zpow, matrix.mul_apply, fin.sum_univ_succ] using hc },
  { simp [S, coe_T_zpow, matrix.mul_apply, fin.sum_univ_succ], },
end

/-- If `c=1`, then `[[1,-a],[0,1]]*g = S * [[1,d],[0,1]]`. -/
lemma coe_T_zpow_mul_g_eq_S_mul_coe_T_zpow_of_c_eq_one (g : SL(2,‚Ñ§))
  (hc : ‚Üë‚Çòg 1 0 = 1) : T^(- ‚Üë‚Çòg 0 0) * g = S * T^(‚Üë‚Çòg 1 1) :=
begin
  rw g_eq_of_c_eq_one g hc,
  ext i,
  fin_cases i; fin_cases j,
  { simp [coe_T_zpow, S, matrix.mul_apply, fin.sum_univ_succ], },
  { simp [coe_T_zpow, S, matrix.mul_apply, fin.sum_univ_succ],
    ring },
  { simp [coe_T_zpow, S, matrix.mul_apply, fin.sum_univ_succ], },
  { simp [coe_T_zpow, S, matrix.mul_apply, fin.sum_univ_succ], },
end

/-- If `1 < |z|`, then `|S‚Ä¢z| < 1` -/
lemma norm_sq_S_smul_lt_one {z : ‚Ñç} (h: 1 < norm_sq z) : norm_sq ‚Üë(S ‚Ä¢ z) < 1 :=
by simpa [S] using (inv_lt_inv z.norm_sq_pos zero_lt_one).mpr h

/-- If `|z| < 1`, then applying `S` strictly decreases `im` -/
lemma im_lt_im_S_smul {z : ‚Ñç} (h: norm_sq z < 1) : z.im < (S ‚Ä¢ z).im :=
begin
  have : z.im < z.im / norm_sq (z:‚ÑÇ),
  { have imz : 0 < z.im := im_pos z,
    apply (lt_div_iff z.norm_sq_pos).mpr,
    nlinarith },
  convert this,
  simp only [im_smul_eq_div_norm_sq],
  field_simp [norm_sq_denom_ne_zero, norm_sq_ne_zero, S]
end

/-- The standard (closed) fundamental domain of the action of `SL(2,‚Ñ§)` on `‚Ñç` -/
def fundamental_domain : set ‚Ñç :=
{z | 1 ‚â§ (z : ‚ÑÇ).norm_sq ‚àß |z.re| ‚â§ (1 : ‚Ñù) / 2}

/-- The standard open fundamental domain of the action of `SL(2,‚Ñ§)` on `‚Ñç` -/
def fundamental_domain_open : set ‚Ñç :=
{z | 1 < (z : ‚ÑÇ).norm_sq ‚àß |z.re| < (1 : ‚Ñù) / 2}

localized "notation `ùíü` := modular_group.fundamental_domain" in modular

localized "notation `ùíü·µí` := fundamental_domain_open" in modular

lemma three_lt_four_mul_im_sq_of_mem_fdo {z : ‚Ñç} (h : z ‚àà ùíü·µí) : 3 < 4 * z.im^2 :=
begin
  have : 1 < z.re * z.re + z.im * z.im := by simpa [complex.norm_sq_apply] using h.1,
  have := h.2,
  cases abs_cases z.re;
  nlinarith,
end

/-- Any `z : ‚Ñç` can be moved to `ùíü` by an element of `SL(2,‚Ñ§)`  -/
lemma exists_smul_mem_fundamental_domain (z : ‚Ñç) : ‚àÉ g : SL(2,‚Ñ§), g ‚Ä¢ z ‚àà ùíü :=
begin
  -- obtain a g‚ÇÄ which maximizes im (g ‚Ä¢ z),
  obtain ‚ü®g‚ÇÄ, hg‚ÇÄ‚ü© := exists_max_im z,
  -- then among those, minimize re
  obtain ‚ü®g, hg, hg'‚ü© := exists_row_one_eq_and_min_re z (bottom_row_coprime g‚ÇÄ),
  refine ‚ü®g, _‚ü©,
  -- `g` has same max im property as `g‚ÇÄ`
  have hg‚ÇÄ' : ‚àÄ (g' : SL(2,‚Ñ§)), (g' ‚Ä¢ z).im ‚â§ (g ‚Ä¢ z).im,
  { have hg'' : (g ‚Ä¢ z).im = (g‚ÇÄ ‚Ä¢ z).im,
    { rw [im_smul_eq_div_norm_sq, im_smul_eq_div_norm_sq, denom_apply, denom_apply, hg] },
    simpa only [hg''] using hg‚ÇÄ },
  split,
  { -- Claim: `1 ‚â§ ‚áënorm_sq ‚Üë(g ‚Ä¢ z)`. If not, then `S‚Ä¢g‚Ä¢z` has larger imaginary part
    contrapose! hg‚ÇÄ',
    refine ‚ü®S * g, _‚ü©,
    rw mul_action.mul_smul,
    exact im_lt_im_S_smul hg‚ÇÄ' },
  { show |(g ‚Ä¢ z).re| ‚â§ 1 / 2, -- if not, then either `T` or `T'` decrease |Re|.
    rw abs_le,
    split,
    { contrapose! hg',
      refine ‚ü®T * g, by simp [T, matrix.mul, matrix.dot_product, fin.sum_univ_succ], _‚ü©,
      rw mul_action.mul_smul,
      have : |(g ‚Ä¢ z).re + 1| < |(g ‚Ä¢ z).re| :=
        by cases abs_cases ((g ‚Ä¢ z).re + 1); cases abs_cases (g ‚Ä¢ z).re; linarith,
      convert this,
      simp [T] },
    { contrapose! hg',
      refine ‚ü®T' * g, by simp [T', matrix.mul, matrix.dot_product, fin.sum_univ_succ], _‚ü©,
      rw mul_action.mul_smul,
      have : |(g ‚Ä¢ z).re - 1| < |(g ‚Ä¢ z).re| :=
        by cases abs_cases ((g ‚Ä¢ z).re - 1); cases abs_cases (g ‚Ä¢ z).re; linarith,
      convert this,
      simp [T', sub_eq_add_neg] } }
end

/-- If `z‚ààùíü·µí`, and `n:‚Ñ§`, then `|z+n|>1`. -/
lemma move_by_T {z : ‚Ñç} (hz : z ‚àà ùíü·µí) (n : ‚Ñ§) : 1 < norm_sq (((T^n) ‚Ä¢ z) : ‚Ñç) :=
begin
  have hz‚ÇÅ : 1 < z.re * z.re + z.im * z.im := hz.1,
  have hz‚ÇÇ : |2 * z.re| ‚â§ 1,
  { rw [_root_.abs_mul, _root_.abs_two, ‚Üê le_div_iff' (@two_pos ‚Ñù _ _)],
    exact hz.2.le, },
  have hzn := int.nneg_mul_add_sq_of_abs_le_one n (2*z.re) hz‚ÇÇ,
  suffices : 1 < (z.re + ‚Üën) * (z.re + ‚Üën) + z.im * z.im, { simpa [coe_T_zpow, norm_sq], },
  linarith,
end

section unique_representative

variables {z : ‚Ñç} {g : SL(2,‚Ñ§)} (hz : z ‚àà ùíü·µí) (hg : g ‚Ä¢ z ‚àà ùíü·µí)
include hz hg

lemma abs_c_le_one : |‚Üë‚Çòg 1 0| ‚â§ 1 :=
begin
  let c' : ‚Ñ§ := ‚Üë‚Çòg 1 0,
  let c : ‚Ñù := (c' : ‚Ñù),
  suffices : 3 * c^2 < 4,
  { rw [‚Üê int.cast_pow, ‚Üê int.cast_three, ‚Üê int.cast_four, ‚Üê int.cast_mul, int.cast_lt] at this,
    replace this : c'^2 ‚â§ 1^2, { linarith, },
    rw ‚Üê _root_.abs_one,
    exact abs_le_abs_of_sq_le_sq this, },
  suffices : c ‚â† 0 ‚Üí 9 * c^4 < 16,
  { rcases eq_or_ne c 0 with hc | hc,
    { rw hc, norm_num, },
    { refine (abs_lt_of_sq_lt_sq' _ (by norm_num)).2,
      specialize this hc,
      linarith, }, },
  intros hc,
  replace hc : 0 < c^4, { rw pow_bit0_pos_iff; trivial, },
  have hgz : (c * z.im) ^ 4 / norm_sq (denom ‚Üëg z) ^ 2 ‚â§ 1 :=
    div_le_one_of_le (pow_four_le_pow_two_of_pow_two_le
      (upper_half_plane.c_mul_im_sq_le_norm_sq_denom z g)) (sq_nonneg _),
  calc 9 * c^4 < c^4 * z.im^2 * (g ‚Ä¢ z).im^2 * 16 : _
           ... = c^4 * z.im^4 / (norm_sq (denom g z))^2 * 16 : _
           ... ‚â§ 16 : by { rw ‚Üê mul_pow, linarith, },
  { have := mul_lt_mul_of_pos_right (mul_lt_mul'' (three_lt_four_mul_im_sq_of_mem_fdo hg)
      (three_lt_four_mul_im_sq_of_mem_fdo hz) (by linarith) (by linarith)) hc,
    linarith, },
  { rw [im_smul_eq_div_norm_sq g z, div_pow],
    ring, },
end

/-- If both `z` and `g‚Ä¢z` are in `ùíü·µí`, then `c` can't be `1`. -/
lemma c_ne_one : ‚Üë‚Çòg 1 0 ‚â† 1 :=
begin
  by_contra hc,
  let z‚ÇÅ := T^(‚Üë‚Çòg 1 1) ‚Ä¢ z,
  let w‚ÇÅ := T^(- ‚Üë‚Çòg 0 0) ‚Ä¢ (g ‚Ä¢ z),
  have w‚ÇÅ_norm : 1 < norm_sq w‚ÇÅ := move_by_T hg (- ‚Üë‚Çòg 0 0),
  have z‚ÇÅ_norm : 1 < norm_sq z‚ÇÅ := move_by_T hz (‚Üë‚Çòg 1 1),
  have w‚ÇÅ_S_z‚ÇÅ : w‚ÇÅ = S ‚Ä¢ z‚ÇÅ,
  { dsimp only [w‚ÇÅ, z‚ÇÅ],
    rw [‚Üê mul_action.mul_smul, coe_T_zpow_mul_g_eq_S_mul_coe_T_zpow_of_c_eq_one g hc,
      ‚Üê mul_action.mul_smul], },
  have := norm_sq_S_smul_lt_one z‚ÇÅ_norm,
  rw ‚Üê w‚ÇÅ_S_z‚ÇÅ at this,
  linarith,
end

/-- Second Main Fundamental Domain Lemma: If both `z` and `g‚Ä¢z` are in the open domain `ùíü·µí`, where
  `z:‚Ñç` and `g:SL(2,‚Ñ§)`, then `z = g ‚Ä¢ z`. -/
lemma eq_smul_self_of_mem_fdo_mem_fdo : z = g ‚Ä¢ z :=
begin
/-  The argument overview is: either `c=0`, in which case the action is translation, which must be
  by `0`, OR
  `c=¬±1`, which gives a contradiction from considering `im z`, `im(g‚Ä¢z)`, and `norm_sq(T^* z)`. -/
  have g_det : matrix.det ‚Üë‚Çòg = (‚Üë‚Çòg 0 0) * (‚Üë‚Çòg 1 1) - (‚Üë‚Çòg 1 0) * (‚Üë‚Çòg 0 1),
  { convert det_fin_two ‚Üë‚Çòg using 1,
    ring, },
  by_cases (‚Üë‚Çòg 1 0 = 0),
  { -- case `c=0`
    have := g_det,
    rw h at this,
    simp only [det_coe, zero_mul, sub_zero] at this,
    have := int.eq_one_or_neg_one_of_mul_eq_one' (this.symm),
    have gzIs : ‚àÄ (gg : SL(2,‚Ñ§)), ‚Üë‚Çògg 1 0 = 0 ‚Üí ‚Üë‚Çògg 0 0 = 1 ‚Üí ‚Üë‚Çògg 1 1 = 1 ‚Üí
      ‚Üë(gg ‚Ä¢ z : ‚Ñç) = (z : ‚ÑÇ) + ‚Üë‚Çògg 0 1,
    { intros gg h‚ÇÄ h‚ÇÅ h‚ÇÇ,
      simp [h‚ÇÄ, h‚ÇÅ, h‚ÇÇ], },
    have gIsId : ‚àÄ (gg : SL(2,‚Ñ§)), gg ‚Ä¢ z ‚àà ùíü·µí ‚Üí ‚Üë‚Çògg 1 0 = 0 ‚Üí ‚Üë‚Çògg 0 0 = 1 ‚Üí ‚Üë‚Çògg 1 1 = 1
      ‚Üí gg = 1,
    { intros gg hh h‚ÇÄ h‚ÇÅ h‚ÇÇ,
      ext i,
      fin_cases i; fin_cases j,
      simp only [h‚ÇÅ, coe_one, one_apply_eq],
      { simp only [nat.one_ne_zero, coe_one, fin.zero_eq_one_iff, ne.def, not_false_iff,
          one_apply_ne],
        by_contra hhh,
        have reZ : |z.re| < 1/2,
        { exact_mod_cast hz.2, },
        have reGz : |((gg ‚Ä¢ z):‚Ñç ).re| < 1/2,
        { exact_mod_cast hh.2, },
        have reZpN : |z.re + ‚Üë‚Çògg 0 1| < 1/2,
        { convert reGz using 2,
          rw (by simp : z.re + ‚Üë‚Çògg 0 1 = ((z:‚ÑÇ )+ ‚Üë‚Çògg 0 1).re),
          apply congr_arg complex.re,
          exact_mod_cast (gzIs gg h‚ÇÄ h‚ÇÅ h‚ÇÇ).symm, },
        have move_by_large : ‚àÄ x y : ‚Ñù, |x| < 1/2 ‚Üí |x+y|<1/2 ‚Üí 1 ‚â§ |y| ‚Üí false := Œª x y hx hxy hy,
          by cases abs_cases x; cases abs_cases y; cases abs_cases (x+y); linarith,
        refine move_by_large _ _ reZ reZpN _,
        exact_mod_cast  int.one_le_abs hhh, },
      simp only [h‚ÇÄ, nat.one_ne_zero, coe_one, fin.one_eq_zero_iff, ne.def, not_false_iff,
        one_apply_ne],
      simp only [h‚ÇÇ, coe_one, one_apply_eq], },
    have zIsGz : ‚àÄ (gg : SL(2,‚Ñ§)), ‚Üë‚Çògg 1 0 = 0 ‚Üí ‚Üë‚Çògg 0 0 = 1 ‚Üí ‚Üë‚Çògg 1 1 = 1 ‚Üí gg ‚Ä¢ z ‚àà ùíü·µí
      ‚Üí z = gg ‚Ä¢ z,
    { intros gg h‚ÇÄ h‚ÇÅ h‚ÇÇ hh,
      have := gIsId gg hh h‚ÇÄ h‚ÇÅ h‚ÇÇ,
      rw this,
      simp, },
    cases this,
    { -- case `a = d = 1`
      exact zIsGz g h this_1.1 this_1.2 hg, },
    { -- case `a = d = -1`
      rw ‚Üê neg_smul,
      apply zIsGz; simp,
      exact_mod_cast h,
      simp only [this_1, neg_neg],
      simp only [this_1, neg_neg],
      exact hg, }, },
  { -- case `c ‚â† 0`
    exfalso,
    -- argue first that `c=¬± 1`
    -- then show this is impossible
    rcases (int.abs_le_one_iff.mp $ abs_c_le_one hz hg) with hc | hc | hc,
    { contradiction, },
    { -- `c = 1`
      exact c_ne_one hz hg  hc, },
    { -- `c = -1`
      have neg_c_one : ‚Üë‚Çò(-g) 1 0 = 1,
      { have := eq_neg_of_eq_neg hc,
        simp [hc], },
      have neg_g_ùíü : (-g) ‚Ä¢ z ‚àà ùíü·µí,
      { convert hg using 1,
        simp, },
      exact c_ne_one hz neg_g_ùíü neg_c_one, }, },
end

end unique_representative

end fundamental_domain

end modular_group
