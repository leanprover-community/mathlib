/-
Copyright (c) 2022 Bolton Bailey, Sean Golinski. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bolton Bailey, Sean Golinski
-/

import data.zmod.basic
import number_theory.lucas_primality

/-!
# Temp docstring placeholder to stop the linter complaining -/


/-- Temp docstring placeholder to stop the linter complaining -/
def binpow {M} [has_one M] [has_mul M] (m : M) : ℕ → M :=
nat.binary_rec 1 (λ b _ ih, let ih2 := ih * ih in cond b (m * ih2) ih2)

/-- Temp docstring placeholder to stop the linter complaining -/
def fast_two_multiplicity : ℕ → ℕ :=
nat.binary_rec 0 (λ b _ ih, cond b 0 (ih+1))

/-- Temp docstring placeholder to stop the linter complaining -/
def fast_odd_part (n : ℕ) := n / (2 ^ fast_two_multiplicity n)

/-- Temp docstring placeholder to stop the linter complaining -/
def fast_strong_probable_prime (n : nat) (a : zmod n) : bool :=
binpow a (fast_odd_part (n-1)) = 1
∨ (∃ r : ℕ, r < fast_two_multiplicity (n-1) ∧ binpow a (2^r * fast_odd_part(n-1)) = -1)

/-- Temp docstring placeholder to stop the linter complaining -/
def full_miller_rabin (n : nat) (alist : list (zmod n)) : bool :=
alist.all (fast_strong_probable_prime n)

/-- Temp docstring placeholder to stop the linter complaining -/
def fermat_strong_probable_prime (n : nat) (a : zmod n) : bool :=
binpow a (n-1) = 1

/-- Temp docstring placeholder to stop the linter complaining -/
def fast_lucas_primality_test (n : nat) (a : zmod n) : bool :=
fermat_strong_probable_prime n a
∧ ∀ p ∈ (n-1).factors, binpow a ((n-1)/p) ≠ 1




--TODO(Bolton): Find a way of making modular exponentiation faster
-- set_option profiler true

-- #eval full_miller_rabin 100123456789 [3, 4, 5, 6]

-- #eval fermat_strong_probable_prime 100123456789 3

-- #eval fast_lucas_primality_test 100123456789 7

-- #eval to_bool (nat.prime 100123456789)

/--
#eval to_bool (fast_strong_probable_prime
732076415984407716500930890110748341036891545474241640017530295153135375476966118613366499327372572
229483994623962779929154073740299410511877382649662168451364733989666432367624461822978259946275863
400492951915926872120586678398840560396542014275446056513570562340110769749382038406603358494500132
736010822065995083045700593369181602136757993082280003063247330443135292722079226852734498317303176
989888219742097931548264262939229642033241429972549937982019858043172107760268596049563772948791362
416575630758624150149345245940733316340651880607631822626432049722496818410069138456134969639398360
311403847947016713238460038563112625610059351258085460713852707751233210687462556679680116641903984
562431562077796318508702465520077488435546626442870334455059482256354698804771595139460104229264167
367805001409687934900839448075693841444596525960963426027784005537406088567991975365437599345755357
04309133438699044782225441138503267450110880587797337550416104605526996323175235867026887792090633
97341738741 1012)
--#eval to_bool (fast_strong_probable_prime 1000003 2)
-- #eval binpow
-- (1024 : zmod 8469627293895910728853889660978710817164812082142989733076166
-- 118124179362694365152458133706500165359)
-- (fast_odd_part 8469627293895910728853889660978710817164812082142989733076
-- 166118124179362694365152458133706500165358)
--#eval to_bool (nat.prime 1000003)
--#eval to_bool (fast_strong_probable_prime 99999997 4)
--#eval (multiplicity 2 99999997)
--#eval to_bool (nat.prime 100123456789)
--#eval to_bool (fermat_strong_probable_prime
7320764159844077165009308901107483410368915454742416400175302951531353754769661186133664993273725722
2948399462396277992915407374029941051187738264966216845136473398966643236762446182297825994627586340
0492951915926872120586678398840560396542014275446056513570562340110769749382038406603358494500132736
0108220659950830457005933691816021367579930822800030632473304431352927220792268527344983173031769898
8821974209793154826426293922964203324142997254993798201985804317210776026859604956377294879136241657
5630758624150149345245940733316340651880607631822626432049722496818410069138456134969639398360311403
8479470167132384600385631126256100593512580854607138527077512332106874625566796801166419039845624315
6207779631850870246552007748843554662644287033445505948225635469880477159513946010422926416736780500
1409687934900839448075693841444596525960963426027784005537406088567991975365437599345755357043091334
3869904478222544113850326745011088058779733755041610460552699632317523586702688779209063397341738741
 23)


--example : nat.prime 6143411621 :=
--begin
  --norm_num,
--end
-/

-- This is here to stop Lean complaining `expected command`
example : true := trivial
