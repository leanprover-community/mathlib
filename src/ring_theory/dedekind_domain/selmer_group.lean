/-
Copyright (c) 2022 David Kurniadi Angdinata. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Kurniadi Angdinata
-/

import data.zmod.quotient
import ring_theory.dedekind_domain.adic_valuation

/-!
# Selmer groups of Dedekind domains

Let `K` be the field of fractions of a Dedekind domain `R`. For any set `S` of prime ideals in the
height one spectrum of `R`, and for any natural number `n`, the Selmer group `K(S, n)` is defined to
be the subgroup of units `Kˣ` modulo `n`-th powers `(Kˣ)ⁿ` such that each element has `v`-adic
valuation divisible by `n` for all prime ideals `v` away from `S`. In other words, this is exactly
the subgroup `K(S, n) = {x(Kˣ)ⁿ ∈ Kˣ/(Kˣ)ⁿ | ∀ v ∉ S, ord_v(x) ≡ 0 mod n}`.

There is a fundamental exact sequence `1 → R_Sˣ/(R_Sˣ)ⁿ → K(S, n) → Cl_S(R)[n] → 0`, where `R_Sˣ` is
the `S`-unit group of `R` and `Cl_S(R)` is the `S`-class group of `R`. If the flanking groups are
finite, then `K(S, n)` is finite by the first isomorphism theorem. Such is the case when `R` is the
ring of integers of a number field `K`, `S` is finite, and `n` is positive, in which case `R_Sˣ` is
finitely generated by Dirichlet's unit theorem and `Cl_S(R)` is finite by the class number theorem.

This file defines the Selmer group and some basic facts.

## Main definitions

* `is_dedekind_domain.height_one_spectrum.selmer_group`: the Selmer group.
* TODO: maps in the sequence

## Main statements

* TODO: proofs of exactness of the sequence
* TODO: finiteness for global fields

## Notations

* `K⟮S, n⟯`: the Selmer group with parameters `K`, `S`, and `n`.

## Implementation notes

The Selmer group is classically defined in terms of Galois cohomology as a subgroup of `H¹(K, μₙ)`
under certain local conditions defined by `v`-adic valuations, where `μₙ` is the group of `n`-th
roots of unity over a separable closure of `K`. Here `H¹(K, μₙ)` is identified with `Kˣ/(Kˣ)ⁿ` by
the long exact sequence from Kummer theory and Hilbert's theorem 90, and the fundamental exact
sequence is an easy consequence of the snake lemma. This file will define all the maps explicitly,
but isomorphisms to the Galois cohomological definition will be provided when possible.

## References

* https://doc.sagemath.org/html/en/reference/number_fields/sage/rings/number_field/selmer_group.html

## Tags

class group, selmer group, unit group
-/

open_locale classical discrete_valuation non_zero_divisors

universes u v

noncomputable theory

namespace is_dedekind_domain

variables {R : Type u} [comm_ring R] [is_domain R] [is_dedekind_domain R] {K : Type v} [field K]
  [algebra R K] [is_fraction_ring R K] (v : height_one_spectrum R)

local notation K/n := Kˣ ⧸ (pow_monoid_hom n : Kˣ →* Kˣ).range

/-! ### Valuations of non-zero elements -/

namespace height_one_spectrum

/-- The multiplicative `v`-adic valuation on `Kˣ`. -/
def valuation_of_ne_zero_to_fun (x : Kˣ) : multiplicative ℤ :=
let hx := is_localization.sec R⁰ (x : K) in multiplicative.of_add $
  (-(associates.mk v.as_ideal).count (associates.mk $ ideal.span {hx.fst}).factors : ℤ)
  - (-(associates.mk v.as_ideal).count (associates.mk $ ideal.span {(hx.snd : R)}).factors : ℤ)

lemma valuation_of_ne_zero_to_fun_eq (x : Kˣ) :
  (v.valuation_of_ne_zero_to_fun x : ℤₘ₀) = v.valuation (x : K) :=
begin
  change _ = _ * _,
  rw [units.coe_inv],
  change _ = ite _ _ _ * (ite (coe _ = _) _ _)⁻¹,
  rw [is_localization.to_localization_map_sec,
      if_neg $ is_localization.sec_fst_ne_zero le_rfl x.ne_zero,
      if_neg $ non_zero_divisors.coe_ne_zero _],
  any_goals { exact is_domain.to_nontrivial R },
  refl
end

/-- The multiplicative `v`-adic valuation on `Kˣ`. -/
def valuation_of_ne_zero : Kˣ →* multiplicative ℤ :=
{ to_fun   := v.valuation_of_ne_zero_to_fun,
  map_one' := by { rw [← with_zero.coe_inj, valuation_of_ne_zero_to_fun_eq], exact map_one _ },
  map_mul' := λ x y, by { rw [← with_zero.coe_inj, with_zero.coe_mul],
                          simp only [valuation_of_ne_zero_to_fun_eq], exact map_mul _ _ _ } }

lemma valuation_of_ne_zero_eq (x : Kˣ) : (v.valuation_of_ne_zero x : ℤₘ₀) = v.valuation (x : K) :=
valuation_of_ne_zero_to_fun_eq v x

local attribute [semireducible] mul_opposite

/-- The multiplicative `v`-adic valuation on `Kˣ/(Kˣ)ⁿ`. -/
def valuation_of_ne_zero_mod (n : ℕ) : K/n →* multiplicative (zmod n) :=
(int.quotient_zmultiples_nat_equiv_zmod n).to_multiplicative.to_monoid_hom.comp $
  quotient_group.map (pow_monoid_hom n : Kˣ →* Kˣ).range
  (add_subgroup.zmultiples (n : ℤ)).to_subgroup v.valuation_of_ne_zero
begin
  rintro _ ⟨x, rfl⟩,
  exact ⟨v.valuation_of_ne_zero x, by simpa only [pow_monoid_hom_apply, map_pow, int.to_add_pow]⟩
end

end height_one_spectrum

/-! ### Selmer groups -/

variables {S S' : set $ height_one_spectrum R} {n : ℕ}

/-- The Selmer group `K(S, n) = {x(Kˣ)ⁿ ∈ Kˣ/(Kˣ)ⁿ | ∀ v ∉ S, ord_v(x) ≡ 0 mod n}`. -/
def selmer_group : subgroup $ K/n :=
{ carrier  := {x : K/n | ∀ v ∉ S, (v : height_one_spectrum R).valuation_of_ne_zero_mod n x = 1},
  one_mem' := λ _ _, by rw [map_one],
  mul_mem' := λ _ _ hx hy v hv, by rw [map_mul, hx v hv, hy v hv, one_mul],
  inv_mem' := λ _ hx v hv, by rw [map_inv, hx v hv, inv_one] }

localized "notation K`⟮`S, n`⟯` := @selmer_group _ _ _ _ K _ _ _ S n" in selmer_group

lemma selmer_group.monotone (hS : S ≤ S') : K⟮S, n⟯ ≤ (K⟮S', n⟯) := λ _ hx v, hx v ∘ mt (@hS v)

/-- The multiplicative `v`-adic valuations on `K(S, n)` for all `v ∈ S`. -/
def selmer_group.valuation : K⟮S, n⟯ →* S → multiplicative (zmod n) :=
{ to_fun   := λ x v, (v : height_one_spectrum R).valuation_of_ne_zero_mod n (x : K/n),
  map_one' := funext $ λ v, map_one _,
  map_mul' := λ x y, funext $ λ v, map_mul _ x y }

lemma selmer_group.valuation_ker :
  selmer_group.valuation.ker = (K⟮(∅ : set $ height_one_spectrum R), n⟯).subgroup_of (K⟮S, n⟯) :=
begin
  ext ⟨_, hx⟩,
  split,
  { intros hx' v _,
    by_cases hv : v ∈ S,
    { exact congr_fun hx' ⟨v, hv⟩ },
    { exact hx v hv } },
  { exact λ hx', funext $ λ v, hx' v $ set.not_mem_empty v }
end

end is_dedekind_domain
