/-
Copyright (c) 2021 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Eric Wieser
-/

import ring_theory.ideal.basic
import ring_theory.ideal.operations
import linear_algebra.finsupp
import ring_theory.graded_algebra.basic

/-!

# Homogeneous ideal of a graded algebra

This file defines homogeneous ideals of `graded_algebra A` where `A : Œπ ‚Üí ideal R`and operations on
them:
* `mul`, `inf`, `Inf` of homogeneous ideals are homogeneous;
* `‚ä§`, `‚ä•`, i.e. the trivial ring and `R` are homogeneous;
* `radical` of a homogeneous ideal is homogeneous.
-/

open_locale big_operators pointwise

section is_homogeneous_ideal_defs

open set_like direct_sum set

variables {Œπ R : Type*} [comm_ring R] [decidable_eq Œπ] [add_comm_monoid Œπ]
variables (A : Œπ ‚Üí ideal R) [graded_algebra A]
variable (I : ideal R)

/--An `I : ideal R` is homogeneous if for every `r ‚àà I`, all homogeneous components
  of `r` are in `I`.-/
def ideal.is_homogeneous : Prop :=
‚àÄ (i : Œπ) ‚¶Ér : R‚¶Ñ, r ‚àà I ‚Üí (graded_algebra.decompose A r i : R) ‚àà I

lemma ideal.is_homogeneous_iff_forall_subset :
  ideal.is_homogeneous A I ‚Üî ‚àÄ i, (I : set R) ‚äÜ graded_algebra.proj A i ‚Åª¬π' I :=
iff.rfl

lemma ideal.is_homogeneous_iff_subset_Inter :
  ideal.is_homogeneous A I ‚Üî (I : set R) ‚äÜ ‚ãÇ i, graded_algebra.proj A i ‚Åª¬π' ‚ÜëI :=
subset_Inter_iff.symm

lemma ideal.is_homogeneous.exists_iff_eq_span :
  (‚àÉ (S : set (homogeneous_submonoid A)), I = ideal.span (coe '' S)) ‚Üî
  I = ideal.span {x | x ‚àà I ‚àß is_homogeneous A x} :=
-- get rid of the messy subtypes and set coercions
suffices (‚àÉ s : set R, s ‚äÜ set_of (is_homogeneous A) ‚àß I = ideal.span s) ‚Üî
  I = ideal.span (I ‚à© set_of (is_homogeneous A)),
from (subtype.exists_set_subtype _).trans this,
begin
  split,
  { rintros ‚ü®s, hs, rfl‚ü©,
    apply le_antisymm,
    { exact ideal.span_mono (subset_inter (ideal.subset_span) hs) },
    { exact ideal.span_le.2 (inter_subset_left _ _) } },
  { intros hI,
    exact ‚ü®(I : set R) ‚à© set_of (is_homogeneous A), inter_subset_right _ _, hI‚ü©, }
end

lemma mul_homogeneous_element_mem_of_mem
  {I : ideal R} (r x : R) (hx‚ÇÅ : is_homogeneous A x) (hx‚ÇÇ : x ‚àà I) (j : Œπ) :
  graded_algebra.proj A j (r * x) ‚àà I :=
begin
  letI : Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0) := Œª _ _, classical.dec _,
  rw [‚Üêgraded_algebra.sum_support_decompose A r, finset.sum_mul, linear_map.map_sum],
  apply ideal.sum_mem,
  intros k hk,
  obtain ‚ü®i, hi‚ü© := hx‚ÇÅ,
  have mem‚ÇÅ : (graded_algebra.decompose A r k : R) * x ‚àà A (k + i) := graded_monoid.mul_mem
    (submodule.coe_mem _) hi,
  rw [graded_algebra.proj_apply, graded_algebra.decompose_of_mem A mem‚ÇÅ,
    coe_of_submodule_apply A, submodule.coe_mk],
  split_ifs,
  { exact I.mul_mem_left _ hx‚ÇÇ },
  { exact I.zero_mem },
end

lemma ideal.is_homogeneous.iff_eq :
  ideal.is_homogeneous A I ‚Üî I = ideal.span {x | x ‚àà I ‚àß is_homogeneous A x} :=
‚ü® Œª hI, begin
  letI : Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0) := Œª _ _, classical.dec _,
  ext, split; intro hx,
  { rw ‚Üêgraded_algebra.sum_support_decompose A x,
    refine ideal.sum_mem _ _,
    intros j hj,
    rw ideal.mem_span, intros J HJ,
    refine HJ ‚ü®hI j hx, j, submodule.coe_mem _‚ü©, },
  { rw [ideal.mem_span] at hx,
    apply hx,
    exact inter_subset_left _ _, },
  end,
  Œª hI, begin
    intros i r hr,
    rw ‚Üêgraded_algebra.proj_apply,
    rw [ideal.span, finsupp.span_eq_range_total] at hI,
    rw hI at hr,
    obtain ‚ü®s, rfl‚ü© := hr,
    simp_rw [finsupp.total_apply, finsupp.sum, linear_map.map_sum, smul_eq_mul],
    refine ideal.sum_mem I _,
    rintros ‚ü®j, ‚ü®hj‚ÇÅ, hj‚ÇÇ‚ü©‚ü© hj‚ÇÉ,
    exact mul_homogeneous_element_mem_of_mem _ _ _ hj‚ÇÇ hj‚ÇÅ _,
  end ‚ü©

lemma ideal.is_homogeneous.iff_exists :
  ideal.is_homogeneous A I ‚Üî ‚àÉ (S : set (homogeneous_submonoid A)), I = ideal.span (coe '' S) :=
by rw [ideal.is_homogeneous.exists_iff_eq_span, ideal.is_homogeneous.iff_eq]

end is_homogeneous_ideal_defs

section operations

open set_like direct_sum set

variables {Œπ R : Type*} [comm_ring R] [decidable_eq Œπ] [add_comm_monoid Œπ]
variables (A : Œπ ‚Üí ideal R) [graded_algebra A]
variable (I : ideal R)

/--For any `comm_ring R`, we collect the homogeneous ideals of `R` into a type.-/
abbreviation homogeneous_ideal : Type* := { I : ideal R // ideal.is_homogeneous A I }

lemma ideal.is_homogeneous.bot : ideal.is_homogeneous A ‚ä• := Œª i r hr,
begin
  simp only [ideal.mem_bot] at hr,
  rw [hr, alg_equiv.map_zero, zero_apply],
  apply ideal.zero_mem
end

instance homogeneous_ideal.inhabited : inhabited (homogeneous_ideal A) :=
{ default := ‚ü®‚ä•, ideal.is_homogeneous.bot _‚ü©}

instance homogeneous_ideal.has_top :
  has_top (homogeneous_ideal A) :=
‚ü®‚ü®‚ä§, Œª _ _ _, by simp only [submodule.mem_top]‚ü©‚ü©

@[simp] lemma homogeneous_ideal.eq_top_iff
  (I : homogeneous_ideal A) : I = ‚ä§ ‚Üî I.1 = ‚ä§ :=
‚ü® Œª h, by { rw h, refl },
  Œª h, begin
    have h' : I.val = (‚ä§ : homogeneous_ideal A).val,
    rw h, refl,
    apply subtype.val_injective h',
  end ‚ü©

instance homogeneous_ideal.order : partial_order (homogeneous_ideal A) :=
partial_order.lift _ subtype.coe_injective

instance homogeneous_ideal.has_mem : has_mem R (homogeneous_ideal A) :=
{ mem := Œª r I, r ‚àà I.1 }

variables {A}

lemma ideal.is_homogeneous.inf {I J : ideal R}
  (HI : ideal.is_homogeneous A I) (HJ : ideal.is_homogeneous A J) :
  ideal.is_homogeneous A (I ‚äì J) :=
Œª i r hr, ‚ü®HI _ hr.1, HJ _ hr.2‚ü©

lemma homogeneous_ideal.Inf {‚Ñê : set (ideal R)} (h : ‚àÄ I ‚àà ‚Ñê, ideal.is_homogeneous A I) :
  ideal.is_homogeneous A (Inf ‚Ñê) :=
begin
  intros i x Hx, simp only [ideal.mem_Inf] at Hx ‚ä¢,
  intros J HJ,
  exact h _ HJ _ (Hx HJ),
end

lemma ideal.is_homogeneous.mul {I J : ideal R}
  (HI : ideal.is_homogeneous A I) (HJ : ideal.is_homogeneous A J) :
  ideal.is_homogeneous A (I * J) :=
begin
  rw ideal.is_homogeneous.iff_exists at HI HJ ‚ä¢,
  obtain ‚ü®‚ü®s‚ÇÅ, rfl‚ü©, ‚ü®s‚ÇÇ, rfl‚ü©‚ü© := ‚ü®HI, HJ‚ü©,
  rw [ideal.span_mul_span'],
  refine ‚ü®s‚ÇÅ * s‚ÇÇ, _‚ü©,
  apply congr_arg,
  ext, split; intro hx,
  { rw set.mem_mul at hx,
    obtain ‚ü®y1, y2, h1, h2, h3‚ü© := hx,
    rw set.mem_image at h1, obtain ‚ü®z1, h1‚ü© := h1,
    have hy1 : y1 ‚àà set_like.homogeneous_submonoid A,
    rw ‚Üêh1.2, exact z1.2,
    rw set.mem_image at h2, obtain ‚ü®z2, h2‚ü© := h2,
    have hy2 : y2 ‚àà set_like.homogeneous_submonoid A,
    rw ‚Üêh2.2, exact z2.2,

    use y1 * y2, apply submonoid.mul_mem,
    exact hy1, exact hy2,
    refine ‚ü®_, h3‚ü©, rw set.mem_mul, use y1, assumption,
    use y2, assumption, tidy, },
  { rw set.mem_image at hx,
    obtain ‚ü®y, hy1, hy‚ü© := hx,
    rw set.mem_mul at hy1 ‚ä¢,
    obtain ‚ü®z1, z2, hz1, hz2, hz3‚ü© := hy1,
    use z1, use z2, split, rw set.mem_image, use z1, refine ‚ü®hz1, rfl‚ü©,
    split, rw set.mem_image, use z2, refine ‚ü®hz2, rfl‚ü©, tidy, }
end

lemma ideal.is_homogeneous.sup {I J : ideal R}
  (HI : ideal.is_homogeneous A I) (HJ : ideal.is_homogeneous A J) :
  ideal.is_homogeneous A (I ‚äî J) :=
begin
  rw ideal.is_homogeneous.iff_exists at HI HJ ‚ä¢,
  obtain ‚ü®‚ü®s‚ÇÅ, rfl‚ü©, ‚ü®s‚ÇÇ, rfl‚ü©‚ü© := ‚ü®HI, HJ‚ü©,
  refine ‚ü®s‚ÇÅ ‚à™ s‚ÇÇ, _‚ü©,
  rw [set.image_union],
  exact (submodule.span_union _ _).symm,
end

lemma ideal.is_homogeneous.Sup {‚Ñê : set (ideal R)} (H‚Ñê : ‚àÄ (I ‚àà ‚Ñê), ideal.is_homogeneous A I) :
  ideal.is_homogeneous A (Sup ‚Ñê) :=
begin
  simp_rw [ideal.is_homogeneous.iff_exists] at H‚Ñê,
  set ùìà : ‚Ñê ‚Üí set (homogeneous_submonoid A) := Œª I : ‚Ñê, Exists.some (H‚Ñê I _) with ùìà_eq,
  have hùìà : ‚àÄ I : ‚Ñê, I.1 = ideal.span (coe '' ùìà I) := Œª I : ‚Ñê, Exists.some_spec (H‚Ñê I _),
  rw ideal.is_homogeneous.iff_exists,
  use sUnion (set.range ùìà),
  rw [sUnion_range, image_Union, ideal.span, submodule.span_Union],
  ext r, split,
  { suffices : Sup ‚Ñê ‚â§ _, revert r, exact this,
    rw Sup_le_iff, intros I HI,
    have ineq1 : I ‚â§ ideal.span I := ideal.subset_span, refine le_trans ineq1 _,
    rw ideal.span_le, simp only [coe_subset_coe, ideal.submodule_span_eq], intros x hx,
    rw submodule.mem_supr, intros J HJ,
    apply HJ ‚ü®I, HI‚ü©, rw ‚Üêhùìà ‚ü®I, HI‚ü©, assumption },
  { suffices : _ ‚â§  Sup ‚Ñê, revert r, exact this,
    rw supr_le_iff, intros I, rw submodule.span_le, intros x hx,
    simp only [mem_image] at hx, obtain ‚ü®x', hx1, hx2‚ü© := hx,
    simp only [mem_coe, subtype.val_eq_coe], dsimp only at hx1,
    apply ideal.mem_Sup_of_mem, use I.2,
    simp only [subtype.val_eq_coe] at hùìà ‚ä¢, rw hùìà,
    refine ideal.subset_span _, rw [mem_image], use x', refine ‚ü®hx1, hx2‚ü©, },
  intros I, exact I.2,
end

variables (A)

instance : has_inf (homogeneous_ideal A) :=
{ inf := Œª I J, ‚ü®I ‚äì J, I.prop.inf J.prop‚ü© }

instance : has_Inf (homogeneous_ideal A) :=
{ Inf := Œª ‚Ñê, ‚ü®Inf (coe '' ‚Ñê), homogeneous_ideal.Inf $ Œª _ ‚ü®I, _, hI‚ü©, hI ‚ñ∏ I.prop‚ü© }

instance : has_sup (homogeneous_ideal A) :=
{ sup := Œª I J, ‚ü®I ‚äî J, I.prop.sup J.prop‚ü© }

instance : has_Sup (homogeneous_ideal A) :=
{ Sup := Œª ‚Ñê, ‚ü®Sup (coe '' ‚Ñê), ideal.is_homogeneous.Sup $ Œª _ ‚ü®I, _, hI‚ü©, hI ‚ñ∏ I.prop‚ü© }

instance : has_mul (homogeneous_ideal A) :=
{ mul := Œª I J, ‚ü®I * J, I.prop.mul J.prop‚ü© }

instance : has_add (homogeneous_ideal A) := ‚ü®(‚äî)‚ü©

end operations

section homogeneous_core

open set_like direct_sum set

variables {Œπ R : Type*} [comm_ring R]
variables (A : Œπ ‚Üí ideal R)
variable (I : ideal R)

/-- For any `I : ideal R`, not necessarily homogeneous, there is a homogeneous ideal associated with
`I` spanned by all homogeneous elements in `I`. This construction is used when proving that the
radical of a homogeneous ideal is homogeneous. -/
def ideal.homogeneous_core : ideal R := ideal.span (set_of (is_homogeneous A) ‚à© I)

lemma ideal.homogeneous_core_is_mono : monotone (ideal.homogeneous_core A) := Œª I J I_le_J,
begin
  apply ideal.span_mono, rintros r ‚ü®hr1, hr2‚ü©,
  refine ‚ü®hr1, I_le_J hr2‚ü©,
end

lemma ideal.homogeneous_core_le_ideal :
  ideal.homogeneous_core A I ‚â§ I :=
begin
  rw ideal.homogeneous_core,
  conv_rhs { rw ‚Üêideal.span_eq I },
  apply ideal.span_mono, exact (set_of (is_homogeneous A)).inter_subset_right ‚ÜëI,
end

variables [add_comm_monoid Œπ] [decidable_eq Œπ]
variables [graded_algebra A]

lemma ideal.is_homogeneous.homogeneous_core :
  ideal.is_homogeneous A (ideal.homogeneous_core A I) :=
begin
  rw ideal.is_homogeneous.iff_exists,
  use ({x | ‚Üëx ‚àà I}),
  rw ideal.homogeneous_core, congr, ext, split; intro hx;
  simp only [mem_inter_eq, mem_set_of_eq, set_like.mem_coe] at hx ‚ä¢,
  use x, exact hx.1, refine ‚ü®hx.2, rfl‚ü©,
  obtain ‚ü®y, hy‚ÇÅ, hy‚ÇÇ‚ü© := hx, simp only [mem_set_of_eq] at hy‚ÇÅ, split, rw ‚Üêhy‚ÇÇ,
  rcases y with ‚ü®y, ‚ü®i, hy‚ÇÉ‚ü©‚ü©, use i, refine hy‚ÇÉ,
  rw ‚Üêhy‚ÇÇ, refine hy‚ÇÅ,
end

lemma ideal.is_homogeneous.homogeneous_core_eq_self [Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0)]
  (h : ideal.is_homogeneous A I) :
  ideal.homogeneous_core A I = I :=
begin
  ext x, split; intros hx,
  { apply ideal.homogeneous_core_le_ideal, exact hx, },
  { rw ‚Üêgraded_algebra.sum_support_decompose A x,
    refine ideal.sum_mem _ _,
    intros i hi, apply ideal.subset_span, split,
    use i, exact submodule.coe_mem _, apply h, exact hx },
end

lemma ideal.homogeneous_core.eq_Sup [Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0)] :
  ideal.homogeneous_core A I = Sup { J : ideal R | ideal.is_homogeneous A J ‚àß J ‚â§ I } :=
begin
  ext, split; intros hx,
  { rw [ideal.homogeneous_core, ideal.span, mem_span_set] at hx,
    obtain ‚ü®c, hc1, hc2‚ü© := hx,
    rw ‚Üêhc2, refine ideal.sum_mem _ _,
    intros r hc, dsimp only, rw [smul_eq_mul], refine ideal.mul_mem_left _ _ _,
    have hr1 : is_homogeneous A r := (hc1 hc).1,
    obtain ‚ü®i, hi‚ü© := hr1,
    have mem1 : ideal.span {r} ‚àà {J : ideal R | ideal.is_homogeneous A J ‚àß J ‚â§ I},
    { split, rw ideal.is_homogeneous.iff_exists,
      refine ‚ü®{(‚ü®r, ‚ü®i, hi‚ü©‚ü© : homogeneous_submonoid A)}, _‚ü©,
      congr, simp only [image_singleton, subtype.coe_mk], rw ideal.span_le,
      simp only [mem_coe, singleton_subset_iff], exact (hc1 hc).2 },
    apply ideal.mem_Sup_of_mem mem1, rw ideal.mem_span_singleton },
  { have hom1 := ideal.is_homogeneous.homogeneous_core A I,
    have hom2 : ideal.is_homogeneous A (Sup {J : ideal R | ideal.is_homogeneous A J ‚àß J ‚â§ I}),
    { apply ideal.is_homogeneous.Sup, rintros J ‚ü®HJ1, HJ2‚ü©, exact HJ1, },
    rw [ideal.homogeneous_core, ideal.mem_span],
    unfold has_Sup.Sup at hx, unfold conditionally_complete_lattice.Sup at hx,
    unfold complete_lattice.Sup at hx, rw ideal.mem_Inf at hx,
    intros J HJ, apply hx, rintro K ‚ü®HK1, HK2‚ü©, intros r hr,
    rw ‚Üêgraded_algebra.sum_support_decompose A r, refine ideal.sum_mem _ _,
    intros i hi, apply HJ, refine ‚ü®‚ü®i, submodule.coe_mem _‚ü©, _‚ü©,  apply HK2,
    apply HK1, exact hr }
end

end homogeneous_core

section homogeneous_hull

variables {Œπ : Type*} [add_comm_monoid Œπ] [decidable_eq Œπ]
variables {R : Type*} [comm_ring R]
variables (A : Œπ ‚Üí ideal R) [graded_algebra A]
variable (I : ideal R)

open set_like


/--For any `I : ideal R`, not necessarily homogeneous, there is a homogeneous ideal associated with
`I` spanned by all homogeneous components of elements in `I`. -/
def ideal.homogeneous_hull : ideal R :=
  ideal.span {r : R | ‚àÉ (i : Œπ) (x : I), (graded_algebra.decompose A x i : R) = r}

lemma ideal.is_homogeneous.homogeneous_hull :
  ideal.is_homogeneous A (ideal.homogeneous_hull A I) :=
begin
  rw ideal.is_homogeneous.iff_exists,
  use {x : homogeneous_submonoid A | ‚àÉ (i : Œπ) (r : I), (graded_algebra.decompose A r i : R) = x},
  rw [ideal.homogeneous_hull], congr, ext r, split; intros h,
  { obtain ‚ü®i, ‚ü®x, hx1‚ü©, hx2‚ü© := h,
    exact ‚ü®‚ü®(graded_algebra.decompose A x i),
      ‚ü®i, submodule.coe_mem _‚ü©‚ü©, ‚ü®‚ü®i, ‚ü®‚ü®x, hx1‚ü©, rfl‚ü©‚ü©, hx2‚ü©‚ü©,},
  { obtain ‚ü®_, ‚ü®‚ü®i, ‚ü®‚ü®r, hr‚ü©, h‚ü©‚ü©, rfl‚ü©‚ü© := h,
    use i, use ‚ü®r, hr‚ü©, exact h }
end

lemma ideal.ideal_le_homogeneous_hull [Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0)] :
  I ‚â§ ideal.homogeneous_hull A I :=
begin
  intros r hr,
  rw [‚Üêgraded_algebra.sum_support_decompose A r, ideal.homogeneous_hull],
  refine ideal.sum_mem _ _, intros j hj,
  apply ideal.subset_span, use j, use ‚ü®r, hr‚ü©, refl,
end

lemma ideal.homogeneous_hull_is_mono : monotone (ideal.homogeneous_hull A) := Œª I J I_le_J,
begin
  apply ideal.span_mono, rintros r ‚ü®hr1, ‚ü®x, hx‚ü©, rfl‚ü©,
  refine ‚ü®hr1, ‚ü®‚ü®x, I_le_J hx‚ü©, rfl‚ü©‚ü©,
end

lemma ideal.homogeneous_hull.eq_Inf [Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0)] :
  ideal.homogeneous_hull A I = Inf { J : ideal R | ideal.is_homogeneous A J ‚àß I ‚â§ J } :=
begin
  ext, split; intros hx,
  { rw ideal.mem_Inf, rintros K ‚ü®HK1, HK2‚ü©,
    rw [ideal.homogeneous_hull, ideal.mem_span] at hx,
    apply hx K, rintros r ‚ü®i, ‚ü®‚ü®y, hy‚ü©, rfl‚ü©‚ü©,
    apply HK1, apply HK2, exact hy, },
  { rw ideal.mem_Inf at hx,
    refine @hx (ideal.homogeneous_hull A I) _,
    exact ‚ü®ideal.is_homogeneous.homogeneous_hull _ _, ideal.ideal_le_homogeneous_hull _ _‚ü©, }
end

lemma ideal.is_homogeneous.homogeneous_hull_eq_self [Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0)]
  (h : ideal.is_homogeneous A I) :
  ideal.homogeneous_hull A I = I :=
begin
  rw ideal.homogeneous_hull.eq_Inf, ext x, split; intros hx,
  rw ideal.mem_Inf at hx, apply hx, refine ‚ü®h, le_refl I‚ü©,
  rw ideal.mem_Inf, rintros J ‚ü®HJ1, HJ2‚ü©, apply HJ2, exact hx,
end

end homogeneous_hull


section galois_connection

variables {Œπ : Type*} [add_comm_monoid Œπ] [decidable_eq Œπ]
variables {R : Type*} [comm_ring R]
variables (A : Œπ ‚Üí ideal R) [graded_algebra A]
variable [Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0)]

lemma ideal.homgeneous_hull.gc :
  galois_connection
    (Œª I, ‚ü®ideal.homogeneous_hull A I, ideal.is_homogeneous.homogeneous_hull A I‚ü© :
      ideal R ‚Üí homogeneous_ideal A)
    (Œª I, I.1 : homogeneous_ideal A ‚Üí ideal R)
   := Œª I J,
‚ü® Œª H, begin
    dsimp only at H,
    refine le_trans _ H,
    apply ideal.ideal_le_homogeneous_hull,
  end,
  Œª H, begin
    suffices : ideal.homogeneous_hull A I ‚â§ J.val,
    exact this,
    rw ‚Üêideal.is_homogeneous.homogeneous_hull_eq_self A J.1 J.2,
    exact ideal.homogeneous_hull_is_mono A H,
  end ‚ü©

lemma ideal.homogeneous_core.gc :
  galois_connection
    (Œª I, I.1 : homogeneous_ideal A ‚Üí ideal R)
    (Œª I, ‚ü®ideal.homogeneous_core A I, ideal.is_homogeneous.homogeneous_core A I‚ü© :
      ideal R ‚Üí homogeneous_ideal A)
     := Œª I J,
‚ü® Œª H, begin
    dsimp only at H,
    suffices : I.1 ‚â§ ideal.homogeneous_core A J,
    exact this,
    rw ‚Üêideal.is_homogeneous.homogeneous_core_eq_self A I.1 I.2,
    exact ideal.homogeneous_core_is_mono A H,
  end, Œª H, begin
    refine le_trans H _,
    apply ideal.homogeneous_core_le_ideal,
  end‚ü©

/--There is a galois insertion between homogeneous ideals and ideals via
`ideal.homgeneous_hull A` and `(Œª I, I.1)`-/
def ideal.homogeneous_hull.gi :
  galois_insertion
    (Œª I, ‚ü®ideal.homogeneous_hull A I, ideal.is_homogeneous.homogeneous_hull A I‚ü© :
      ideal R ‚Üí homogeneous_ideal A)
    (Œª I, I.1 : homogeneous_ideal A ‚Üí ideal R) :=
{ choice := Œª I H, ‚ü®I, begin
    have eq : I = ideal.homogeneous_hull A I,
    have ineq1 : I ‚â§ ideal.homogeneous_hull A I := ideal.ideal_le_homogeneous_hull A I,
    exact le_antisymm ineq1 H,
    rw eq, apply ideal.is_homogeneous.homogeneous_hull,
  end‚ü©,
  gc := ideal.homgeneous_hull.gc A,
  le_l_u := Œª ‚ü®I, HI‚ü©, by { apply ideal.ideal_le_homogeneous_hull },
  choice_eq := Œª I H, begin
    refine le_antisymm _ H, apply ideal.ideal_le_homogeneous_hull,
  end }

/--There is a galois coinsertion between homogeneous ideals and ideals via
`(Œª I, I.1)` and `ideal.homogeneous_core`-/
def ideal.homogeneous_core.gi :
  galois_coinsertion
    (Œª I, I.1 : homogeneous_ideal A ‚Üí ideal R)
    (Œª I, ‚ü®ideal.homogeneous_core A I, ideal.is_homogeneous.homogeneous_core A I‚ü© :
      ideal R ‚Üí homogeneous_ideal A) :=
{ choice := Œª I HI, ‚ü®I, begin
    have eq : I = ideal.homogeneous_core A I,
    refine le_antisymm HI _,
    apply (ideal.homogeneous_core_le_ideal A I),
    rw eq, apply ideal.is_homogeneous.homogeneous_core,
  end‚ü©,
  gc := ideal.homogeneous_core.gc A,
  u_l_le := Œª I, by apply ideal.homogeneous_core_le_ideal,
  choice_eq := Œª I H, begin
    apply le_antisymm, exact H, apply ideal.homogeneous_core_le_ideal,
  end, }

end galois_connection

section linear_ordered_cancel_add_comm_monoid

variables {Œπ : Type*} [linear_ordered_cancel_add_comm_monoid Œπ] [decidable_eq Œπ]
variables {R : Type*} [comm_ring R]
variables (A : Œπ ‚Üí ideal R) [graded_algebra A]
variable [Œ† (I : homogeneous_ideal A) (x : R),
  decidable_pred (Œª (i : Œπ), graded_algebra.proj A i x ‚àâ I)]
variable [Œ† (i : Œπ) (x : A i), decidable (x ‚â† 0)]

lemma homogeneous_ideal.is_prime_iff
  (I : homogeneous_ideal A)
  (I_ne_top : I ‚â† ‚ä§)
  (homogeneous_mem_or_mem : ‚àÄ {x y : R},
    set_like.is_homogeneous A x ‚Üí set_like.is_homogeneous A y
    ‚Üí (x * y ‚àà I.1 ‚Üí x ‚àà I.1 ‚à® y ‚àà I.1)) : ideal.is_prime I.1 :=
‚ü®Œª rid, begin
  have rid' : I.val = (‚ä§ : homogeneous_ideal A).val,
  unfold has_top.top, simp only [rid], refl,
  apply I_ne_top, exact subtype.val_injective rid',
end, begin
  intros x y hxy, by_contradiction rid,
  obtain ‚ü®rid‚ÇÅ, rid‚ÇÇ‚ü© := not_or_distrib.mp rid,
  set set‚ÇÅ := (graded_algebra.support A x).filter (Œª i, graded_algebra.proj A i x ‚àâ I) with set‚ÇÅ_eq,
  set set‚ÇÇ := (graded_algebra.support A y).filter (Œª i, graded_algebra.proj A i y ‚àâ I) with set‚ÇÇ_eq,
  have set‚ÇÅ_nonempty : set‚ÇÅ.nonempty,
  { replace rid‚ÇÅ : ¬¨(‚àÄ (i : Œπ), (graded_algebra.decompose A x i : R) ‚àà I.val),
    { intros rid, apply rid‚ÇÅ, rw ‚Üêgraded_algebra.sum_support_decompose A x,
      apply ideal.sum_mem, intros, apply rid, },
    rw [not_forall] at rid‚ÇÅ,
    obtain ‚ü®i, h‚ü© := rid‚ÇÅ,
    refine ‚ü®i, _‚ü©, rw set‚ÇÅ_eq, simp only [ne.def, dfinsupp.mem_support_to_fun, finset.mem_filter],
    refine ‚ü®_, h‚ü©, rw graded_algebra.mem_support_iff, intro rid‚ÇÉ,
    rw graded_algebra.proj_apply at rid‚ÇÉ, rw rid‚ÇÉ at h,
    simp only [not_true, submodule.zero_mem, add_monoid_hom.map_zero] at h, exact h, },
  have set‚ÇÇ_nonempty : set‚ÇÇ.nonempty,
  { replace rid‚ÇÇ : ¬¨(‚àÄ (i : Œπ), (graded_algebra.decompose A y i : R) ‚àà I.val),
    { intros rid, apply rid‚ÇÇ, rw ‚Üêgraded_algebra.sum_support_decompose A y,
      apply ideal.sum_mem, intros, apply rid, },
    rw [not_forall] at rid‚ÇÇ,
    obtain ‚ü®i, h‚ü© := rid‚ÇÇ,
    refine ‚ü®i, _‚ü©, rw set‚ÇÇ_eq, simp only [ne.def, dfinsupp.mem_support_to_fun, finset.mem_filter],
    refine ‚ü®_, h‚ü©, rw graded_algebra.mem_support_iff, intro rid‚ÇÉ,
    rw graded_algebra.proj_apply at rid‚ÇÉ, rw rid‚ÇÉ at h,
    simp only [not_true, submodule.zero_mem, add_monoid_hom.map_zero] at h, exact h, },
  set max‚ÇÅ := set‚ÇÅ.max' set‚ÇÅ_nonempty with max‚ÇÅ_eq,
  set max‚ÇÇ := set‚ÇÇ.max' set‚ÇÇ_nonempty with max‚ÇÇ_eq,
  have mem_max‚ÇÅ := finset.max'_mem set‚ÇÅ set‚ÇÅ_nonempty,
  rw [‚Üêmax‚ÇÅ_eq, set‚ÇÅ_eq] at mem_max‚ÇÅ,
  have mem_max‚ÇÇ := finset.max'_mem set‚ÇÇ set‚ÇÇ_nonempty,
  rw [‚Üêmax‚ÇÇ_eq, set‚ÇÇ_eq] at mem_max‚ÇÇ,
  replace hxy : ‚àÄ (i : Œπ), (graded_algebra.decompose A (x * y) i : R) ‚àà I.val,
  { intros i, apply I.2, exact hxy, },
  specialize hxy (max‚ÇÅ + max‚ÇÇ),
  have eq :=
    calc  graded_algebra.proj A (max‚ÇÅ + max‚ÇÇ) (x * y)
        = ‚àë ij in ((graded_algebra.support A x).product (graded_algebra.support A y)).filter
            (Œª (z : Œπ √ó Œπ), z.1 + z.2 = max‚ÇÅ + max‚ÇÇ),
            (graded_algebra.proj A ij.1 x) * (graded_algebra.proj A ij.2 y)
        : _ --(0)
    ... = ‚àë ij in ((graded_algebra.support A x).product (graded_algebra.support A y)).filter
            (Œª (z : Œπ √ó Œπ), z.1 + z.2 = max‚ÇÅ + max‚ÇÇ)
                    \ {(max‚ÇÅ, max‚ÇÇ)} ‚à™ {(max‚ÇÅ, max‚ÇÇ)},
            (graded_algebra.proj A ij.1 x) * (graded_algebra.proj A ij.2 y)
        : _ -- (1),
    ... = ‚àë (ij : Œπ √ó Œπ) in ((graded_algebra.support A x).product
            (graded_algebra.support A y)).filter
            (Œª (z : Œπ √ó Œπ), prod.fst z + z.snd = max‚ÇÅ + max‚ÇÇ)
                    \ {(max‚ÇÅ, max‚ÇÇ)},
            (graded_algebra.proj A (prod.fst ij) x) * (graded_algebra.proj A ij.snd y)
        + ‚àë ij in {(max‚ÇÅ, max‚ÇÇ)}, (graded_algebra.proj A (prod.fst ij) x)
            * (graded_algebra.proj A ij.snd y)
        : _ -- (2)
    ... = ‚àë ij in ((graded_algebra.support A x).product (graded_algebra.support A y)).filter
            (Œª (z : Œπ √ó Œπ), z.1 + z.2 = max‚ÇÅ + max‚ÇÇ)
                    \ {(max‚ÇÅ, max‚ÇÇ)},
            (graded_algebra.proj A ij.1 x) * (graded_algebra.proj A ij.2 y)
        + _
        : by rw finset.sum_singleton,

  have eq‚ÇÇ :
    (graded_algebra.proj A (max‚ÇÅ, max‚ÇÇ).fst) x * (graded_algebra.proj A (max‚ÇÅ, max‚ÇÇ).snd) y
          = graded_algebra.proj A (max‚ÇÅ + max‚ÇÇ) (x * y)
          - ‚àë (ij : Œπ √ó Œπ) in finset.filter (Œª (z : Œπ √ó Œπ), z.fst + z.snd = max‚ÇÅ + max‚ÇÇ)
              ((graded_algebra.support A x).product (graded_algebra.support A y)) \ {(max‚ÇÅ, max‚ÇÇ)},
              (graded_algebra.proj A ij.fst) x * (graded_algebra.proj A ij.snd) y,
  { rw eq, ring },

  have mem_I‚ÇÇ : ‚àë (ij : Œπ √ó Œπ) in finset.filter (Œª (z : Œπ √ó Œπ), z.fst + z.snd = max‚ÇÅ + max‚ÇÇ)
              ((graded_algebra.support A x).product (graded_algebra.support A y)) \ {(max‚ÇÅ, max‚ÇÇ)},
              (graded_algebra.proj A ij.fst) x * (graded_algebra.proj A ij.snd) y ‚àà I,
  { apply ideal.sum_mem, rintros ‚ü®i, j‚ü© H,
    simp only [not_and, prod.mk.inj_iff, finset.mem_sdiff, ne.def, dfinsupp.mem_support_to_fun,
       finset.mem_singleton, finset.mem_filter, finset.mem_product] at H,
    obtain ‚ü®‚ü®‚ü®H‚ÇÅ, H‚ÇÇ‚ü©, H‚ÇÉ‚ü©, H‚ÇÑ‚ü© := H,
    cases lt_trichotomy i max‚ÇÅ,
    { -- in this case `i < max‚ÇÅ`, so `max‚ÇÇ < j`, so `of A j (y j) ‚àà I`
      have ineq : max‚ÇÇ < j,
      { by_contra rid‚ÇÇ, rw not_lt at rid‚ÇÇ,
        have rid‚ÇÉ := add_lt_add_of_le_of_lt rid‚ÇÇ h,
        conv_lhs at rid‚ÇÉ { rw add_comm },
        conv_rhs at rid‚ÇÉ { rw add_comm },
        rw H‚ÇÉ at rid‚ÇÉ, exact lt_irrefl _ rid‚ÇÉ, },
      have not_mem_j : j ‚àâ set‚ÇÇ,
      { intro rid‚ÇÇ,
        rw max‚ÇÇ_eq at ineq,
        have rid‚ÇÉ := (finset.max'_lt_iff set‚ÇÇ set‚ÇÇ_nonempty).mp ineq j rid‚ÇÇ,
        exact lt_irrefl _ rid‚ÇÉ, },
      rw set‚ÇÇ_eq at not_mem_j,
      simp only [not_and, not_not, ne.def, dfinsupp.mem_support_to_fun,
        finset.mem_filter] at not_mem_j,
      specialize not_mem_j H‚ÇÇ,
      apply ideal.mul_mem_left,
      convert not_mem_j, },
    { cases h,
      { -- in this case `i = max‚ÇÅ`, so `max‚ÇÇ = j`, contradictory
        have : j = max‚ÇÇ,
        { rw h at H‚ÇÉ,
          exact linear_ordered_cancel_add_comm_monoid.add_left_cancel _ _ _ H‚ÇÉ, },
        exfalso,
        exact H‚ÇÑ h this, },
      { -- in this case `i > max‚ÇÅ`, so `i < max‚ÇÅ`, so `of A i (x i) ‚àà I`
        have ineq : max‚ÇÅ < i,
        { by_contra rid‚ÇÇ, rw not_lt at rid‚ÇÇ,
          have rid‚ÇÉ := add_lt_add_of_le_of_lt rid‚ÇÇ h,
          conv_lhs at rid‚ÇÉ { rw linear_ordered_cancel_add_comm_monoid.add_comm },
          exact lt_irrefl _ rid‚ÇÉ, },
        have not_mem_i : i ‚àâ set‚ÇÅ,
        { intro rid‚ÇÇ,
          rw max‚ÇÅ_eq at ineq,
          have rid‚ÇÉ := (finset.max'_lt_iff set‚ÇÅ set‚ÇÅ_nonempty).mp ineq i rid‚ÇÇ,
          exact lt_irrefl _ rid‚ÇÉ,},
        rw set‚ÇÅ_eq at not_mem_i,
        simp only [not_and, not_not, ne.def, dfinsupp.mem_support_to_fun,
          finset.mem_filter] at not_mem_i,
        specialize not_mem_i H‚ÇÅ,
        apply ideal.mul_mem_right,
        convert not_mem_i, }, } },
  have mem_I‚ÇÉ :
    (graded_algebra.proj A (max‚ÇÅ, max‚ÇÇ).fst) x * (graded_algebra.proj A (max‚ÇÅ, max‚ÇÇ).snd) y ‚àà I,
  { rw eq‚ÇÇ, apply ideal.sub_mem,
    have HI := I.2,
    specialize HI (max‚ÇÅ + max‚ÇÇ) hxy, exact hxy, exact mem_I‚ÇÇ, },
  specialize homogeneous_mem_or_mem ‚ü®max‚ÇÅ, _‚ü© ‚ü®max‚ÇÇ, _‚ü© mem_I‚ÇÉ,
  rw [graded_algebra.proj_apply], exact submodule.coe_mem _,
  rw [graded_algebra.proj_apply], exact submodule.coe_mem _,
  cases homogeneous_mem_or_mem,
  simp only [ne.def, dfinsupp.mem_support_to_fun, finset.mem_filter] at mem_max‚ÇÅ,
  refine mem_max‚ÇÅ.2 homogeneous_mem_or_mem,
  simp only [ne.def, dfinsupp.mem_support_to_fun, finset.mem_filter] at mem_max‚ÇÇ,
  refine mem_max‚ÇÇ.2 homogeneous_mem_or_mem,

  -- (0)
  rw [graded_algebra.proj_apply, alg_equiv.map_mul, graded_algebra.support, graded_algebra.support,
       direct_sum.coe_mul_apply_submodule], refl,

  -- (1)
  congr, ext, split; intros H,
  { simp only [finset.mem_filter, ne.def, dfinsupp.mem_support_to_fun, finset.mem_product] at H,
    rw finset.mem_union,
    by_cases a = (max‚ÇÅ, max‚ÇÇ),
    right, rw h, exact finset.mem_singleton_self (max‚ÇÅ, max‚ÇÇ),
    left, rw finset.mem_sdiff, split,
    simp only [finset.mem_filter, ne.def, dfinsupp.mem_support_to_fun, finset.mem_product],
    exact H, intro rid, simp only [finset.mem_singleton] at rid, exact h rid, },
  { rw finset.mem_union at H, cases H,
    rw finset.mem_sdiff at H, exact H.1,
    simp only [finset.mem_filter, ne.def, dfinsupp.mem_support_to_fun, finset.mem_product],
    simp only [finset.mem_singleton] at H, rw H,
    refine ‚ü®‚ü®_, _‚ü©, rfl‚ü©,
    simp only [ne.def, dfinsupp.mem_support_to_fun, finset.mem_filter] at mem_max‚ÇÅ,
    exact mem_max‚ÇÅ.1,
    simp only [ne.def, dfinsupp.mem_support_to_fun, finset.mem_filter] at mem_max‚ÇÇ,
    exact mem_max‚ÇÇ.1, },

  -- (2)
  rw [finset.sum_union],
  apply finset.disjoint_iff_inter_eq_empty.mpr,
  rw finset.eq_empty_iff_forall_not_mem, rintros ‚ü®i, j‚ü© Hij,
  rw [finset.mem_inter, finset.mem_sdiff, finset.mem_filter] at Hij,
  simp only [not_and, prod.mk.inj_iff, ne.def, dfinsupp.mem_support_to_fun, finset.mem_singleton,
    finset.mem_product] at Hij,
  exact Hij.1.2 Hij.2.1 Hij.2.2,
end‚ü©

lemma homogeneous_ideal.rad_eq (I : homogeneous_ideal A) :
  I.1.radical = Inf {J | I.1 ‚â§ J ‚àß ideal.is_homogeneous A J ‚àß J.is_prime} :=
begin
  have subset‚ÇÅ : I.1.radical ‚â§ Inf {J | I.1 ‚â§ J ‚àß ideal.is_homogeneous A J ‚àß J.is_prime},
  { rw ideal.radical_eq_Inf, intros x hx,
    rw [submodule.mem_Inf] at hx ‚ä¢, intros J HJ, apply hx,
    obtain ‚ü®HJ‚ÇÅ, _, HJ‚ÇÇ‚ü© := HJ,
    refine ‚ü®HJ‚ÇÅ, HJ‚ÇÇ‚ü©, },
  have subset‚ÇÇ : Inf {J | I.1 ‚â§ J ‚àß ideal.is_homogeneous A J ‚àß J.is_prime} ‚â§ I.1.radical,
  { intros x hx,
    rw ideal.radical_eq_Inf,
    rw [submodule.mem_Inf] at hx ‚ä¢,
    rintros J ‚ü®HJ‚ÇÅ, HJ‚ÇÇ‚ü©,
    specialize hx (ideal.homogeneous_core A J) _,
    refine ‚ü®_, ideal.is_homogeneous.homogeneous_core A _, _‚ü©,
    { have HI := I.2,
      rw [ideal.is_homogeneous.iff_eq] at HI,
      rw HI, apply ideal.span_mono, intros y hy,
      obtain ‚ü®hy‚ÇÅ, ‚ü®z, hz‚ü©‚ü© := hy,
      specialize HJ‚ÇÅ hy‚ÇÅ, refine ‚ü®‚ü®z, hz‚ü©, HJ‚ÇÅ‚ü©, },
    { set J' := ideal.homogeneous_core A J with eq_J',
      have homogeneity‚ÇÄ := ideal.is_homogeneous.homogeneous_core A J,
      apply homogeneous_ideal.is_prime_iff A ‚ü®J', homogeneity‚ÇÄ‚ü©,
      intro rid,
      have rid' : J = ‚ä§,
      { have : J' ‚â§ J := ideal.homogeneous_core_le_ideal A J,
        simp only [homogeneous_ideal.eq_top_iff] at rid,
        rw rid at this, rw top_le_iff at this, exact this, },
      apply HJ‚ÇÇ.1, exact rid',
      rintros x y hx hy hxy,
      have H := HJ‚ÇÇ.mem_or_mem (ideal.homogeneous_core_le_ideal A J hxy),
      cases H,
      { left,
        have : ‚àÄ i : Œπ, (graded_algebra.decompose A x i : R) ‚àà
          (‚ü®J', homogeneity‚ÇÄ‚ü© : homogeneous_ideal A),
        { intros i, apply homogeneity‚ÇÄ, apply ideal.subset_span,
          simp only [set.mem_inter_eq, set_like.mem_coe, set.mem_set_of_eq],
          refine ‚ü®hx, H‚ü©, },
        rw ‚Üêgraded_algebra.sum_support_decompose A x, apply ideal.sum_mem J',
        intros j hj, apply this, },
      { right,
        have : ‚àÄ i : Œπ, (graded_algebra.decompose A y i : R) ‚àà
          (‚ü®J', homogeneity‚ÇÄ‚ü© : homogeneous_ideal A),
        { intros i, apply homogeneity‚ÇÄ, apply ideal.subset_span,
          simp only [set.mem_inter_eq, set_like.mem_coe, set.mem_set_of_eq],
          refine ‚ü®hy, H‚ü©, }, rw ‚Üêgraded_algebra.sum_support_decompose A y, apply ideal.sum_mem J',
        intros j hj, apply this, }, },
      refine (ideal.homogeneous_core_le_ideal A J) hx, },

  ext x, split; intro hx,
  exact subset‚ÇÅ hx, exact subset‚ÇÇ hx,
end

lemma homogeneous_ideal.rad (I : homogeneous_ideal A)  :
  ideal.is_homogeneous A I.1.radical :=
begin
  have radI_eq := homogeneous_ideal.rad_eq A I,
  rw radI_eq,
  have : Inf {J : ideal R | I.val ‚â§ J ‚àß ideal.is_homogeneous A J ‚àß J.is_prime} =
  (Inf {J : homogeneous_ideal A | I.1 ‚â§ J.1 ‚àß J.1.is_prime }).1,
  simp only [subtype.coe_le_coe, subtype.val_eq_coe], congr, ext J, split; intro H,
  { use ‚ü®J, H.2.1‚ü©, split, refine ‚ü®H.1, H.2.2‚ü©, refl, },
  { obtain ‚ü®K, ‚ü®‚ü®HK‚ÇÅ, HK‚ÇÇ‚ü©, HK‚ÇÉ‚ü©‚ü© := H,
    split, convert HK‚ÇÅ, rw ‚ÜêHK‚ÇÉ, split,
    rw ‚ÜêHK‚ÇÉ, exact K.2, rw ‚ÜêHK‚ÇÉ, exact HK‚ÇÇ, },
  rw this,
  refine (Inf {J : homogeneous_ideal A | I.val ‚â§ J.val ‚àß J.val.is_prime}).2,
end

end linear_ordered_cancel_add_comm_monoid
