import measure_theory.measure_space tactic

universe u

open measure_theory filter finset
open_locale filter topological_space big_operators

section
variables {Œ± : Type u} [complete_lattice Œ±]

lemma supr_le_eq_supr_add {u : ‚Ñï ‚Üí Œ±} (n : ‚Ñï) : (‚®Ü i ‚â• n, u i) = ‚®Ü i, u (i + n) :=
begin
  apply le_antisymm;
  simp only [supr_le_iff],
  { exact Œª i hi, le_Sup ‚ü®i - n, by { dsimp only [], congr, omega }‚ü© },
  { exact Œª i, le_Sup ‚ü®i + n, by simp‚ü© }
end

lemma limsup_eq_infi_supr_of_nat' {u : ‚Ñï ‚Üí Œ±} : limsup at_top u = ‚®Ön:‚Ñï, ‚®Üi, u (i + n) :=
by simp only [limsup_eq_infi_supr_of_nat, supr_le_eq_supr_add]

end

section

lemma nnreal.sub_lt_iff {a b c : nnreal} (h : b ‚â§ a) : a - b < c ‚Üî a < b + c :=
by simp only [‚Üênnreal.coe_lt_coe, nnreal.coe_sub h, nnreal.coe_add, sub_lt_iff_lt_add']

lemma lt_top_of_lt_tsum_lt_top {Œ± : Type*} {f : Œ± ‚Üí ennreal} (hf : (‚àë' i, f i) < ‚ä§) :
  ‚àÄ x, f x < ‚ä§ :=
begin
  contrapose! hf,
  rcases hf with ‚ü®x, hx‚ü©,
  exact le_trans hx (ennreal.le_tsum _)
end

lemma to_nnreal_of_sum_lt_top {Œ± : Type*} {f : Œ± ‚Üí ennreal} (hf : (‚àë' i, f i) < ‚ä§) (x : Œ±) :
  (((ennreal.to_nnreal ‚àò f) x : nnreal) : ennreal) = f x :=
ennreal.coe_to_nnreal $ ennreal.lt_top_iff_ne_top.1 $ lt_top_of_lt_tsum_lt_top hf _

lemma summable_to_nnreal {Œ± : Type u} {f : Œ± ‚Üí ennreal} (hf : (‚àë' i, f i) < ‚ä§) :
  summable (ennreal.to_nnreal ‚àò f) :=
by simpa only [‚Üêennreal.tsum_coe_ne_top_iff_summable, ‚Üêennreal.lt_top_iff_ne_top,
  to_nnreal_of_sum_lt_top hf] using hf

lemma nnreal.not_lt_zero {a : nnreal} : ¬¨(a < 0) := by simp

lemma le_has_sum {Œ± : Type*} [topological_space Œ±] [ordered_add_comm_monoid Œ±]
  [order_closed_topology Œ±] {Œ≤ : Type*} {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : has_sum f a) (x : Œ≤)
  (hx : ‚àÄ y ‚â† x, 0 ‚â§ f y) : f x ‚â§ a :=
calc f x = ‚àë x in {x}, f x : finset.sum_singleton.symm
... ‚â§ a : sum_le_has_sum _ (by { convert hx, simp }) hf

lemma le_has_sum' {Œ± : Type*} [topological_space Œ±] [canonically_ordered_add_monoid Œ±]
  [order_closed_topology Œ±] {Œ≤ : Type*} {f : Œ≤ ‚Üí Œ±} {a : Œ±} (hf : has_sum f a) (x : Œ≤) :
  f x ‚â§ a :=
le_has_sum hf x $ Œª _ _, zero_le _

lemma le_tsum {Œ± : Type*} [topological_space Œ±] [ordered_add_comm_monoid Œ±]
  [order_closed_topology Œ±] {Œ≤ : Type*} {f : Œ≤ ‚Üí Œ±} (hf : summable f) (x : Œ≤)
  (hx : ‚àÄ y ‚â† x, 0 ‚â§ f y) : f x ‚â§ ‚àë' x, f x :=
le_has_sum (summable.has_sum hf) x hx

lemma le_tsum' {Œ± : Type*} [topological_space Œ±] [canonically_ordered_add_monoid Œ±]
  [order_closed_topology Œ±] {Œ≤ : Type*} {f : Œ≤ ‚Üí Œ±} (hf : summable f) (x : Œ≤) :
  f x ‚â§ ‚àë' x, f x :=
le_tsum hf x $ Œª _ _, zero_le _

lemma nnreal.sub_eq_iff {a b c : nnreal} (h : b ‚â§ a) : a - b = c ‚Üî a = c + b :=
by rw [‚Üênnreal.eq_iff, nnreal.coe_sub h, ‚Üênnreal.eq_iff, nnreal.coe_add, sub_eq_iff_eq_add]

lemma nnreal.summable_shift (f : ‚Ñï ‚Üí nnreal) (hf : summable f) (k : ‚Ñï) :
  summable (Œª i, f (i + k)) :=
nnreal.summable_comp_injective hf $ add_left_injective k

lemma nnreal.sum_add_tsum_nat_add {f : ‚Ñï ‚Üí nnreal} (k : ‚Ñï) (hf : summable f) :
  (‚àë' i, f i) = (‚àë i in range k, f i) + ‚àë' i, f (i + k) :=
by rw [‚Üênnreal.coe_eq, nnreal.coe_tsum, nnreal.coe_add, nnreal.coe_sum, nnreal.coe_tsum,
  sum_add_tsum_nat_add k (nnreal.summable_coe.2 hf)]

lemma nnreal.zero_le {a : nnreal} : 0 ‚â§ a := a.2

lemma has_sum_zero_iff {Œ± : Type*} {Œ≤ : Type*} [topological_space Œ±]
  [canonically_ordered_add_monoid Œ±] [order_closed_topology Œ±] {f : Œ≤ ‚Üí Œ±} :
  has_sum f 0 ‚Üî ‚àÄ x, f x = 0 :=
begin
  split,
  { contrapose!,
    exact Œª ‚ü®x, hx‚ü© h, irrefl _ (lt_of_lt_of_le (zero_lt_iff_ne_zero.2 hx) (le_has_sum' h x)) },
  { intro h,
    convert has_sum_zero,
    exact funext h }
end

lemma tsum_eq_zero_iff {Œ± : Type*} {Œ≤ : Type*} [topological_space Œ±]
  [canonically_ordered_add_monoid Œ±] [order_closed_topology Œ±] {f : Œ≤ ‚Üí Œ±} (hf : summable f) :
  (‚àë' i, f i) = 0 ‚Üî ‚àÄ x, f x = 0 :=
by rw [‚Üêhas_sum_zero_iff, hf.has_sum_iff]

lemma nnreal.tendsto_sum_add
  (f : ‚Ñï ‚Üí nnreal) (hf : summable f) : tendsto (Œª i, ‚àë' k, f (k + i)) at_top (ùìù 0) :=
begin
  by_cases h : ‚àÄ i, f i = 0,
  { simp only [h, tsum_zero],
    exact tendsto_const_nhds },
  refine tendsto_order.2 ‚ü®Œª a ha, false.elim (nnreal.not_lt_zero ha), Œª a ha, _‚ü©,
  have hf' := summable.has_sum hf,
  rw [nnreal.has_sum_iff_tendsto_nat, tendsto_order] at hf',
  rcases hf' with ‚ü®hf', -‚ü©,
  simp only [ge_iff_le, eventually_at_top] at ‚ä¢ hf',
  have tsum_sub_lt : (‚àë' i, f i) - a < ‚àë' i, f i,
  { refine nnreal.sub_lt_self _ ha,
    contrapose! h,
    simpa only [‚Üêtsum_eq_zero_iff hf, le_zero_iff] using h },
  rcases hf' _ tsum_sub_lt with ‚ü®n, hn‚ü©,
  refine ‚ü®n, Œª m hm, _‚ü©,
  specialize hn m hm,
  by_cases h : a ‚â§ ‚àë' i, f i,
  { have sum_le_tsum : ‚àë i in range m, f i ‚â§ ‚àë' i, f i,
    { exact sum_le_tsum _ (Œª _ _, nnreal.zero_le) hf },
    rw [nnreal.sub_lt_iff h, add_comm, ‚Üênnreal.sub_lt_iff sum_le_tsum] at hn,
    convert hn,
    symmetry,
    rw [nnreal.sub_eq_iff sum_le_tsum, add_comm, nnreal.sum_add_tsum_nat_add _ hf] },
  { push_neg at h,
    refine lt_of_le_of_lt _ h,
    exact tsum_le_tsum_of_inj (Œª k, k + m) (add_left_injective m) (Œª _ _, nnreal.zero_le)
      (Œª _, le_refl _) (nnreal.summable_shift _ hf _) hf }
end

lemma ennreal.tendsto_sum_add (f : ‚Ñï ‚Üí ennreal) (hf : (‚àë' i, f i) < ‚ä§) :
  tendsto (Œª i, ‚àë' k, f (k + i)) at_top (ùìù 0) :=
begin
  have : ‚àÄ i, (‚àë' k, (((ennreal.to_nnreal ‚àò f) (k + i) : nnreal) : ennreal)) =
    (‚àë' k, (ennreal.to_nnreal ‚àò f) (k + i) : nnreal) :=
    Œª i, (ennreal.coe_tsum (nnreal.summable_shift _ (summable_to_nnreal hf) _)).symm,
  simp only [Œª x, (to_nnreal_of_sum_lt_top hf x).symm, ‚Üêennreal.coe_zero,
    this, ennreal.tendsto_coe] { single_pass := tt },
  exact nnreal.tendsto_sum_add _ (summable_to_nnreal hf)
end

end

section

variables {Œ± : Type u} [measurable_space Œ±] {Œº : measure Œ±}

/-- The Borel-Cantelli lemma. -/
lemma measure_limsup_eq_zero {s : ‚Ñï ‚Üí set Œ±} (hs : ‚àÄ i, is_measurable (s i))
  (hs' : (‚àë' i, Œº (s i)) < ‚ä§) : Œº (limsup at_top s) = 0 :=
begin
  rw limsup_eq_infi_supr_of_nat',

  refine tendsto_nhds_unique
    (tendsto_measure_Inter (Œª i, is_measurable.Union (Œª b, hs (b + i))) _
      ‚ü®0, lt_of_le_of_lt (measure_Union_le s) hs'‚ü©)
    (tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_const_nhds
      (ennreal.tendsto_sum_add (Œº ‚àò s) hs')
      (eventually_of_forall (by simp only [forall_const, zero_le]))
      (eventually_of_forall (Œª i, measure_Union_le _))),

  intros n m hnm x hx,
  simp only [set.mem_Union] at hx ‚ä¢,
  rcases hx with ‚ü®i, hi‚ü©,
  use i + (m - n),
  convert hi using 2,
  omega
end

end
