/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/

import measure_theory.measure.regular
import measure_theory.function.simple_func_dense_lp
import topology.urysohns_lemma

/-!
# Approximation in L·µñ by continuous functions

This file proves that bounded continuous functions are dense in `Lp E p Œº`, for `1 ‚â§ p < ‚àû`, if the
domain `Œ±` of the functions is a normal topological space and the measure `Œº` is weakly regular.

The result is presented in several versions:
* `measure_theory.Lp.bounded_continuous_function_dense`: The subgroup
  `measure_theory.Lp.bounded_continuous_function` of `Lp E p Œº`, the additive subgroup of
  `Lp E p Œº` consisting of equivalence classes containing a continuous representative, is dense in
  `Lp E p Œº`.
* `bounded_continuous_function.to_Lp_dense_range`: For finite-measure `Œº`, the continuous linear
  map `bounded_continuous_function.to_Lp p Œº ùïú` from `Œ± ‚Üí·µá E` to `Lp E p Œº` has dense range.
* `continuous_map.to_Lp_dense_range`: For compact `Œ±` and finite-measure `Œº`, the continuous linear
  map `continuous_map.to_Lp p Œº ùïú` from `C(Œ±, E)` to `Lp E p Œº` has dense range.

Note that for `p = ‚àû` this result is not true:  the characteristic function of the set `[0, ‚àû)` in
`‚Ñù` cannot be continuously approximated in `L‚àû`.

The proof is in three steps.  First, since simple functions are dense in `Lp`, it suffices to prove
the result for a scalar multiple of a characteristic function of a measurable set `s`. Secondly,
since the measure `Œº` is weakly regular, the set `s` can be approximated above by an open set and
below by a closed set.  Finally, since the domain `Œ±` is normal, we use Urysohn's lemma to find a
continuous function interpolating between these two sets.

## Related results

Are you looking for a result on "directional" approximation (above or below with respect to an
order) of functions whose codomain is `‚Ñù‚â•0‚àû` or `‚Ñù`, by semicontinuous functions?  See the
Vitali-Carath√©odory theorem, in the file `measure_theory.vitali_caratheodory`.

-/

open_locale ennreal nnreal topology bounded_continuous_function
open measure_theory topological_space continuous_map set

variables {Œ± : Type*} [measurable_space Œ±] [topological_space Œ±] [normal_space Œ±] [borel_space Œ±]
variables {E : Type*} [normed_add_comm_group E]

/-- The `L^p` norm of the indicator of a set is uniformly small if the set itself is small.
Given here as an existential `‚àÄ Œµ > 0, ‚àÉ Œ∑ > 0` to avoid later management of `‚Ñù‚â•0‚àû`-arithmetic. -/
lemma exists_snorm_indicator_le {Œ± : Type*} {_ : measurable_space Œ±}
  (Œº : measure Œ±) (c : E) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† ‚àû) :
  ‚àÉ (Œ∑ : ‚Ñù‚â•0), 0 < Œ∑ ‚àß ‚àÄ (s : set Œ±), Œº s ‚â§ Œ∑ ‚Üí snorm (s.indicator (Œª x, c)) p Œº ‚â§ Œµ :=
begin
  rcases eq_or_ne p 0 with rfl|h'p,
  { exact ‚ü®1, zero_lt_one, Œª s hs, by simp‚ü© },
  have hp‚ÇÄ : 0 < p := bot_lt_iff_ne_bot.2 h'p,
  have hp‚ÇÄ' : 0 ‚â§ 1 / p.to_real := div_nonneg zero_le_one ennreal.to_real_nonneg,
  have hp‚ÇÄ'' : 0 < p.to_real,
  { simpa [‚Üê ennreal.to_real_lt_to_real ennreal.zero_ne_top hp] using hp‚ÇÄ },
  obtain ‚ü®Œ∑, hŒ∑_pos, hŒ∑_le‚ü© : ‚àÉ (Œ∑ : ‚Ñù‚â•0), 0 < Œ∑ ‚àß (‚Äñc‚Äñ‚Çä * Œ∑ ^ (1 / p.to_real) : ‚Ñù‚â•0‚àû) ‚â§ Œµ,
  { have : filter.tendsto (Œª x : ‚Ñù‚â•0, ((‚Äñc‚Äñ‚Çä * x ^ (1 / p.to_real) : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû))
      (ùìù 0) (ùìù (0 : ‚Ñù‚â•0)),
    { rw ennreal.tendsto_coe,
      convert ((nnreal.continuous_at_rpow_const (or.inr hp‚ÇÄ')).tendsto).const_mul _,
      simp [hp‚ÇÄ''.ne'] },
    have hŒµ' : 0 < Œµ := hŒµ.bot_lt,
    obtain ‚ü®Œ¥, hŒ¥, hŒ¥Œµ'‚ü© :=
      nnreal.nhds_zero_basis.eventually_iff.mp (eventually_le_of_tendsto_lt hŒµ' this),
    obtain ‚ü®Œ∑, hŒ∑, hŒ∑Œ¥‚ü© := exists_between hŒ¥,
    refine ‚ü®Œ∑, hŒ∑, _‚ü©,
    rw [ennreal.coe_rpow_of_nonneg _ hp‚ÇÄ', ‚Üê ennreal.coe_mul],
    exact hŒ¥Œµ' hŒ∑Œ¥ },
  refine ‚ü®Œ∑, hŒ∑_pos, Œª s hs, _‚ü©,
  refine (snorm_indicator_const_le _ _).trans (le_trans _ hŒ∑_le),
  exact mul_le_mul_left' (ennreal.rpow_le_rpow hs hp‚ÇÄ') _,
end

/-- A variant of Urysohn lemma, `L^p` version for an outer regular measure `Œº`:
consider two sets `s ‚äÜ u` which are respectively closed and open with `Œº s < ‚àû`, and a vector `c`.
Then one may find a continuous function `f` equal to `c` on `s` and to `0` outside of `u`,
bounded by `‚Äñc‚Äñ` everywhere, and such that the `L^p` norm of `f - s.indicator (Œª y, c)` is
arbitrarily small. Additionally, this function `f` belongs to `L^p`. -/
lemma exists_continuous_snorm_sub_le_of_closed [normed_space ‚Ñù E]
  {s u : set Œ±} (s_closed : is_closed s) (u_open : is_open u) (hsu : s ‚äÜ u)
  {Œº : measure Œ±} [Œº.outer_regular] (hs : Œº s ‚â† ‚àû) (c : E)
  {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† ‚àû) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
  ‚àÉ (f : Œ± ‚Üí E), continuous f ‚àß (‚àÄ x, ‚Äñf x‚Äñ ‚â§ ‚Äñc‚Äñ) ‚àß function.support f ‚äÜ u
    ‚àß snorm (Œª x, f x - s.indicator (Œª y, c) x) p Œº ‚â§ Œµ ‚àß mem_‚Ñíp f p Œº :=
begin
  rcases exists_snorm_indicator_le Œº c hŒµ hp with ‚ü®Œ∑, Œ∑_pos, hŒ∑‚ü©,
  have Œ∑pos : (0 : ‚Ñù‚â•0‚àû) < Œ∑ := ennreal.coe_lt_coe.2 Œ∑_pos,
  obtain ‚ü®V, sV, V_open, h'V, hV‚ü© : ‚àÉ (V : set Œ±) (H : V ‚äá s), is_open V ‚àß Œº V < ‚àû ‚àß Œº (V \ s) < Œ∑,
    from s_closed.measurable_set.exists_is_open_diff_lt hs Œ∑pos.ne',
  let v := u ‚à© V,
  have v_open : is_open v := u_open.inter V_open,
  have hsv : s ‚äÜ v := subset_inter hsu sV,
  have hŒºv : Œº v < ‚àû := (measure_mono (inter_subset_right _ _)).trans_lt h'V,
  obtain ‚ü®g, hgv, hgs, hg_range‚ü© := exists_continuous_zero_one_of_closed
    v_open.is_closed_compl s_closed (disjoint_compl_left_iff.2 hsv),
  -- Multiply this by `c` to get a continuous approximation to the function `f`; the key point is
  -- that this is pointwise bounded by the indicator of the set `v \ s`
  have g_norm : ‚àÄ x, ‚Äñg x‚Äñ = g x := Œª x, by rw [real.norm_eq_abs, abs_of_nonneg (hg_range x).1],
  have gc_bd0 : ‚àÄ x, ‚Äñg x ‚Ä¢ c‚Äñ ‚â§ ‚Äñc‚Äñ,
  { assume x,
    simp only [norm_smul, g_norm x],
    apply mul_le_of_le_one_left (norm_nonneg _),
    exact (hg_range x).2 },
  have gc_bd : ‚àÄ x, ‚Äñg x ‚Ä¢ c - s.indicator (Œª x, c) x‚Äñ ‚â§ ‚Äñ(v \ s).indicator (Œª x, c) x‚Äñ,
  { intros x,
    by_cases hv : x ‚àà v,
    { rw ‚Üê set.diff_union_of_subset hsv at hv,
      cases hv with hsv hs,
      { simpa only [hsv.2, set.indicator_of_not_mem, not_false_iff, sub_zero, hsv,
          set.indicator_of_mem] using gc_bd0 x},
      { simp [hgs hs, hs] } },
    { have : x ‚àâ s := Œª h, hv (hsv h),
      simp [hgv hv, this], } },
  have gc_support : function.support (Œª (x : Œ±), g x ‚Ä¢ c) ‚äÜ v,
  { refine function.support_subset_iff'.2 (Œª x hx, _),
    simp only [hgv hx, pi.zero_apply, zero_smul] },
  have gc_mem : mem_‚Ñíp (Œª x, g x ‚Ä¢ c) p Œº,
  { apply mem_‚Ñíp.smul_of_top_left (mem_‚Ñíp_top_const _),
    refine ‚ü®g.continuous.ae_strongly_measurable, _‚ü©,
    have : snorm (v.indicator (Œª x, (1 : ‚Ñù))) p Œº < ‚ä§,
    { apply (snorm_indicator_const_le _ _).trans_lt _,
      simp only [lt_top_iff_ne_top, hŒºv.ne, nnnorm_one, ennreal.coe_one, one_div, one_mul, ne.def,
        ennreal.rpow_eq_top_iff, inv_lt_zero, false_and, or_false, not_and, not_lt,
        ennreal.to_real_nonneg, implies_true_iff] },
    refine lt_of_le_of_lt (snorm_mono (Œª x, _)) this,
    by_cases hx : x ‚àà v,
    { simp only [hx, abs_of_nonneg (hg_range x).1, (hg_range x).2, real.norm_eq_abs,
        indicator_of_mem, cstar_ring.norm_one] },
    { simp only [hgv hx, pi.zero_apply, real.norm_eq_abs, abs_zero, abs_nonneg] } },
  refine ‚ü®Œª x, g x ‚Ä¢ c, g.continuous.smul continuous_const, gc_bd0,
    gc_support.trans (inter_subset_left _ _), (snorm_mono gc_bd).trans _, gc_mem‚ü©,
  apply hŒ∑,
  exact (measure_mono (diff_subset_diff (inter_subset_right _ _) subset.rfl)).trans hV.le,
end

variables [second_countable_topology_either Œ± E]
  {p : ‚Ñù‚â•0‚àû} [_i : fact (1 ‚â§ p)] (hp : p ‚â† ‚àû) (Œº : measure Œ±)

include _i hp

lemma glouk [locally_compact_space Œ±] [normed_space ‚Ñù E] [Œº.regular]
  {f : Œ± ‚Üí E} (hf : mem_‚Ñíp f p Œº) {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
  ‚àÉ (g : Œ± ‚Üí E), continuous g ‚àß mem_‚Ñíp g p Œº ‚àß has_compact_support g ‚àß snorm (f - g) p Œº ‚â§ Œµ :=
begin
  revert f hf Œµ ,
  refine mem_‚Ñíp.induction hp _ _ _ _ _,
  { assume c t ht htŒº Œµ hŒµ,
    have h'Œµ : Œµ / 2 ‚â† 0, sorry,
    rcases exists_snorm_indicator_le Œº c h'Œµ hp with ‚ü®Œ∑, Œ∑pos, hŒ∑‚ü©,
    have hŒ∑_pos' : (0 : ‚Ñù‚â•0‚àû) < Œ∑ := ennreal.coe_pos.2 Œ∑pos,
    obtain ‚ü®s, st, s_compact, Œºs‚ü© : ‚àÉ s ‚äÜ t, is_compact s ‚àß Œº (t \ s) < Œ∑ :=
      ht.exists_is_compact_diff_lt htŒº.ne hŒ∑_pos'.ne',
    have hsŒº : Œº s < ‚àû := (measure_mono st).trans_lt htŒº,
    have I1 : snorm (s.indicator (Œª y, c) - t.indicator (Œª y, c)) p Œº ‚â§ Œµ/2,
    { rw [‚Üê snorm_neg, neg_sub, ‚Üê indicator_diff st],
      exact (hŒ∑ _ Œºs.le) },
    rcases exists_compact_between s_compact is_open_univ (subset_univ _) with ‚ü®k, k_compact, sk, -‚ü©,
    rcases exists_continuous_snorm_sub_le_of_closed s_compact.is_closed is_open_interior sk
      hsŒº.ne c hp h'Œµ with ‚ü®f, f_cont, f_bound, f_support, I2, f_mem‚ü©,
    have I3 : snorm (f - t.indicator (Œª y, c)) p Œº ‚â§ Œµ, from calc
      snorm (f - t.indicator (Œª y, c)) p Œº
        = snorm ((f - s.indicator (Œª y, c)) + (s.indicator (Œª y, c) - t.indicator (Œª y, c))) p Œº :
      by simp only [sub_add_sub_cancel]
    ... ‚â§ snorm (f - s.indicator (Œª y, c)) p Œº
          + snorm (s.indicator (Œª y, c) - t.indicator (Œª y, c)) p Œº :
      begin
        apply snorm_add_le _ _ _i.out,
        { exact f_mem.ae_strongly_measurable.sub
            (ae_strongly_measurable_const.indicator s_compact.measurable_set) },
        { exact (ae_strongly_measurable_const.indicator s_compact.measurable_set).sub
            (ae_strongly_measurable_const.indicator ht) },
      end
    ... ‚â§ Œµ/2 + Œµ/2 : add_le_add I2 I1
    ... = Œµ : ennreal.add_halves _,
    refine ‚ü®f, f_cont, f_mem, _, by rwa [‚Üê snorm_neg, neg_sub]‚ü©,
    apply has_compact_support.intro k_compact (Œª x hx, _),

    sorry,
  }

end

#exit

  sorry { assume f f' hff' hf hf' Hf Hf' Œµ Œµpos,
    have A : Œµ / 2 ‚â† 0, by simp [Œµpos],
    rcases Hf A with ‚ü®g, g_cont, g_mem, hg, hfg‚ü©,
    rcases Hf' A with ‚ü®g', g'_cont, g'_mem, hg', hf'g'‚ü©,
    refine ‚ü®g + g', g_cont.add g'_cont, g_mem.add g'_mem, hg.add hg', _‚ü©,
    calc snorm (f + f' - (g + g')) p Œº
        = snorm ((f - g) + (f' - g')) p Œº : by { congr' 1, abel }
    ... ‚â§ snorm (f - g) p Œº + snorm (f' - g') p Œº :
      snorm_add_le (hf.sub g_mem).ae_strongly_measurable
        (hf'.sub g'_mem).ae_strongly_measurable _i.out
    ... ‚â§ Œµ / 2 + Œµ / 2 : add_le_add hfg hf'g'
    ... = Œµ : ennreal.add_halves _ },
  sorry { rw is_closed_iff_nhds,
    assume f hf Œµ Œµpos,
    have A : Œµ / 2 ‚â† 0, by simp [Œµpos],
    rcases hf (emetric.ball f (Œµ/2)) (emetric.ball_mem_nhds _ A.bot_lt) with ‚ü®f', hf', h'f'‚ü©,
    rcases h'f' A with ‚ü®g, g_cont, g_mem, g_support, hg‚ü©,
    refine ‚ü®g, g_cont, g_mem, g_support, _‚ü©,
    calc snorm (f - g) p Œº = snorm ((f - f') + (f' - g)) p Œº : by simp only [sub_add_sub_cancel]
    ... ‚â§ snorm (f - f') p Œº + snorm (f' - g) p Œº :
      snorm_add_le ((Lp.mem_‚Ñíp f).sub (Lp.mem_‚Ñíp f')).ae_strongly_measurable
        ((Lp.mem_‚Ñíp f').sub g_mem).ae_strongly_measurable _i.out
    ... ‚â§ Œµ / 2 + Œµ / 2 :
      begin
        refine add_le_add _ hg,
        rw [‚Üê snorm_neg, neg_sub],
        simp only [Lp.edist_def, emetric.mem_ball] at hf',
        exact hf'.le
      end
    ... = Œµ : ennreal.add_halves _ },
  sorry { assume f f' hff' hf Hf Œµ Œµpos,
    rcases Hf Œµpos with ‚ü®g, g_cont, g_mem, hg, hfg‚ü©,
    refine ‚ü®g, g_cont, g_mem, hg, _‚ü©,
    have : f - g =·µê[Œº] f' - g := hff'.sub (filter.germ.coe_eq.mp rfl),
    rwa ‚Üê snorm_congr_ae this }
end


#exit

variable (E)


namespace measure_theory.Lp

/-- A function in `Lp` can be approximated in `Lp` by continuous functions. -/
lemma bounded_continuous_function_dense [normed_space ‚Ñù E] [Œº.weakly_regular] :
  (bounded_continuous_function E p Œº).topological_closure = ‚ä§ :=
begin
  -- It suffices to prove that scalar multiples of the indicator function of a finite-measure
  -- measurable set can be approximated by continuous functions
  suffices :  ‚àÄ (c : E) {s : set Œ±} (hs : measurable_set s) (hŒºs : Œº s < ‚àû),
    (Lp.simple_func.indicator_const p hs hŒºs.ne c : Lp E p Œº)
      ‚àà (bounded_continuous_function E p Œº).topological_closure,
  { rw add_subgroup.eq_top_iff',
    refine Lp.induction hp _ _ _ _,
    { exact this },
    { exact Œª f g hf hg hfg', add_subgroup.add_mem _ },
    { exact add_subgroup.is_closed_topological_closure _ } },
  -- Let `s` be a finite-measure measurable set, let's approximate `c` times its indicator function
  intros c t ht htŒº,
  refine mem_closure_iff_frequently.mpr _,
  rw metric.nhds_basis_closed_ball.frequently_iff,
  intros Œµ hŒµ,
  let Œµ' : ‚Ñù‚â•0 := ‚ü®Œµ, hŒµ.le‚ü©,
  have h'Œµ : (Œµ' / 2 : ‚Ñù‚â•0‚àû) ‚â† 0, by simpa only [ne.def, ennreal.div_zero_iff, ennreal.coe_eq_zero,
    nonneg.mk_eq_zero, ennreal.bit0_eq_top_iff, ennreal.one_ne_top, or_false] using hŒµ.ne',
  rcases exists_snorm_indicator_le Œº c h'Œµ hp with ‚ü®Œ∑, Œ∑pos, hŒ∑‚ü©,
  have hŒ∑_pos' : (0 : ‚Ñù‚â•0‚àû) < Œ∑ := ennreal.coe_pos.2 Œ∑pos,
  obtain ‚ü®s, st, s_closed, Œºs‚ü© : ‚àÉ s ‚äÜ t, is_closed s ‚àß Œº (t \ s) < Œ∑ :=
    ht.exists_is_closed_diff_lt htŒº.ne hŒ∑_pos'.ne',
  have hsŒº : Œº s < ‚àû := (measure_mono st).trans_lt htŒº,
  have I1 : snorm (s.indicator (Œª y, c) - t.indicator (Œª y, c)) p Œº ‚â§ Œµ'/2,
  { rw [‚Üê snorm_neg, neg_sub, ‚Üê indicator_diff st],
    exact (hŒ∑ _ Œºs.le) },
  rcases exists_continuous_snorm_sub_le_of_closed s_closed is_open_univ (subset_univ _)
    hsŒº.ne c hp h'Œµ with ‚ü®f, f_cont, f_bound, -, I2, f_mem‚ü©,
  have I3 : snorm (f - t.indicator (Œª y, c)) p Œº ‚â§ Œµ', from calc
    snorm (f - t.indicator (Œª y, c)) p Œº
      = snorm ((f - s.indicator (Œª y, c)) + (s.indicator (Œª y, c) - t.indicator (Œª y, c))) p Œº :
    by simp only [sub_add_sub_cancel]
  ... ‚â§ snorm (f - s.indicator (Œª y, c)) p Œº
        + snorm (s.indicator (Œª y, c) - t.indicator (Œª y, c)) p Œº :
    begin
      apply snorm_add_le _ _ _i.out,
      { exact f_mem.ae_strongly_measurable.sub
          (ae_strongly_measurable_const.indicator s_closed.measurable_set) },
      { exact (ae_strongly_measurable_const.indicator s_closed.measurable_set).sub
          (ae_strongly_measurable_const.indicator ht) },
    end
  ... ‚â§ Œµ'/2 + Œµ'/2 : add_le_add I2 I1
  ... = Œµ' : ennreal.add_halves _,
  refine ‚ü®f_mem.to_Lp _, _, _‚ü©,
  { simp only [dist_eq_norm, simple_func.coe_indicator_const, metric.mem_closed_ball],
    rw [indicator_const_Lp, ‚Üê mem_‚Ñíp.to_Lp_sub, Lp.norm_to_Lp],
    apply ennreal.to_real_le_of_le_of_real hŒµ.le,
    convert I3,
    have : Œµ = Œµ', by simp only [subtype.coe_mk],
    rw [this, ennreal.of_real_coe_nnreal] },
  { rw [set_like.mem_coe, mem_bounded_continuous_function_iff],
    exact ‚ü®bounded_continuous_function.of_normed_add_comm_group _ f_cont (‚Äñc‚Äñ) f_bound, rfl‚ü© },
end

end measure_theory.Lp

variables (ùïú : Type*) [normed_field ùïú] [normed_algebra ‚Ñù ùïú] [normed_space ùïú E]

namespace bounded_continuous_function

lemma to_Lp_dense_range [Œº.weakly_regular] [is_finite_measure Œº] :
  dense_range ‚áë(to_Lp p Œº ùïú : (Œ± ‚Üí·µá E) ‚ÜíL[ùïú] Lp E p Œº) :=
begin
  haveI : normed_space ‚Ñù E := restrict_scalars.normed_space ‚Ñù ùïú E,
  rw dense_range_iff_closure_range,
  suffices : (linear_map.range (to_Lp p Œº ùïú : _ ‚ÜíL[ùïú] Lp E p Œº))
    .to_add_subgroup.topological_closure = ‚ä§,
  { exact congr_arg coe this },
  simp [range_to_Lp p Œº, measure_theory.Lp.bounded_continuous_function_dense E hp],
end

end bounded_continuous_function

namespace continuous_map

lemma to_Lp_dense_range [compact_space Œ±] [Œº.weakly_regular] [is_finite_measure Œº] :
  dense_range ‚áë(to_Lp p Œº ùïú : C(Œ±, E) ‚ÜíL[ùïú] Lp E p Œº) :=
begin
  haveI : normed_space ‚Ñù E := restrict_scalars.normed_space ‚Ñù ùïú E,
  rw dense_range_iff_closure_range,
  suffices : (linear_map.range (to_Lp p Œº ùïú : _ ‚ÜíL[ùïú] Lp E p Œº))
    .to_add_subgroup.topological_closure = ‚ä§,
  { exact congr_arg coe this },
  simp [range_to_Lp p Œº, measure_theory.Lp.bounded_continuous_function_dense E hp]
end

end continuous_map
