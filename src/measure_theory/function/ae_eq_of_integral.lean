/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne
-/

import analysis.normed_space.dual
import measure_theory.function.strongly_measurable
import measure_theory.integral.set_integral

/-! # From equality of integrals to equality of functions

This file provides various statements of the general form "if two functions have the same integral
on all sets, then they are equal almost everywhere".
The different lemmas use various hypotheses on the class of functions, on the target space or on the
possible finiteness of the measure.

## Main statements

All results listed below apply to two functions `f,g`, together with two main hypotheses,
* `f` and `g` are integrable on all measurable sets with finite measure,
* for all measurable sets `s` with finite measure, `‚à´ x in s, f x ‚àÇŒº = ‚à´ x in s, g x ‚àÇŒº`.
The conclusion is then `f =·µê[Œº] g`. The main lemmas are:
* `ae_eq_of_forall_set_integral_eq_of_sigma_finite`: case of a sigma-finite measure.
* `ae_fin_strongly_measurable.ae_eq_of_forall_set_integral_eq`: for functions which are
  `ae_fin_strongly_measurable`.
* `Lp.ae_eq_of_forall_set_integral_eq`: for elements of `Lp`, for `0 < p < ‚àû`.
* `integrable.ae_eq_of_forall_set_integral_eq`: for integrable functions.

For each of these results, we also provide a lemma about the equality of one function and 0. For
example, `Lp.ae_eq_zero_of_forall_set_integral_eq_zero`.

Generally useful lemmas which are not related to integrals:
* `ae_eq_zero_of_forall_inner`: if for all constants `c`, `Œª x, inner c (f x) =·µê[Œº] 0` then
  `f =·µê[Œº] 0`.
* `ae_eq_zero_of_forall_dual`: if for all constants `c` in the dual space, `Œª x, c (f x) =·µê[Œº] 0`
  then `f =·µê[Œº] 0`.

## TODO(s)

* Extend the results from a Hilbert space to a Banach space. Most lemmas about inner products
  should be equally valid about the product with an element of the dual and
  `ae_eq_zero_of_forall_dual` should be used instead of `ae_eq_zero_of_forall_inner`.

-/

open measure_theory topological_space normed_space filter

open_locale ennreal nnreal measure_theory

namespace measure_theory


section ae_eq_of_forall

variables {Œ± E ùïú : Type*} {m : measurable_space Œ±} {Œº : measure Œ±} [is_R_or_C ùïú]

lemma ae_eq_zero_of_forall_inner [inner_product_space ùïú E] [second_countable_topology E]
  {f : Œ± ‚Üí E} (hf : ‚àÄ c : E, (Œª x, (inner c (f x) : ùïú)) =·µê[Œº] 0) :
  f =·µê[Œº] 0 :=
begin
  let s := dense_seq E,
  have hs : dense_range s := dense_range_dense_seq E,
  have hf' : ‚àÄ·µê x ‚àÇŒº, ‚àÄ n : ‚Ñï, inner (s n) (f x) = (0 : ùïú), from ae_all_iff.mpr (Œª n, hf (s n)),
  refine hf'.mono (Œª x hx, _),
  rw [pi.zero_apply, ‚Üê inner_self_eq_zero],
  have h_closed : is_closed {c : E | inner c (f x) = (0 : ùïú)},
    from is_closed_eq (continuous_id.inner continuous_const) continuous_const,
  exact @is_closed_property ‚Ñï E _ s (Œª c, inner c (f x) = (0 : ùïú)) hs h_closed (Œª n, hx n) _,
end

local notation `‚ü™`x`, `y`‚ü´` := y x

variables (ùïú)

lemma ae_eq_zero_of_forall_dual [normed_group E] [normed_space ùïú E]
  [second_countable_topology (dual ùïú E)]
  {f : Œ± ‚Üí E} (hf : ‚àÄ c : dual ùïú E, (Œª x, ‚ü™f x, c‚ü´) =·µê[Œº] 0) :
  f =·µê[Œº] 0 :=
begin
  let s := dense_seq (dual ùïú E),
  have hs : dense_range s := dense_range_dense_seq _,
  have hfs : ‚àÄ n : ‚Ñï, ‚àÄ·µê x ‚àÇŒº, ‚ü™f x, s n‚ü´ = (0 : ùïú), from Œª n, hf (s n),
  have hf' : ‚àÄ·µê x ‚àÇŒº, ‚àÄ n : ‚Ñï, ‚ü™f x, s n‚ü´ = (0 : ùïú), by rwa ae_all_iff,
  refine hf'.mono (Œª x hx, eq_zero_of_forall_dual_eq_zero ùïú (Œª c, _)),
  have h_closed : is_closed {c : dual ùïú E | ‚ü™f x, c‚ü´ = (0 : ùïú)},
  { refine is_closed_eq _ continuous_const,
    have h_fun_eq : (Œª (c : dual ùïú E), ‚ü™f x, c‚ü´) = inclusion_in_double_dual ùïú E (f x),
      by { ext1 c, rw ‚Üê dual_def ùïú E (f x) c, },
    rw h_fun_eq,
    continuity, },
  exact @is_closed_property ‚Ñï (dual ùïú E) _ s (Œª c, ‚ü™f x, c‚ü´ = (0 : ùïú)) hs h_closed (Œª n, hx n) c,
end

variables {ùïú}

end ae_eq_of_forall


variables {Œ± ùïú E : Type*} [is_R_or_C ùïú] [measurable_space ùïú] [borel_space ùïú]
  {m m0 : measurable_space Œ±} {Œº : measure Œ±} {s t : set Œ±}
  [inner_product_space ùïú E] [measurable_space E] [borel_space E] [second_countable_topology E]
  [complete_space E] [normed_space ‚Ñù E]
  {p : ‚Ñù‚â•0‚àû}

section ae_eq_of_forall_set_integral_eq


lemma ae_const_le_iff_forall_lt_measure_zero {Œ≤} [linear_order Œ≤] [topological_space Œ≤]
  [order_topology Œ≤] [first_countable_topology Œ≤] [densely_ordered Œ≤]
  (f : Œ± ‚Üí Œ≤) (c : Œ≤) :
  (‚àÄ·µê x ‚àÇŒº, c ‚â§ f x) ‚Üî ‚àÄ b < c, Œº {x | f x ‚â§ b} = 0 :=
begin
  by_cases h : ‚àÄ b, c ‚â§ b,
  { have A : ‚àÄ·µê x ‚àÇŒº, c ‚â§ f x := eventually_of_forall (Œª x, h (f x)),
    have B : ‚àÄ b < c, Œº {x | f x ‚â§ b} = 0 := Œª b hb, (lt_irrefl _ (hb.trans_le (h b))).elim,
    simp only [(iff_true _).2 A, (iff_true _).2 B] },
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, y < c, by { push_neg at h, exact h },
  rcases exists_seq_strict_mono_tendsto' hy with ‚ü®u, u_mono, u_lt, u_lim‚ü©,
  rw ae_iff,
  push_neg,
  have h_Union : {x | f x < c} = ‚ãÉ (n : ‚Ñï), {x | f x ‚â§ u n},
  { ext1 x,
    simp_rw [set.mem_Union, set.mem_set_of_eq],
    split; intro h,
    { obtain ‚ü®n, hn‚ü© := ((tendsto_order.1 u_lim).1 _ h).exists, exact ‚ü®n, hn.le‚ü© },
    { obtain ‚ü®n, hn‚ü© := h, exact hn.trans_lt (u_lt _), }, },
  rw [h_Union, measure_Union_null_iff],
  split; intros h b,
  { intro hbc,
    obtain ‚ü®n, hn‚ü© : ‚àÉ n, b < u n := ((tendsto_order.1 u_lim).1 _ hbc).exists,
    have h_ss : {x : Œ± | f x ‚â§ b} ‚äÜ {x : Œ± | f x ‚â§ u n},
    { intros x hx,
      rw set.mem_set_of_eq at hx,
      exact hx.trans hn.le, },
    refine measure_mono_null h_ss _,
    exact h n },
  { exact h _ (u_lt b) },
end

section real

section real_finite_measure

variables [finite_measure Œº] {f : Œ± ‚Üí ‚Ñù}

/-- Don't use this lemma. Use `ae_nonneg_of_forall_set_integral_nonneg_of_finite_measure`. -/
lemma ae_nonneg_of_forall_set_integral_nonneg_of_finite_measure_of_measurable (hfm : measurable f)
  (hf : integrable f Œº) (hf_zero : ‚àÄ s, measurable_set s ‚Üí 0 ‚â§ ‚à´ x in s, f x ‚àÇŒº) :
  0 ‚â§·µê[Œº] f :=
begin
  simp_rw [eventually_le, pi.zero_apply],
  rw ae_const_le_iff_forall_lt_measure_zero,
  intros b hb_neg,
  let s := {x | f x ‚â§ b},
  have hs : measurable_set s, from measurable_set_le hfm measurable_const,
  have h_int_gt : ‚à´ x in s, f x ‚àÇŒº ‚â§ b * (Œº s).to_real,
  { have h_const_le : ‚à´ x in s, f x ‚àÇŒº ‚â§ ‚à´ x in s, b ‚àÇŒº,
    { refine set_integral_mono_ae_restrict hf.integrable_on
        (integrable_on_const.mpr (or.inr (measure_lt_top Œº s))) _,
      rw [eventually_le, ae_restrict_iff hs],
      exact eventually_of_forall (Œª x hxs, hxs), },
    rwa [set_integral_const, smul_eq_mul, mul_comm] at h_const_le, },
  by_contra,
  refine (lt_self_iff_false (‚à´ x in s, f x ‚àÇŒº)).mp (h_int_gt.trans_lt _),
  refine (mul_neg_iff.mpr (or.inr ‚ü®hb_neg, _‚ü©)).trans_le _,
  swap, { simp_rw measure.restrict_restrict hs, exact hf_zero s hs, },
  refine (ennreal.to_real_nonneg).lt_of_ne (Œª h_eq, h _),
  cases (ennreal.to_real_eq_zero_iff _).mp h_eq.symm with hŒºs_eq_zero hŒºs_eq_top,
  { exact hŒºs_eq_zero, },
  { exact absurd hŒºs_eq_top (measure_lt_top Œº s).ne, },
end

lemma ae_nonneg_of_forall_set_integral_nonneg_of_finite_measure (hf : integrable f Œº)
  (hf_zero : ‚àÄ s, measurable_set s ‚Üí 0 ‚â§ ‚à´ x in s, f x ‚àÇŒº) :
  0 ‚â§·µê[Œº] f :=
begin
  rcases hf.1 with ‚ü®f', hf'_meas, hf_ae‚ü©,
  have hf'_integrable : integrable f' Œº, from integrable.congr hf hf_ae,
  have hf'_zero : ‚àÄ s, measurable_set s ‚Üí 0 ‚â§ ‚à´ x in s, f' x ‚àÇŒº,
  { intros s hs,
    rw set_integral_congr_ae hs (hf_ae.mono (Œª x hx hxs, hx.symm)),
    exact hf_zero s hs, },
  exact (ae_nonneg_of_forall_set_integral_nonneg_of_finite_measure_of_measurable hf'_meas
    hf'_integrable hf'_zero).trans hf_ae.symm.le,
end

end real_finite_measure

lemma ae_nonneg_restrict_of_forall_set_integral_nonneg_inter {f : Œ± ‚Üí ‚Ñù} {t : set Œ±} (hŒºt : Œº t ‚â† ‚àû)
  (hf : integrable_on f t Œº) (hf_zero : ‚àÄ s, measurable_set s ‚Üí 0 ‚â§ ‚à´ x in (s ‚à© t), f x ‚àÇŒº) :
  0 ‚â§·µê[Œº.restrict t] f :=
begin
  haveI : fact (Œº t < ‚àû) := ‚ü®lt_top_iff_ne_top.mpr hŒºt‚ü©,
  refine ae_nonneg_of_forall_set_integral_nonneg_of_finite_measure hf (Œª s hs, _),
  simp_rw measure.restrict_restrict hs,
  exact hf_zero s hs,
end

lemma ae_nonneg_of_forall_set_integral_nonneg_of_sigma_finite [sigma_finite Œº]
  {f : Œ± ‚Üí ‚Ñù}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí 0 ‚â§ ‚à´ x in s, f x ‚àÇŒº) :
  0 ‚â§·µê[Œº] f :=
begin
  let S := spanning_sets Œº,
  rw [‚Üê @measure.restrict_univ _ _ Œº, ‚Üê Union_spanning_sets Œº, eventually_le, ae_iff,
    measure.restrict_apply'],
  swap,
  { exact measurable_set.Union (measurable_spanning_sets Œº), },
  rw [set.inter_Union, measure_Union_null_iff],
  intro n,
  have h_meas_n : measurable_set (S n), from (measurable_spanning_sets Œº n),
  have hŒºn : Œº (S n) < ‚àû, from measure_spanning_sets_lt_top Œº n,
  rw ‚Üê measure.restrict_apply' h_meas_n,
  refine ae_nonneg_restrict_of_forall_set_integral_nonneg_inter hŒºn.ne
    (hf_int_finite (S n) h_meas_n hŒºn) (Œª s hs, _),
  exact hf_zero (s ‚à© S n) (hs.inter h_meas_n)
    ((measure_mono (set.inter_subset_right _ _)).trans_lt hŒºn),
end

lemma ae_fin_strongly_measurable.ae_nonneg_of_forall_set_integral_nonneg {f : Œ± ‚Üí ‚Ñù}
  (hf : ae_fin_strongly_measurable f Œº)
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí 0 ‚â§ ‚à´ x in s, f x ‚àÇŒº) :
  0 ‚â§·µê[Œº] f :=
begin
  let t := hf.sigma_finite_set,
  suffices : 0 ‚â§·µê[Œº.restrict t] f,
    from ae_of_ae_restrict_of_ae_restrict_compl hf.measurable_set this hf.ae_eq_zero_compl.symm.le,
  haveI : sigma_finite (Œº.restrict t) := hf.sigma_finite_restrict,
  refine ae_nonneg_of_forall_set_integral_nonneg_of_sigma_finite (Œª s hs hŒºts, _)
    (Œª s hs hŒºts, _),
  { rw [integrable_on, measure.restrict_restrict hs],
    rw measure.restrict_apply hs at hŒºts,
    exact hf_int_finite (s ‚à© t) (hs.inter hf.measurable_set) hŒºts, },
  { rw measure.restrict_restrict hs,
    rw measure.restrict_apply hs at hŒºts,
    exact hf_zero (s ‚à© t) (hs.inter hf.measurable_set) hŒºts, },
end

lemma integrable.ae_nonneg_of_forall_set_integral_nonneg {f : Œ± ‚Üí ‚Ñù} (hf : integrable f Œº)
  (hf_zero : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí 0 ‚â§ ‚à´ x in s, f x ‚àÇŒº) :
  0 ‚â§·µê[Œº] f :=
ae_fin_strongly_measurable.ae_nonneg_of_forall_set_integral_nonneg hf.ae_fin_strongly_measurable
  (Œª s hs hŒºs, hf.integrable_on) hf_zero

lemma ae_nonneg_restrict_of_forall_set_integral_nonneg {f : Œ± ‚Üí ‚Ñù}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí 0 ‚â§ ‚à´ x in s, f x ‚àÇŒº)
  {t : set Œ±} (ht : measurable_set t) (hŒºt : Œº t ‚â† ‚àû) :
  0 ‚â§·µê[Œº.restrict t] f :=
begin
  refine ae_nonneg_restrict_of_forall_set_integral_nonneg_inter hŒºt
    (hf_int_finite t ht (lt_top_iff_ne_top.mpr hŒºt)) (Œª s hs, _),
  refine (hf_zero (s ‚à© t) (hs.inter ht) _),
  exact (measure_mono (set.inter_subset_right s t)).trans_lt (lt_top_iff_ne_top.mpr hŒºt),
end

lemma ae_eq_zero_restrict_of_forall_set_integral_eq_zero_real {f : Œ± ‚Üí ‚Ñù}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = 0)
  {t : set Œ±} (ht : measurable_set t) (hŒºt : Œº t ‚â† ‚àû) :
  f =·µê[Œº.restrict t] 0 :=
begin
  suffices h_and : f ‚â§·µê[Œº.restrict t] 0 ‚àß 0 ‚â§·µê[Œº.restrict t] f,
    from h_and.1.mp (h_and.2.mono (Œª x hx1 hx2, le_antisymm hx2 hx1)),
  refine ‚ü®_, ae_nonneg_restrict_of_forall_set_integral_nonneg hf_int_finite
    (Œª s hs hŒºs, (hf_zero s hs hŒºs).symm.le) ht hŒºt‚ü©,
  suffices h_neg : 0 ‚â§·µê[Œº.restrict t] -f,
  { refine h_neg.mono (Œª x hx, _),
    rw pi.neg_apply at hx,
    simpa using hx, },
  refine ae_nonneg_restrict_of_forall_set_integral_nonneg
    (Œª s hs hŒºs, (hf_int_finite s hs hŒºs).neg) (Œª s hs hŒºs, _) ht hŒºt,
  simp_rw pi.neg_apply,
  rw [integral_neg, neg_nonneg],
  exact (hf_zero s hs hŒºs).le,
end

end real

lemma ae_eq_zero_restrict_of_forall_set_integral_eq_zero_R_or_C {f : Œ± ‚Üí ùïú}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = 0)
  {t : set Œ±} (ht : measurable_set t) (hŒºt : Œº t ‚â† ‚àû) :
  f =·µê[Œº.restrict t] 0 :=
begin
  suffices h_re_im : (‚àÄ·µê x ‚àÇ(Œº.restrict t), is_R_or_C.re (f x) = 0)
    ‚àß ‚àÄ·µê x ‚àÇ(Œº.restrict t), is_R_or_C.im (f x) = 0,
  { rw ‚Üê eventually_and at h_re_im,
    refine h_re_im.mono (Œª x hx, _),
    rwa [is_R_or_C.ext_iff, pi.zero_apply, add_monoid_hom.map_zero, add_monoid_hom.map_zero], },
  have hf_re : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on (Œª x, is_R_or_C.re (f x)) s Œº,
    from Œª s hs hŒºs, (hf_int_finite s hs hŒºs).re,
  have hf_im : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on (Œª x, is_R_or_C.im (f x)) s Œº,
    from Œª s hs hŒºs, (hf_int_finite s hs hŒºs).im,
  have hf_zero_re : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, is_R_or_C.re (f x) ‚àÇŒº = 0,
  { intros s hs hŒºs,
    rw [integral_re (hf_int_finite s hs hŒºs), hf_zero s hs hŒºs, is_R_or_C.zero_re'], },
  have hf_zero_im : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, is_R_or_C.im (f x) ‚àÇŒº = 0,
  { intros s hs hŒºs,
    rw [integral_im (hf_int_finite s hs hŒºs), hf_zero s hs hŒºs],
    simp only [add_monoid_hom.map_zero], },
  exact ‚ü®ae_eq_zero_restrict_of_forall_set_integral_eq_zero_real hf_re hf_zero_re ht hŒºt,
    ae_eq_zero_restrict_of_forall_set_integral_eq_zero_real hf_im hf_zero_im ht hŒºt‚ü©,
end

variables [is_scalar_tower ‚Ñù ùïú E]
include ùïú

lemma ae_eq_zero_restrict_of_forall_set_integral_eq_zero {f : Œ± ‚Üí E}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = 0)
  {t : set Œ±} (ht : measurable_set t) (hŒºt : Œº t ‚â† ‚àû) :
  f =·µê[Œº.restrict t] 0 :=
begin
  refine ae_eq_zero_of_forall_inner (Œª c, _),
  refine ae_eq_zero_restrict_of_forall_set_integral_eq_zero_R_or_C _ _ ht hŒºt,
  { exact Œª s hs hŒºs, (hf_int_finite s hs hŒºs).const_inner c, },
  { intros s hs hŒºs,
    rw integral_inner (hf_int_finite s hs hŒºs) c,
    simp [hf_zero s hs hŒºs], },
end

lemma ae_eq_restrict_of_forall_set_integral_eq {f g : Œ± ‚Üí E}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hg_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on g s Œº)
  (hfg_zero : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = ‚à´ x in s, g x ‚àÇŒº)
  {t : set Œ±} (ht : measurable_set t) (hŒºt : Œº t ‚â† ‚àû) :
  f =·µê[Œº.restrict t] g :=
begin
  rw ‚Üê sub_ae_eq_zero,
  have hfg' : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, (f - g) x ‚àÇŒº = 0,
  { intros s hs hŒºs,
    rw integral_sub' (hf_int_finite s hs hŒºs) (hg_int_finite s hs hŒºs),
    exact sub_eq_zero.mpr (hfg_zero s hs hŒºs), },
  have hfg_int : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on (f-g) s Œº,
    from Œª s hs hŒºs, (hf_int_finite s hs hŒºs).sub (hg_int_finite s hs hŒºs),
  exact ae_eq_zero_restrict_of_forall_set_integral_eq_zero hfg_int hfg' ht hŒºt,
end

lemma ae_eq_zero_of_forall_set_integral_eq_of_sigma_finite [sigma_finite Œº] {f : Œ± ‚Üí E}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = 0) :
  f =·µê[Œº] 0 :=
begin
  let S := spanning_sets Œº,
  rw [‚Üê @measure.restrict_univ _ _ Œº, ‚Üê Union_spanning_sets Œº, eventually_eq, ae_iff,
    measure.restrict_apply' (measurable_set.Union (measurable_spanning_sets Œº))],
  rw [set.inter_Union, measure_Union_null_iff],
  intro n,
  have h_meas_n : measurable_set (S n), from (measurable_spanning_sets Œº n),
  have hŒºn : Œº (S n) < ‚àû, from measure_spanning_sets_lt_top Œº n,
  rw ‚Üê measure.restrict_apply' h_meas_n,
  exact ae_eq_zero_restrict_of_forall_set_integral_eq_zero hf_int_finite hf_zero h_meas_n hŒºn.ne,
end

lemma ae_eq_of_forall_set_integral_eq_of_sigma_finite [sigma_finite Œº] {f g : Œ± ‚Üí E}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hg_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on g s Œº)
  (hfg_eq : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = ‚à´ x in s, g x ‚àÇŒº) :
  f =·µê[Œº] g :=
begin
  rw ‚Üê sub_ae_eq_zero,
  have hfg : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, (f - g) x ‚àÇŒº = 0,
  { intros s hs hŒºs,
    rw [integral_sub' (hf_int_finite s hs hŒºs) (hg_int_finite s hs hŒºs),
      sub_eq_zero.mpr (hfg_eq s hs hŒºs)], },
  have hfg_int : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on (f-g) s Œº,
    from Œª s hs hŒºs, (hf_int_finite s hs hŒºs).sub (hg_int_finite s hs hŒºs),
  exact ae_eq_zero_of_forall_set_integral_eq_of_sigma_finite hfg_int hfg,
end

lemma ae_fin_strongly_measurable.ae_eq_zero_of_forall_set_integral_eq_zero {f : Œ± ‚Üí E}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = 0)
  (hf : ae_fin_strongly_measurable f Œº) :
  f =·µê[Œº] 0 :=
begin
  let t := hf.sigma_finite_set,
  suffices : f =·µê[Œº.restrict t] 0,
    from ae_of_ae_restrict_of_ae_restrict_compl hf.measurable_set this hf.ae_eq_zero_compl,
  haveI : sigma_finite (Œº.restrict t) := hf.sigma_finite_restrict,
  refine ae_eq_zero_of_forall_set_integral_eq_of_sigma_finite _ _,
  { intros s hs hŒºs,
    rw [integrable_on, measure.restrict_restrict hs],
    rw [measure.restrict_apply hs] at hŒºs,
    exact hf_int_finite _ (hs.inter hf.measurable_set) hŒºs, },
  { intros s hs hŒºs,
    rw [measure.restrict_restrict hs],
    rw [measure.restrict_apply hs] at hŒºs,
    exact hf_zero _ (hs.inter hf.measurable_set) hŒºs, },
end

lemma ae_fin_strongly_measurable.ae_eq_of_forall_set_integral_eq {f g : Œ± ‚Üí E}
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hg_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on g s Œº)
  (hfg_eq : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = ‚à´ x in s, g x ‚àÇŒº)
  (hf : ae_fin_strongly_measurable f Œº) (hg : ae_fin_strongly_measurable g Œº) :
  f =·µê[Œº] g :=
begin
  rw ‚Üê sub_ae_eq_zero,
  have hfg : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, (f - g) x ‚àÇŒº = 0,
  { intros s hs hŒºs,
    rw [integral_sub' (hf_int_finite s hs hŒºs) (hg_int_finite s hs hŒºs),
      sub_eq_zero.mpr (hfg_eq s hs hŒºs)], },
  have hfg_int : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on (f-g) s Œº,
    from Œª s hs hŒºs, (hf_int_finite s hs hŒºs).sub (hg_int_finite s hs hŒºs),
  exact (hf.sub hg).ae_eq_zero_of_forall_set_integral_eq_zero hfg_int hfg,
end

lemma Lp.ae_eq_zero_of_forall_set_integral_eq_zero
  (f : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû)
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = 0) :
  f =·µê[Œº] 0 :=
ae_fin_strongly_measurable.ae_eq_zero_of_forall_set_integral_eq_zero hf_int_finite hf_zero
  (Lp.fin_strongly_measurable _ hp_ne_zero hp_ne_top).ae_fin_strongly_measurable

lemma Lp.ae_eq_of_forall_set_integral_eq (f g : Lp E p Œº) (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû)
  (hf_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hg_int_finite : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí integrable_on g s Œº)
  (hfg : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = ‚à´ x in s, g x ‚àÇŒº) :
  f =·µê[Œº] g :=
ae_fin_strongly_measurable.ae_eq_of_forall_set_integral_eq hf_int_finite hg_int_finite hfg
  (Lp.fin_strongly_measurable _ hp_ne_zero hp_ne_top).ae_fin_strongly_measurable
  (Lp.fin_strongly_measurable _ hp_ne_zero hp_ne_top).ae_fin_strongly_measurable

lemma ae_eq_zero_of_forall_set_integral_eq_of_fin_strongly_measurable_trim (hm : m ‚â§ m0)
  {f : Œ± ‚Üí E} (hf_int_finite : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí integrable_on f s Œº)
  (hf_zero : ‚àÄ s : set Œ±, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = 0)
  (hf : fin_strongly_measurable f (Œº.trim hm)) :
  f =·µê[Œº] 0 :=
begin
  obtain ‚ü®t, ht_meas, htf_zero, htŒº‚ü© := hf.exists_set_sigma_finite,
  haveI : sigma_finite ((Œº.restrict t).trim hm) := by rwa restrict_trim hm Œº ht_meas at htŒº,
  have htf_zero : f =·µê[Œº.restrict t·∂ú] 0,
  { rw [eventually_eq, ae_restrict_iff' (measurable_set.compl (hm _ ht_meas))],
    exact eventually_of_forall htf_zero, },
  have hf_meas_m : @measurable _ _ m _ f, from hf.measurable,
  suffices : f =·µê[Œº.restrict t] 0,
    from ae_of_ae_restrict_of_ae_restrict_compl (hm t ht_meas) this htf_zero,
  refine measure_eq_zero_of_trim_eq_zero hm _,
  refine ae_eq_zero_of_forall_set_integral_eq_of_sigma_finite _ _,
  { intros s hs hŒºs,
    rw [integrable_on, restrict_trim hm (Œº.restrict t) hs, measure.restrict_restrict (hm s hs)],
    rw [‚Üê restrict_trim hm Œº ht_meas, measure.restrict_apply hs,
      trim_measurable_set_eq hm (@measurable_set.inter _ m _ _ hs ht_meas)] at hŒºs,
    refine integrable.trim hm _ hf_meas_m,
    exact hf_int_finite _ (@measurable_set.inter _ m _ _ hs ht_meas) hŒºs, },
  { intros s hs hŒºs,
    rw [restrict_trim hm (Œº.restrict t) hs, measure.restrict_restrict (hm s hs)],
    rw [‚Üê restrict_trim hm Œº ht_meas, measure.restrict_apply hs,
      trim_measurable_set_eq hm (@measurable_set.inter _ m _ _ hs ht_meas)] at hŒºs,
    rw ‚Üê integral_trim hm hf_meas_m,
    exact hf_zero _ (@measurable_set.inter _ m _ _ hs ht_meas) hŒºs, },
end

lemma integrable.ae_eq_zero_of_forall_set_integral_eq_zero {f : Œ± ‚Üí E} (hf : integrable f Œº)
  (hf_zero : ‚àÄ s, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = 0) :
  f =·µê[Œº] 0 :=
begin
  have hf_Lp : mem_‚Ñíp f 1 Œº, from mem_‚Ñíp_one_iff_integrable.mpr hf,
  let f_Lp := hf_Lp.to_Lp f,
  have hf_f_Lp : f =·µê[Œº] f_Lp, from (mem_‚Ñíp.coe_fn_to_Lp hf_Lp).symm,
  refine hf_f_Lp.trans _,
  refine Lp.ae_eq_zero_of_forall_set_integral_eq_zero f_Lp one_ne_zero ennreal.coe_ne_top _ _,
  { exact Œª s hs hŒºs, integrable.integrable_on (L1.integrable_coe_fn _), },
  { intros s hs hŒºs,
    rw integral_congr_ae (ae_restrict_of_ae hf_f_Lp.symm),
    exact hf_zero s hs hŒºs, },
end

lemma integrable.ae_eq_of_forall_set_integral_eq (f g : Œ± ‚Üí E)
  (hf : integrable f Œº) (hg : integrable g Œº)
  (hfg : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, f x ‚àÇŒº = ‚à´ x in s, g x ‚àÇŒº) :
  f =·µê[Œº] g :=
begin
  rw ‚Üê sub_ae_eq_zero,
  have hfg' : ‚àÄ s : set Œ±, measurable_set s ‚Üí Œº s < ‚àû ‚Üí ‚à´ x in s, (f - g) x ‚àÇŒº = 0,
  { intros s hs hŒºs,
    rw integral_sub' hf.integrable_on hg.integrable_on,
    exact sub_eq_zero.mpr (hfg s hs hŒºs), },
  exact integrable.ae_eq_zero_of_forall_set_integral_eq_zero (hf.sub hg) hfg',
end

omit ùïú
end ae_eq_of_forall_set_integral_eq

end measure_theory
