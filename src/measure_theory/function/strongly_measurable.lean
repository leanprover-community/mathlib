/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne, S√©bastien Gou√´zel
-/
import measure_theory.function.ess_sup
import measure_theory.integral.mean_inequalities
import topology.continuous_function.compact
import topology.metric_space.metrizable
import measure_theory.function.simple_func_dense

/-!
# Strongly measurable and finitely strongly measurable functions

A function `f` is said to be strongly measurable if `f` is the sequential limit of simple functions.
It is said to be finitely strongly measurable with respect to a measure `Œº` if the supports
of those simple functions have finite measure.

If the target space has a second countable topology, strongly measurable and measurable are
equivalent.

If the measure is sigma-finite, strongly measurable and finitely strongly measurable are equivalent.

The main property of finitely strongly measurable functions is
`fin_strongly_measurable.exists_set_sigma_finite`: there exists a measurable set `t` such that the
function is supported on `t` and `Œº.restrict t` is sigma-finite. As a consequence, we can prove some
results for those functions as if the measure was sigma-finite.

## Main definitions

* `strongly_measurable f`: `f : Œ± ‚Üí Œ≤` is the limit of a sequence `fs : ‚Ñï ‚Üí simple_func Œ± Œ≤`.
* `fin_strongly_measurable f Œº`: `f : Œ± ‚Üí Œ≤` is the limit of a sequence `fs : ‚Ñï ‚Üí simple_func Œ± Œ≤`
  such that for all `n ‚àà ‚Ñï`, the measure of the support of `fs n` is finite.
* `ae_fin_strongly_measurable f Œº`: `f` is almost everywhere equal to a `fin_strongly_measurable`
  function.

* `ae_fin_strongly_measurable.sigma_finite_set`: a measurable set `t` such that
  `f =·µê[Œº.restrict t·∂ú] 0` and `Œº.restrict t` is sigma-finite.

## Main statements

* `ae_fin_strongly_measurable.exists_set_sigma_finite`: there exists a measurable set `t` such that
  `f =·µê[Œº.restrict t·∂ú] 0` and `Œº.restrict t` is sigma-finite.

## References

* Hyt√∂nen, Tuomas, Jan Van Neerven, Mark Veraar, and Lutz Weis. Analysis in Banach spaces.
  Springer, 2016.

-/

open measure_theory filter topological_space function set measure_theory.measure
open_locale ennreal topological_space measure_theory nnreal

variables {Œ± Œ≤ Œ≥ Œπ : Type*} [encodable Œπ]
namespace measure_theory

local infixr ` ‚Üí‚Çõ `:25 := simple_func

section definitions
variable [topological_space Œ≤]

/-- A function is `strongly_measurable` if it is the limit of simple functions. -/
def strongly_measurable [measurable_space Œ±] (f : Œ± ‚Üí Œ≤) : Prop :=
‚àÉ fs : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ Œ≤, ‚àÄ x, tendsto (Œª n, fs n x) at_top (ùìù (f x))

localized "notation `strongly_measurable[` m `]` := @measure_theory.strongly_measurable _ _ _ m"
in measure_theory

/-- A function is `fin_strongly_measurable` with respect to a measure if it is the limit of simple
  functions with support with finite measure. -/
def fin_strongly_measurable [has_zero Œ≤] {m0 : measurable_space Œ±} (f : Œ± ‚Üí Œ≤) (Œº : measure Œ±) :
  Prop :=
‚àÉ fs : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ Œ≤, (‚àÄ n, Œº (support (fs n)) < ‚àû) ‚àß (‚àÄ x, tendsto (Œª n, fs n x) at_top (ùìù (f x)))

/-- A function is `ae_strongly_measurable` with respect to a measure `Œº` if it is almost everywhere
equal to the limit of a sequence of simple functions. -/
def ae_strongly_measurable {m0 : measurable_space Œ±} (f : Œ± ‚Üí Œ≤) (Œº : measure Œ±) :
  Prop :=
‚àÉ g, strongly_measurable g ‚àß f =·µê[Œº] g

/-- A function is `ae_fin_strongly_measurable` with respect to a measure if it is almost everywhere
equal to the limit of a sequence of simple functions with support with finite measure. -/
def ae_fin_strongly_measurable [has_zero Œ≤] {m0 : measurable_space Œ±} (f : Œ± ‚Üí Œ≤) (Œº : measure Œ±) :
  Prop :=
‚àÉ g, fin_strongly_measurable g Œº ‚àß f =·µê[Œº] g

end definitions

/-! ## Strongly measurable functions -/

lemma strongly_measurable.ae_strongly_measurable {Œ± Œ≤} {m0 : measurable_space Œ±}
  [topological_space Œ≤] {f : Œ± ‚Üí Œ≤} {Œº : measure Œ±} (hf : strongly_measurable f) :
  ae_strongly_measurable f Œº :=
‚ü®f, hf, eventually_eq.refl _ _‚ü©

@[simp] lemma subsingleton.strongly_measurable {Œ± Œ≤} [measurable_space Œ±] [topological_space Œ≤]
  [subsingleton Œ≤] (f : Œ± ‚Üí Œ≤) :
  strongly_measurable f :=
begin
  let f_sf : Œ± ‚Üí‚Çõ Œ≤ := ‚ü®f, Œª x, _, set.subsingleton.finite set.subsingleton_of_subsingleton‚ü©,
  { exact ‚ü®Œª n, f_sf, Œª x, tendsto_const_nhds‚ü©, },
  { have h_univ : f ‚Åª¬π' {x} = set.univ, by { ext1 y, simp, },
    rw h_univ,
    exact measurable_set.univ, },
end

lemma simple_func.strongly_measurable {Œ± Œ≤} {m : measurable_space Œ±} [topological_space Œ≤]
  (f : Œ± ‚Üí‚Çõ Œ≤) :
  strongly_measurable f :=
‚ü®Œª _, f, Œª x, tendsto_const_nhds‚ü©

lemma strongly_measurable_of_is_empty [is_empty Œ±] {m : measurable_space Œ±} [topological_space Œ≤]
  (f : Œ± ‚Üí Œ≤) : strongly_measurable f :=
‚ü®Œª n, simple_func.of_is_empty, is_empty_elim‚ü©

lemma strongly_measurable_const {Œ± Œ≤} {m : measurable_space Œ±} [topological_space Œ≤] {b : Œ≤} :
  strongly_measurable (Œª a : Œ±, b) :=
‚ü®Œª n, simple_func.const Œ± b, Œª a, tendsto_const_nhds‚ü©

lemma strongly_measurable_zero {Œ± Œ≤} {m : measurable_space Œ±} [topological_space Œ≤] [has_zero Œ≤] :
  strongly_measurable (0 : Œ± ‚Üí Œ≤) :=
@strongly_measurable_const _ _ _ _ 0

/-- A version of `strongly_measurable_const` that assumes `f x = f y` for all `x, y`.
This version works for functions between empty types. -/
lemma strongly_measurable_const' {Œ± Œ≤} {m : measurable_space Œ±} [topological_space Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ x y, f x = f y) : strongly_measurable f :=
begin
  casesI is_empty_or_nonempty Œ±,
  { exact strongly_measurable_of_is_empty f },
  { convert strongly_measurable_const, exact funext (Œª x, hf x h.some) }
end

@[simp] lemma subsingleton.strongly_measurable' {Œ± Œ≤} [measurable_space Œ±] [topological_space Œ≤]
  [subsingleton Œ±] (f : Œ± ‚Üí Œ≤) :
  strongly_measurable f :=
strongly_measurable_const' (Œª x y, by rw subsingleton.elim x y)

namespace strongly_measurable

variables {f g : Œ± ‚Üí Œ≤}

section basic_properties_in_any_topological_space
variables [topological_space Œ≤]

/-- A sequence of simple functions such that `‚àÄ x, tendsto (Œª n, hf.approx n x) at_top (ùìù (f x))`.
That property is given by `strongly_measurable.tendsto_approx`. -/
protected noncomputable
def approx {m : measurable_space Œ±} (hf : strongly_measurable f) : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ Œ≤ :=
hf.some

protected lemma tendsto_approx {m : measurable_space Œ±} (hf : strongly_measurable f) :
  ‚àÄ x, tendsto (Œª n, hf.approx n x) at_top (ùìù (f x)) :=
hf.some_spec

end basic_properties_in_any_topological_space

lemma fin_strongly_measurable_of_set_sigma_finite [topological_space Œ≤] [has_zero Œ≤]
  {m : measurable_space Œ±} {Œº : measure Œ±} (hf_meas : strongly_measurable f) {t : set Œ±}
  (ht : measurable_set t) (hft_zero : ‚àÄ x ‚àà t·∂ú, f x = 0) (htŒº : sigma_finite (Œº.restrict t)) :
  fin_strongly_measurable f Œº :=
begin
  haveI : sigma_finite (Œº.restrict t) := htŒº,
  let S := spanning_sets (Œº.restrict t),
  have hS_meas : ‚àÄ n, measurable_set (S n), from measurable_spanning_sets (Œº.restrict t),
  let f_approx := hf_meas.approx,
  let fs := Œª n, simple_func.restrict (f_approx n) (S n ‚à© t),
  have h_fs_t_compl : ‚àÄ n, ‚àÄ x ‚àâ t, fs n x = 0,
  { intros n x hxt,
    rw simple_func.restrict_apply _ ((hS_meas n).inter ht),
    refine set.indicator_of_not_mem _ _,
    simp [hxt], },
  refine ‚ü®fs, _, Œª x, _‚ü©,
  { simp_rw simple_func.support_eq,
    refine Œª n, (measure_bUnion_finset_le _ _).trans_lt _,
    refine ennreal.sum_lt_top_iff.mpr (Œª y hy, _),
    rw simple_func.restrict_preimage_singleton _ ((hS_meas n).inter ht),
    swap, { rw finset.mem_filter at hy, exact hy.2, },
    refine (measure_mono (set.inter_subset_left _ _)).trans_lt _,
    have h_lt_top := measure_spanning_sets_lt_top (Œº.restrict t) n,
    rwa measure.restrict_apply' ht at h_lt_top, },
  { by_cases hxt : x ‚àà t,
    swap, { rw [funext (Œª n, h_fs_t_compl n x hxt), hft_zero x hxt], exact tendsto_const_nhds, },
    have h : tendsto (Œª n, (f_approx n) x) at_top (ùìù (f x)), from hf_meas.tendsto_approx x,
    obtain ‚ü®n‚ÇÅ, hn‚ÇÅ‚ü© : ‚àÉ n, ‚àÄ m, n ‚â§ m ‚Üí fs m x = f_approx m x,
    { obtain ‚ü®n, hn‚ü© : ‚àÉ n, ‚àÄ m, n ‚â§ m ‚Üí x ‚àà S m ‚à© t,
      { suffices : ‚àÉ n, ‚àÄ m, n ‚â§ m ‚Üí x ‚àà S m,
        { obtain ‚ü®n, hn‚ü© := this,
          exact ‚ü®n, Œª m hnm, set.mem_inter (hn m hnm) hxt‚ü©, },
        suffices : ‚àÉ n, x ‚àà S n,
        { rcases this with ‚ü®n, hn‚ü©,
          exact ‚ü®n, Œª m hnm, monotone_spanning_sets (Œº.restrict t) hnm hn‚ü©, },
        rw [‚Üê set.mem_Union, Union_spanning_sets (Œº.restrict t)],
        trivial, },
      refine ‚ü®n, Œª m hnm, _‚ü©,
      simp_rw [fs, simple_func.restrict_apply _ ((hS_meas m).inter ht),
        set.indicator_of_mem (hn m hnm)], },
    rw tendsto_at_top' at h ‚ä¢,
    intros s hs,
    obtain ‚ü®n‚ÇÇ, hn‚ÇÇ‚ü© := h s hs,
    refine ‚ü®max n‚ÇÅ n‚ÇÇ, Œª m hm, _‚ü©,
    rw hn‚ÇÅ m ((le_max_left _ _).trans hm.le),
    exact hn‚ÇÇ m ((le_max_right _ _).trans hm.le), },
end

/-- If the measure is sigma-finite, all strongly measurable functions are
  `fin_strongly_measurable`. -/
protected lemma fin_strongly_measurable [topological_space Œ≤] [has_zero Œ≤] {m0 : measurable_space Œ±}
  (hf : strongly_measurable f) (Œº : measure Œ±) [sigma_finite Œº] :
  fin_strongly_measurable f Œº :=
hf.fin_strongly_measurable_of_set_sigma_finite measurable_set.univ (by simp)
  (by rwa measure.restrict_univ)

/-- A strongly measurable function is measurable. -/
protected lemma measurable [measurable_space Œ±] [topological_space Œ≤] [metrizable_space Œ≤]
  [measurable_space Œ≤] [borel_space Œ≤] (hf : strongly_measurable f) :
  measurable f :=
measurable_of_tendsto_metrizable (Œª n, (hf.approx n).measurable)
  (tendsto_pi_nhds.mpr hf.tendsto_approx)

lemma _root_.continuous.comp_strongly_measurable
  {m : measurable_space Œ±} [topological_space Œ≤] [topological_space Œ≥] {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤}
  (hg : continuous g) (hf : strongly_measurable f) : strongly_measurable (Œª x, g (f x)) :=
‚ü®Œª n, simple_func.map g (hf.approx n), Œª x, (hg.tendsto _).comp (hf.tendsto_approx x)‚ü©

section arithmetic
variables [measurable_space Œ±] [topological_space Œ≤]

@[to_additive]
protected lemma mul [has_mul Œ≤] [has_continuous_mul Œ≤]
  (hf : strongly_measurable f) (hg : strongly_measurable g) :
  strongly_measurable (f * g) :=
‚ü®Œª n, hf.approx n * hg.approx n, Œª x, (hf.tendsto_approx x).mul (hg.tendsto_approx x)‚ü©

@[to_additive]
protected lemma inv [group Œ≤] [topological_group Œ≤] (hf : strongly_measurable f) :
  strongly_measurable f‚Åª¬π :=
‚ü®Œª n, (hf.approx n)‚Åª¬π, Œª x, (hf.tendsto_approx x).inv‚ü©

@[to_additive]
protected lemma div [has_div Œ≤] [has_continuous_div Œ≤]
  (hf : strongly_measurable f) (hg : strongly_measurable g) :
  strongly_measurable (f / g) :=
‚ü®Œª n, hf.approx n / hg.approx n, Œª x, (hf.tendsto_approx x).div' (hg.tendsto_approx x)‚ü©

protected lemma const_smul {ùïú} [has_scalar ùïú Œ≤] [has_continuous_const_smul ùïú Œ≤]
  (hf : strongly_measurable f) (c : ùïú) :
  strongly_measurable (c ‚Ä¢ f) :=
‚ü®Œª n, c ‚Ä¢ (hf.approx n), Œª x, (hf.tendsto_approx x).const_smul c‚ü©

protected lemma const_smul' {ùïú} [has_scalar ùïú Œ≤] [has_continuous_const_smul ùïú Œ≤]
  (hf : strongly_measurable f) (c : ùïú) :
  strongly_measurable (Œª x, c ‚Ä¢ (f x)) :=
hf.const_smul c

end arithmetic

protected lemma mono {m m' : measurable_space Œ±} [topological_space Œ≤]
  (hf : @strongly_measurable Œ± Œ≤ _ m' f) (h_mono : m' ‚â§ m) :
  @strongly_measurable Œ± Œ≤ _ m f :=
begin
  let f_approx : ‚Ñï ‚Üí @simple_func Œ± m Œ≤ := Œª n,
  { to_fun := hf.approx n,
    measurable_set_fiber' := Œª x, h_mono _ (simple_func.measurable_set_fiber' _ x),
    finite_range' := simple_func.finite_range (hf.approx n) },
  exact ‚ü®f_approx, hf.tendsto_approx‚ü©,
end

protected lemma prod_mk {m : measurable_space Œ±} [topological_space Œ≤] [topological_space Œ≥]
  {f : Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≥} (hf : strongly_measurable f) (hg : strongly_measurable g) :
  strongly_measurable (Œª x, (f x, g x)) :=
begin
  refine ‚ü®Œª n, simple_func.pair (hf.approx n) (hg.approx n), Œª x, _‚ü©,
  rw nhds_prod_eq,
  exact tendsto.prod_mk (hf.tendsto_approx x) (hg.tendsto_approx x),
end

lemma comp_measurable [topological_space Œ≤] {m : measurable_space Œ±} {m' : measurable_space Œ≥}
  {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (hf : strongly_measurable f) (hg : measurable g) :
  strongly_measurable (f ‚àò g) :=
‚ü®Œª n, simple_func.comp (hf.approx n) g hg, Œª x, hf.tendsto_approx (g x)‚ü©

section order
variables [measurable_space Œ±] [topological_space Œ≤]

open filter
open_locale filter

protected lemma sup [has_sup Œ≤] [has_continuous_sup Œ≤] (hf : strongly_measurable f)
  (hg : strongly_measurable g) :
  strongly_measurable (f ‚äî g) :=
‚ü®Œª n, hf.approx n ‚äî hg.approx n, Œª x, (hf.tendsto_approx x).sup_right_nhds (hg.tendsto_approx x)‚ü©

protected lemma inf [has_inf Œ≤] [has_continuous_inf Œ≤] (hf : strongly_measurable f)
  (hg : strongly_measurable g) :
  strongly_measurable (f ‚äì g) :=
‚ü®Œª n, hf.approx n ‚äì hg.approx n, Œª x, (hf.tendsto_approx x).inf_right_nhds (hg.tendsto_approx x)‚ü©

end order

/-- The range of a strongly measurable function is separable. -/
lemma is_separable_range {m : measurable_space Œ±} [topological_space Œ≤] [metrizable_space Œ≤]
  (hf : strongly_measurable f) :
  topological_space.is_separable (range f) :=
begin
  letI := metrizable_space_metric Œ≤,
  have : is_separable (closure (‚ãÉ n, range (hf.approx n))) :=
    (is_separable_Union (Œª n, (simple_func.finite_range (hf.approx n)).is_separable)).closure,
  apply this.mono,
  rintros - ‚ü®x, rfl‚ü©,
  apply mem_closure_of_tendsto (hf.tendsto_approx x),
  apply eventually_of_forall (Œª n, _),
  apply mem_Union_of_mem n,
  exact mem_range_self _
end

section second_countable_strongly_measurable

variables [measurable_space Œ±] [measurable_space Œ≤]

/-- In a space with second countable topology, measurable implies strongly measurable. -/
lemma _root_.measurable.strongly_measurable [topological_space Œ≤] [metrizable_space Œ≤]
  [second_countable_topology Œ≤] [opens_measurable_space Œ≤] (hf : measurable f) :
  strongly_measurable f :=
begin
  letI := metrizable_space_metric Œ≤,
  rcases is_empty_or_nonempty Œ≤; resetI,
  { exact subsingleton.strongly_measurable f, },
  { inhabit Œ≤,
    exact ‚ü®simple_func.approx_on f hf set.univ default (set.mem_univ _),
      Œª x, simple_func.tendsto_approx_on hf (set.mem_univ _) (by simp)‚ü©, },
end

/-- A continuous function to a second countable space is strongly measurable. -/
lemma _root_.continuous.strongly_measurable [topological_space Œ±] [opens_measurable_space Œ±]
  {Œ≤ : Type*} [topological_space Œ≤] [metrizable_space Œ≤] [second_countable_topology Œ≤]
  {f : Œ± ‚Üí Œ≤} (hf : continuous f) :
  strongly_measurable f :=
begin
  letI : measurable_space Œ≤ := borel Œ≤,
  haveI : borel_space Œ≤ := ‚ü®rfl‚ü©,
  exact hf.measurable.strongly_measurable,
end

lemma _root_.strongly_measurable_id [topological_space Œ±] [metrizable_space Œ±]
  [opens_measurable_space Œ±] [second_countable_topology Œ±] :
  strongly_measurable (id : Œ± ‚Üí Œ±) :=
measurable_id.strongly_measurable

/-- In a space with second countable topology, strongly measurable and measurable are equivalent. -/
lemma _root_.strongly_measurable_iff_measurable
  [topological_space Œ≤] [metrizable_space Œ≤] [borel_space Œ≤] [second_countable_topology Œ≤] :
  strongly_measurable f ‚Üî measurable f :=
‚ü®Œª h, h.measurable, Œª h, measurable.strongly_measurable h‚ü©

end second_countable_strongly_measurable

/-- A function is strongly measurable if and only if it is measurable and has separable
range. -/
theorem _root_.strongly_measurable_iff_measurable_separable {m : measurable_space Œ±}
  [topological_space Œ≤] [metrizable_space Œ≤] [measurable_space Œ≤] [borel_space Œ≤] :
  strongly_measurable f ‚Üî (measurable f ‚àß is_separable (range f)) :=
begin
  refine ‚ü®Œª H, ‚ü®H.measurable, H.is_separable_range‚ü©, _‚ü©,
  rintros ‚ü®H, H'‚ü©,
  letI := metrizable_space_metric Œ≤,
  let g := cod_restrict f (closure (range f)) (Œª x, subset_closure (mem_range_self x)),
  have fg : f = (coe : closure (range f) ‚Üí Œ≤) ‚àò g, by { ext x, refl },
  have T : measurable_embedding (coe : closure (range f) ‚Üí Œ≤),
  { apply closed_embedding.measurable_embedding,
    exact closed_embedding_subtype_coe is_closed_closure },
  have g_meas : measurable g,
  { rw fg at H, exact T.measurable_comp_iff.1 H },
  haveI : second_countable_topology (closure (range f)),
  { suffices : separable_space (closure (range f)),
      by exactI uniform_space.second_countable_of_separable _,
    exact (is_separable.closure H').separable_space },
  have g_smeas : strongly_measurable g := measurable.strongly_measurable g_meas,
  rw fg,
  exact continuous_subtype_coe.comp_strongly_measurable g_smeas,
end

/-- If `g` is a topological embedding, then `f` is strongly measurable iff `g ‚àò f` is. -/
lemma _root_.embedding.comp_strongly_measurable_iff {m : measurable_space Œ±}
  [topological_space Œ≤] [metrizable_space Œ≤] [topological_space Œ≥] [metrizable_space Œ≥]
  {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : embedding g) :
  strongly_measurable (Œª x, g (f x)) ‚Üî strongly_measurable f :=
begin
  letI := metrizable_space_metric Œ≥,
  letI : measurable_space Œ≤ := borel Œ≤,
  haveI : borel_space Œ≤ := ‚ü®rfl‚ü©,
  letI : measurable_space Œ≥ := borel Œ≥,
  haveI : borel_space Œ≥ := ‚ü®rfl‚ü©,
  refine ‚ü®Œª H, strongly_measurable_iff_measurable_separable.2 ‚ü®_, _‚ü©,
    Œª H, hg.continuous.comp_strongly_measurable H‚ü©,
  { let G : Œ≤ ‚Üí range g := cod_restrict g (range g) mem_range_self,
    have hG : closed_embedding G :=
    { closed_range :=
      begin
        convert is_closed_univ,
        apply eq_univ_of_forall,
        rintros ‚ü®-, ‚ü®x, rfl‚ü©‚ü©,
        exact mem_range_self x
      end,
      .. hg.cod_restrict _ _ },
    have : measurable (G ‚àò f) := measurable.subtype_mk H.measurable,
    exact hG.measurable_embedding.measurable_comp_iff.1 this },
  { have : is_separable (g ‚Åª¬π' (range (g ‚àò f))) := hg.is_separable_preimage H.is_separable_range,
    convert this,
    ext x,
    simp [hg.inj.eq_iff] }
end

/-- A sequential limit of strongly measurable functions is strongly measurable. -/
lemma strongly_measurable_of_tendsto {m : measurable_space Œ±}
  [topological_space Œ≤] [metrizable_space Œ≤] (u : filter Œπ) [ne_bot u] [is_countably_generated u]
  {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} (hf : ‚àÄ i, strongly_measurable (f i)) (lim : tendsto f u (ùìù g)) :
  strongly_measurable g :=
begin
  letI := metrizable_space_metric Œ≤,
  letI : measurable_space Œ≤ := borel Œ≤,
  haveI : borel_space Œ≤ := ‚ü®rfl‚ü©,
  refine strongly_measurable_iff_measurable_separable.2 ‚ü®_, _‚ü©,
  { apply measurable_of_tendsto_metrizable' u (Œª i, _) lim,
    exact (hf i).measurable },
  { have : is_separable (closure (‚ãÉ i, range (f i))) :=
      (is_separable_Union (Œª i, (hf i).is_separable_range)).closure,
    apply this.mono,
    rintros - ‚ü®x, rfl‚ü©,
    rw [tendsto_pi_nhds] at lim,
    apply mem_closure_of_tendsto (lim x),
    apply eventually_of_forall (Œª n, _),
    apply mem_Union_of_mem n,
    exact mem_range_self _ }
end

protected lemma piecewise [measurable_space Œ±] [topological_space Œ≤]
  {s : set Œ±} {_ : decidable_pred (‚àà s)} (hs : measurable_set s)
  (hf : strongly_measurable f) (hg : strongly_measurable g) :
  strongly_measurable (set.piecewise s f g) :=
begin
  refine ‚ü®Œª n, simple_func.piecewise s hs (hf.approx n) (hg.approx n), Œª x, _‚ü©,
  by_cases hx : x ‚àà s,
  { simpa [hx] using hf.tendsto_approx x },
  { simpa [hx] using hg.tendsto_approx x },
end

/-- this is slightly different from `strongly_measurable.piecewise`. It can be used to show
`strongly_measurable (ite (x=0) 0 1)` by
`exact strongly_measurable.ite (measurable_set_singleton 0) strongly_measurable_const
strongly_measurable_const`, but replacing `strongly_measurable.ite` by
`strongly_measurable.piecewise` in that example proof does not work. -/
protected lemma ite [measurable_space Œ±] [topological_space Œ≤]
  {p : Œ± ‚Üí Prop} {_ : decidable_pred p}
  (hp : measurable_set {a : Œ± | p a}) (hf : strongly_measurable f) (hg : strongly_measurable g) :
  strongly_measurable (Œª x, ite (p x) (f x) (g x)) :=
strongly_measurable.piecewise hp hf hg

protected lemma indicator [measurable_space Œ±] [topological_space Œ≤] [has_zero Œ≤]
  (hf : strongly_measurable f) {s : set Œ±} (hs : measurable_set s) :
  strongly_measurable (s.indicator f) :=
hf.piecewise hs strongly_measurable_const

protected lemma norm [measurable_space Œ±] {Œ≤ : Type*} [normed_group Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : strongly_measurable f) :
  strongly_measurable (Œª x, ‚à•f x‚à•) :=
continuous_norm.comp_strongly_measurable hf

protected lemma nnnorm [measurable_space Œ±] {Œ≤ : Type*} [normed_group Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : strongly_measurable f) :
  strongly_measurable (Œª x, nnnorm (f x)) :=
continuous_nnnorm.comp_strongly_measurable hf

protected lemma ennnorm [measurable_space Œ±] {Œ≤ : Type*} [normed_group Œ≤] {f : Œ± ‚Üí Œ≤}
  (hf : strongly_measurable f) :
  measurable (Œª a, (nnnorm (f a) : ‚Ñù‚â•0‚àû)) :=
(ennreal.continuous_coe.comp_strongly_measurable hf.nnnorm).measurable

lemma _root_.measurable_embedding.strongly_measurable_extend {f : Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≥} {g' : Œ≥ ‚Üí Œ≤}
  {mŒ± : measurable_space Œ±} {mŒ≥ : measurable_space Œ≥} [topological_space Œ≤]
  (hg : measurable_embedding g)
  (hf : strongly_measurable f) (hg' : strongly_measurable g') :
  strongly_measurable (function.extend g f g') :=
begin
  refine ‚ü®Œª n, simple_func.extend (hf.approx n) g hg (hg'.approx n), _‚ü©,
  assume x,
  by_cases hx : ‚àÉ y, g y = x,
  { rcases hx with ‚ü®y, rfl‚ü©,
    simpa only [simple_func.extend_apply, hg.injective, extend_apply] using hf.tendsto_approx y },
  { simpa only [hx, simple_func.extend_apply', not_false_iff, extend_apply']
      using hg'.tendsto_approx x }
end

lemma _root_.measurable_embedding.exists_strongly_measurable_extend
  {f : Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≥}
  {mŒ± : measurable_space Œ±} {mŒ≥ : measurable_space Œ≥} [topological_space Œ≤]
  (hg : measurable_embedding g) (hf : strongly_measurable f) (hne : Œ≥ ‚Üí nonempty Œ≤) :
  ‚àÉ f' : Œ≥ ‚Üí Œ≤, strongly_measurable f' ‚àß f' ‚àò g = f :=
‚ü®function.extend g f (Œª x, classical.choice (hne x)),
  hg.strongly_measurable_extend hf (strongly_measurable_const' $ Œª _ _, rfl),
  funext $ Œª x, extend_apply hg.injective _ _ _‚ü©


section
variables {ùïú : Type*} {E : Type*} [is_R_or_C ùïú] [inner_product_space ùïú E]
local notation `‚ü™`x`, `y`‚ü´` := @inner ùïú _ _ x y

protected lemma inner {m : measurable_space Œ±}
  {f g : Œ± ‚Üí E} (hf : strongly_measurable f) (hg : strongly_measurable g) :
  strongly_measurable (Œª t, ‚ü™f t, g t‚ü´) :=
continuous.comp_strongly_measurable continuous_inner (hf.prod_mk hg)

end

@[to_additive]
protected lemma smul {M : Type*} {m : measurable_space Œ±}
  [topological_space Œ≤] [topological_space M] [has_scalar Œ≤ M] [has_continuous_smul Œ≤ M]
  {f : Œ± ‚Üí Œ≤} {g : Œ± ‚Üí M} (hf : strongly_measurable f) (hg : strongly_measurable g) :
  strongly_measurable (Œª x, f x ‚Ä¢ g x) :=
continuous_smul.comp_strongly_measurable (hf.prod_mk hg)

end strongly_measurable

/-! ## Finitely strongly measurable functions -/

lemma fin_strongly_measurable_zero {Œ± Œ≤} {m : measurable_space Œ±} {Œº : measure Œ±} [has_zero Œ≤]
  [topological_space Œ≤] :
  fin_strongly_measurable (0 : Œ± ‚Üí Œ≤) Œº :=
‚ü®0, by simp only [pi.zero_apply, simple_func.coe_zero, support_zero', measure_empty,
    with_top.zero_lt_top, forall_const],
  Œª n, tendsto_const_nhds‚ü©

namespace fin_strongly_measurable

variables {m0 : measurable_space Œ±} {Œº : measure Œ±} {f g : Œ± ‚Üí Œ≤}

lemma ae_fin_strongly_measurable [has_zero Œ≤] [topological_space Œ≤]
  (hf : fin_strongly_measurable f Œº) :
  ae_fin_strongly_measurable f Œº :=
‚ü®f, hf, ae_eq_refl f‚ü©

section sequence
variables [has_zero Œ≤] [topological_space Œ≤] (hf : fin_strongly_measurable f Œº)

/-- A sequence of simple functions such that `‚àÄ x, tendsto (Œª n, hf.approx n x) at_top (ùìù (f x))`
and `‚àÄ n, Œº (support (hf.approx n)) < ‚àû`. These properties are given by
`fin_strongly_measurable.tendsto_approx` and `fin_strongly_measurable.fin_support_approx`. -/
protected noncomputable def approx : ‚Ñï ‚Üí Œ± ‚Üí‚Çõ Œ≤ := hf.some

protected lemma fin_support_approx : ‚àÄ n, Œº (support (hf.approx n)) < ‚àû := hf.some_spec.1

protected lemma tendsto_approx : ‚àÄ x, tendsto (Œª n, hf.approx n x) at_top (ùìù (f x)) :=
hf.some_spec.2

end sequence

protected lemma strongly_measurable [has_zero Œ≤] [topological_space Œ≤]
  (hf : fin_strongly_measurable f Œº) :
  strongly_measurable f :=
‚ü®hf.approx, hf.tendsto_approx‚ü©

lemma exists_set_sigma_finite [has_zero Œ≤] [topological_space Œ≤] [t2_space Œ≤]
  (hf : fin_strongly_measurable f Œº) :
  ‚àÉ t, measurable_set t ‚àß (‚àÄ x ‚àà t·∂ú, f x = 0) ‚àß sigma_finite (Œº.restrict t) :=
begin
  rcases hf with ‚ü®fs, hT_lt_top, h_approx‚ü©,
  let T := Œª n, support (fs n),
  have hT_meas : ‚àÄ n, measurable_set (T n), from Œª n, simple_func.measurable_set_support (fs n),
  let t := ‚ãÉ n, T n,
  refine ‚ü®t, measurable_set.Union hT_meas, _, _‚ü©,
  { have h_fs_zero : ‚àÄ n, ‚àÄ x ‚àà t·∂ú, fs n x = 0,
    { intros n x hxt,
      rw [set.mem_compl_iff, set.mem_Union, not_exists] at hxt,
      simpa using (hxt n), },
    refine Œª x hxt, tendsto_nhds_unique (h_approx x) _,
    rw funext (Œª n, h_fs_zero n x hxt),
    exact tendsto_const_nhds, },
  { refine ‚ü®‚ü®‚ü®Œª n, t·∂ú ‚à™ T n, Œª n, trivial, Œª n, _, _‚ü©‚ü©‚ü©,
    { rw [measure.restrict_apply' (measurable_set.Union hT_meas), set.union_inter_distrib_right,
        set.compl_inter_self t, set.empty_union],
      exact (measure_mono (set.inter_subset_left _ _)).trans_lt (hT_lt_top n), },
    { rw ‚Üê set.union_Union t·∂ú T,
      exact set.compl_union_self _ } }
end

/-- A finitely strongly measurable function is measurable. -/
protected lemma measurable [has_zero Œ≤] [topological_space Œ≤] [metrizable_space Œ≤]
  [measurable_space Œ≤] [borel_space Œ≤] (hf : fin_strongly_measurable f Œº) :
  measurable f :=
hf.strongly_measurable.measurable

section arithmetic
variables [topological_space Œ≤]

protected lemma mul [monoid_with_zero Œ≤] [has_continuous_mul Œ≤]
  (hf : fin_strongly_measurable f Œº) (hg : fin_strongly_measurable g Œº) :
  fin_strongly_measurable (f * g) Œº :=
begin
  refine ‚ü®Œª n, hf.approx n * hg.approx n, _, Œª x, (hf.tendsto_approx x).mul (hg.tendsto_approx x)‚ü©,
  intro n,
  exact (measure_mono (support_mul_subset_left _ _)).trans_lt (hf.fin_support_approx n),
end

protected lemma add [add_monoid Œ≤] [has_continuous_add Œ≤]
  (hf : fin_strongly_measurable f Œº) (hg : fin_strongly_measurable g Œº) :
  fin_strongly_measurable (f + g) Œº :=
‚ü®Œª n, hf.approx n + hg.approx n,
  Œª n, (measure_mono (function.support_add _ _)).trans_lt ((measure_union_le _ _).trans_lt
    (ennreal.add_lt_top.mpr ‚ü®hf.fin_support_approx n, hg.fin_support_approx n‚ü©)),
  Œª x, (hf.tendsto_approx x).add (hg.tendsto_approx x)‚ü©

protected lemma neg [add_group Œ≤] [topological_add_group Œ≤] (hf : fin_strongly_measurable f Œº) :
  fin_strongly_measurable (-f) Œº :=
begin
  refine ‚ü®Œª n, -hf.approx n, Œª n, _, Œª x, (hf.tendsto_approx x).neg‚ü©,
  suffices : Œº (function.support (Œª x, - (hf.approx n) x)) < ‚àû, by convert this,
  rw function.support_neg (hf.approx n),
  exact hf.fin_support_approx n,
end

protected lemma sub [add_group Œ≤] [has_continuous_sub Œ≤]
  (hf : fin_strongly_measurable f Œº) (hg : fin_strongly_measurable g Œº) :
  fin_strongly_measurable (f - g) Œº :=
‚ü®Œª n, hf.approx n - hg.approx n,
  Œª n, (measure_mono (function.support_sub _ _)).trans_lt ((measure_union_le _ _).trans_lt
    (ennreal.add_lt_top.mpr ‚ü®hf.fin_support_approx n, hg.fin_support_approx n‚ü©)),
  Œª x, (hf.tendsto_approx x).sub (hg.tendsto_approx x)‚ü©

protected lemma const_smul {ùïú} [topological_space ùïú] [add_monoid Œ≤] [monoid ùïú]
  [distrib_mul_action ùïú Œ≤] [has_continuous_smul ùïú Œ≤]
  (hf : fin_strongly_measurable f Œº) (c : ùïú) :
  fin_strongly_measurable (c ‚Ä¢ f) Œº :=
begin
  refine ‚ü®Œª n, c ‚Ä¢ (hf.approx n), Œª n, _, Œª x, (hf.tendsto_approx x).const_smul c‚ü©,
  rw simple_func.coe_smul,
  refine (measure_mono (support_smul_subset_right c _)).trans_lt (hf.fin_support_approx n),
end

end arithmetic

section order
variables [topological_space Œ≤] [has_zero Œ≤]

protected lemma sup [semilattice_sup Œ≤] [has_continuous_sup Œ≤]
  (hf : fin_strongly_measurable f Œº) (hg : fin_strongly_measurable g Œº) :
  fin_strongly_measurable (f ‚äî g) Œº :=
begin
  refine ‚ü®Œª n, hf.approx n ‚äî hg.approx n, Œª n, _,
    Œª x, (hf.tendsto_approx x).sup_right_nhds (hg.tendsto_approx x)‚ü©,
  refine (measure_mono (support_sup _ _)).trans_lt _,
  exact measure_union_lt_top_iff.mpr ‚ü®hf.fin_support_approx n, hg.fin_support_approx n‚ü©,
end

protected lemma inf [semilattice_inf Œ≤] [has_continuous_inf Œ≤]
  (hf : fin_strongly_measurable f Œº) (hg : fin_strongly_measurable g Œº) :
  fin_strongly_measurable (f ‚äì g) Œº :=
begin
  refine ‚ü®Œª n, hf.approx n ‚äì hg.approx n, Œª n, _,
    Œª x, (hf.tendsto_approx x).inf_right_nhds (hg.tendsto_approx x)‚ü©,
  refine (measure_mono (support_inf _ _)).trans_lt _,
  exact measure_union_lt_top_iff.mpr ‚ü®hf.fin_support_approx n, hg.fin_support_approx n‚ü©,
end

end order

end fin_strongly_measurable

lemma fin_strongly_measurable_iff_strongly_measurable_and_exists_set_sigma_finite {Œ± Œ≤} {f : Œ± ‚Üí Œ≤}
  [topological_space Œ≤] [t2_space Œ≤] [has_zero Œ≤] {m : measurable_space Œ±} {Œº : measure Œ±} :
  fin_strongly_measurable f Œº ‚Üî (strongly_measurable f
    ‚àß (‚àÉ t, measurable_set t ‚àß (‚àÄ x ‚àà t·∂ú, f x = 0) ‚àß sigma_finite (Œº.restrict t))) :=
‚ü®Œª hf, ‚ü®hf.strongly_measurable, hf.exists_set_sigma_finite‚ü©,
  Œª hf, hf.1.fin_strongly_measurable_of_set_sigma_finite hf.2.some_spec.1 hf.2.some_spec.2.1
    hf.2.some_spec.2.2‚ü©

lemma ae_fin_strongly_measurable_zero {Œ± Œ≤} {m : measurable_space Œ±} (Œº : measure Œ±) [has_zero Œ≤]
  [topological_space Œ≤] :
  ae_fin_strongly_measurable (0 : Œ± ‚Üí Œ≤) Œº :=
‚ü®0, fin_strongly_measurable_zero, eventually_eq.rfl‚ü©

/-! ### Almost everywhere strongly measurable functions -/

lemma ae_strongly_measurable_const {Œ± Œ≤} {m : measurable_space Œ±} {Œº : measure Œ±}
  [topological_space Œ≤] {b : Œ≤} :
  ae_strongly_measurable (Œª a : Œ±, b) Œº :=
strongly_measurable_const.ae_strongly_measurable

lemma ae_strongly_measurable_zero {Œ± Œ≤} {m : measurable_space Œ±} {Œº : measure Œ±}
  [topological_space Œ≤] [has_zero Œ≤] :
  ae_strongly_measurable (0 : Œ± ‚Üí Œ≤) Œº :=
strongly_measurable_zero.ae_strongly_measurable

@[simp] lemma subsingleton.ae_strongly_measurable {m : measurable_space Œ±} [topological_space Œ≤]
  [subsingleton Œ≤] {Œº : measure Œ±} (f : Œ± ‚Üí Œ≤) :
  ae_strongly_measurable f Œº :=
(subsingleton.strongly_measurable f).ae_strongly_measurable

@[simp] lemma subsingleton.ae_strongly_measurable' {m : measurable_space Œ±} [topological_space Œ≤]
  [subsingleton Œ±] {Œº : measure Œ±} (f : Œ± ‚Üí Œ≤) :
  ae_strongly_measurable f Œº :=
(subsingleton.strongly_measurable' f).ae_strongly_measurable

@[simp, measurability] lemma ae_measurable_zero_measure [measurable_space Œ±] [topological_space Œ≤]
  (f : Œ± ‚Üí Œ≤) :
  ae_strongly_measurable f (0 : measure Œ±) :=
begin
  nontriviality Œ±, inhabit Œ±,
  exact ‚ü®Œª x, f default, strongly_measurable_const, rfl‚ü©
end

namespace ae_strongly_measurable

variables {m : measurable_space Œ±} {Œº : measure Œ±} [topological_space Œ≤] [topological_space Œ≥]
  {f g : Œ± ‚Üí Œ≤}

section mk

/-- A `strongly_measurable` function such that `f =·µê[Œº] hf.mk f`. See lemmas
`strongly_measurable_mk` and `ae_eq_mk`. -/
protected noncomputable def mk (f : Œ± ‚Üí Œ≤) (hf : ae_strongly_measurable f Œº) : Œ± ‚Üí Œ≤ := hf.some

lemma strongly_measurable_mk (hf : ae_strongly_measurable f Œº) :
  strongly_measurable (hf.mk f) :=
hf.some_spec.1

lemma measurable_mk [metrizable_space Œ≤] [measurable_space Œ≤] [borel_space Œ≤]
  (hf : ae_strongly_measurable f Œº) :
  measurable (hf.mk f) :=
hf.strongly_measurable_mk.measurable

lemma ae_eq_mk (hf : ae_strongly_measurable f Œº) : f =·µê[Œº] hf.mk f :=
hf.some_spec.2

protected lemma ae_measurable {Œ≤} [measurable_space Œ≤] [topological_space Œ≤] [metrizable_space Œ≤]
  [borel_space Œ≤] {f : Œ± ‚Üí Œ≤} (hf : ae_strongly_measurable f Œº) :
  ae_measurable f Œº :=
‚ü®hf.mk f, hf.strongly_measurable_mk.measurable, hf.ae_eq_mk‚ü©

end mk

lemma congr (hf : ae_strongly_measurable f Œº) (h : f =·µê[Œº] g) : ae_strongly_measurable g Œº :=
‚ü®hf.mk f, hf.strongly_measurable_mk, h.symm.trans hf.ae_eq_mk‚ü©

lemma _root_.ae_strongly_measurable_congr (h : f =·µê[Œº] g) :
  ae_strongly_measurable f Œº ‚Üî ae_strongly_measurable g Œº :=
‚ü®Œª hf, hf.congr h, Œª hg, hg.congr h.symm‚ü©

lemma mono_measure {ŒΩ : measure Œ±} (hf : ae_strongly_measurable f Œº) (h : ŒΩ ‚â§ Œº) :
  ae_strongly_measurable f ŒΩ :=
‚ü®hf.mk f, hf.strongly_measurable_mk, eventually.filter_mono (ae_mono h) hf.ae_eq_mk‚ü©

protected lemma mono' {ŒΩ : measure Œ±} (h : ae_strongly_measurable f Œº) (h' : ŒΩ ‚â™ Œº) :
  ae_strongly_measurable f ŒΩ :=
‚ü®h.mk f, h.strongly_measurable_mk, h' h.ae_eq_mk‚ü©

protected lemma restrict (hfm : ae_strongly_measurable f Œº) {s} :
  ae_strongly_measurable f (Œº.restrict s) :=
hfm.mono_measure measure.restrict_le_self

/-- The composition of a continuous function and an ae strongly measurable function is ae strongly
measurable. -/
lemma _root_.continuous.comp_ae_strongly_measurable {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤}
  (hg : continuous g) (hf : ae_strongly_measurable f Œº) :
  ae_strongly_measurable (Œª x, g (f x)) Œº :=
‚ü®_, hg.comp_strongly_measurable hf.strongly_measurable_mk, eventually_eq.fun_comp hf.ae_eq_mk g‚ü©

/-- A continuous function to a second countable space is strongly measurable. -/
lemma _root_.continuous.ae_strongly_measurable [topological_space Œ±] [opens_measurable_space Œ±]
  [metrizable_space Œ≤] [second_countable_topology Œ≤]  (hf : continuous f) :
  ae_strongly_measurable f Œº :=
hf.strongly_measurable.ae_strongly_measurable

section arithmetic

@[to_additive]
protected lemma mul [has_mul Œ≤] [has_continuous_mul Œ≤]
  (hf : ae_strongly_measurable f Œº) (hg : ae_strongly_measurable g Œº) :
  ae_strongly_measurable (f * g) Œº :=
‚ü®hf.mk f * hg.mk g, hf.strongly_measurable_mk.mul hg.strongly_measurable_mk,
  hf.ae_eq_mk.mul hg.ae_eq_mk‚ü©

@[to_additive]
protected lemma inv [group Œ≤] [topological_group Œ≤] (hf : ae_strongly_measurable f Œº) :
  ae_strongly_measurable (f‚Åª¬π) Œº :=
‚ü®(hf.mk f)‚Åª¬π, hf.strongly_measurable_mk.inv, hf.ae_eq_mk.inv‚ü©

@[to_additive]
protected lemma div [group Œ≤] [topological_group Œ≤]
  (hf : ae_strongly_measurable f Œº) (hg : ae_strongly_measurable g Œº) :
  ae_strongly_measurable (f / g) Œº :=
‚ü®hf.mk f / hg.mk g, hf.strongly_measurable_mk.div hg.strongly_measurable_mk,
  hf.ae_eq_mk.div hg.ae_eq_mk‚ü©

protected lemma const_smul {ùïú} [has_scalar ùïú Œ≤] [has_continuous_const_smul ùïú Œ≤]
  (hf : ae_strongly_measurable f Œº) (c : ùïú) :
  ae_strongly_measurable (c ‚Ä¢ f) Œº :=
‚ü®c ‚Ä¢ hf.mk f, hf.strongly_measurable_mk.const_smul c, hf.ae_eq_mk.const_smul c‚ü©

protected lemma const_smul' {ùïú} [has_scalar ùïú Œ≤] [has_continuous_const_smul ùïú Œ≤]
  (hf : ae_strongly_measurable f Œº) (c : ùïú) :
  ae_strongly_measurable (Œª x, c ‚Ä¢ (f x)) Œº :=
hf.const_smul c

end arithmetic

section order

protected lemma sup [semilattice_sup Œ≤] [has_continuous_sup Œ≤]
  (hf : ae_strongly_measurable f Œº) (hg : ae_strongly_measurable g Œº) :
  ae_strongly_measurable (f ‚äî g) Œº :=
‚ü®hf.mk f ‚äî hg.mk g, hf.strongly_measurable_mk.sup hg.strongly_measurable_mk,
  hf.ae_eq_mk.sup hg.ae_eq_mk‚ü©

protected lemma inf [semilattice_inf Œ≤] [has_continuous_inf Œ≤]
  (hf : ae_strongly_measurable f Œº) (hg : ae_strongly_measurable g Œº) :
  ae_strongly_measurable (f ‚äì g) Œº :=
‚ü®hf.mk f ‚äì hg.mk g, hf.strongly_measurable_mk.inf hg.strongly_measurable_mk,
  hf.ae_eq_mk.inf hg.ae_eq_mk‚ü©

end order

protected lemma prod_mk {f : Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≥}
  (hf : ae_strongly_measurable f Œº) (hg : ae_strongly_measurable g Œº) :
  ae_strongly_measurable (Œª x, (f x, g x)) Œº :=
‚ü®Œª x, (hf.mk f x, hg.mk g x), hf.strongly_measurable_mk.prod_mk hg.strongly_measurable_mk,
  hf.ae_eq_mk.prod_mk hg.ae_eq_mk‚ü©

section second_countable_ae_strongly_measurable

variables [measurable_space Œ≤]

/-- In a space with second countable topology, measurable implies strongly measurable. -/
lemma _root_.ae_measurable.ae_strongly_measurable [metrizable_space Œ≤]
  [opens_measurable_space Œ≤] [second_countable_topology Œ≤] (hf : ae_measurable f Œº) :
  ae_strongly_measurable f Œº :=
‚ü®hf.mk f, hf.measurable_mk.strongly_measurable, hf.ae_eq_mk‚ü©

lemma _root_.ae_strongly_measurable_id {Œ± : Type*} [topological_space Œ±] [metrizable_space Œ±]
  {m : measurable_space Œ±} [opens_measurable_space Œ±] [second_countable_topology Œ±]
  {Œº : measure Œ±} :
  ae_strongly_measurable (id : Œ± ‚Üí Œ±) Œº :=
ae_measurable_id.ae_strongly_measurable

/-- In a space with second countable topology, strongly measurable and measurable are equivalent. -/
lemma ae_strongly_measurable_iff_ae_measurable [metrizable_space Œ≤] [borel_space Œ≤]
  [second_countable_topology Œ≤] :
  ae_strongly_measurable f Œº ‚Üî ae_measurable f Œº :=
‚ü®Œª h, h.ae_measurable, Œª h, h.ae_strongly_measurable‚ü©

end second_countable_ae_strongly_measurable

protected lemma norm {Œ≤ : Type*} [normed_group Œ≤] {f : Œ± ‚Üí Œ≤} (hf : ae_strongly_measurable f Œº) :
  ae_strongly_measurable (Œª x, ‚à•f x‚à•) Œº :=
continuous_norm.comp_ae_strongly_measurable hf

protected lemma nnnorm {Œ≤ : Type*} [normed_group Œ≤] {f : Œ± ‚Üí Œ≤} (hf : ae_strongly_measurable f Œº) :
  ae_strongly_measurable (Œª x, nnnorm (f x)) Œº :=
continuous_nnnorm.comp_ae_strongly_measurable hf

protected lemma ennnorm {Œ≤ : Type*} [normed_group Œ≤] {f : Œ± ‚Üí Œ≤} (hf : ae_strongly_measurable f Œº) :
  ae_measurable (Œª a, (nnnorm (f a) : ‚Ñù‚â•0‚àû)) Œº :=
(ennreal.continuous_coe.comp_ae_strongly_measurable hf.nnnorm).ae_measurable

protected lemma edist {Œ≤ : Type*} [normed_group Œ≤] {f g : Œ± ‚Üí Œ≤}
  (hf : ae_strongly_measurable f Œº) (hg : ae_strongly_measurable g Œº) :
  ae_measurable (Œª a, edist (f a) (g a)) Œº :=
(continuous_edist.comp_ae_strongly_measurable (hf.prod_mk hg)).ae_measurable

section
variables {ùïú : Type*} {E : Type*} [is_R_or_C ùïú] [inner_product_space ùïú E]
local notation `‚ü™`x`, `y`‚ü´` := @inner ùïú _ _ x y

protected lemma re {f : Œ± ‚Üí ùïú} (hf : ae_strongly_measurable f Œº) :
  ae_strongly_measurable (Œª x, is_R_or_C.re (f x)) Œº :=
is_R_or_C.continuous_re.comp_ae_strongly_measurable hf

protected lemma im {f : Œ± ‚Üí ùïú} (hf : ae_strongly_measurable f Œº) :
  ae_strongly_measurable (Œª x, is_R_or_C.im (f x)) Œº :=
is_R_or_C.continuous_im.comp_ae_strongly_measurable hf

protected lemma inner {m : measurable_space Œ±} {Œº : measure Œ±} {f g : Œ± ‚Üí E}
  (hf : ae_strongly_measurable f Œº) (hg : ae_strongly_measurable g Œº) :
  ae_strongly_measurable (Œª x, ‚ü™f x, g x‚ü´) Œº :=
begin
  refine ‚ü®Œª x, ‚ü™hf.mk f x, hg.mk g x‚ü´,
    hf.strongly_measurable_mk.inner hg.strongly_measurable_mk, _‚ü©,
  refine hf.ae_eq_mk.mp (hg.ae_eq_mk.mono (Œª x hxg hxf, _)),
  dsimp only,
  congr,
  exacts [hxf, hxg],
end

end

lemma _root_.ae_strongly_measurable_indicator_iff [has_zero Œ≤]
  {s : set Œ±} (hs : measurable_set s) :
  ae_strongly_measurable (indicator s f) Œº ‚Üî ae_strongly_measurable f (Œº.restrict s)  :=
begin
  split,
  { intro h,
    exact (h.mono_measure measure.restrict_le_self).congr (indicator_ae_eq_restrict hs) },
  { intro h,
    refine ‚ü®indicator s (h.mk f), h.strongly_measurable_mk.indicator hs, _‚ü©,
    have A : s.indicator f =·µê[Œº.restrict s] s.indicator (h.mk f) :=
      (indicator_ae_eq_restrict hs).trans (h.ae_eq_mk.trans $ (indicator_ae_eq_restrict hs).symm),
    have B : s.indicator f =·µê[Œº.restrict s·∂ú] s.indicator (h.mk f) :=
      (indicator_ae_eq_restrict_compl hs).trans (indicator_ae_eq_restrict_compl hs).symm,
    exact ae_of_ae_restrict_of_ae_restrict_compl _ A B },
end

protected lemma indicator [has_zero Œ≤]
  (hfm : ae_strongly_measurable f Œº) {s : set Œ±} (hs : measurable_set s) :
  ae_strongly_measurable (s.indicator f) Œº :=
(ae_strongly_measurable_indicator_iff hs).mpr hfm.restrict

lemma _root_.ae_strongly_measurable_of_ae_strongly_measurable_trim {Œ±} {m m0 : measurable_space Œ±}
  {Œº : measure Œ±} (hm : m ‚â§ m0) {f : Œ± ‚Üí Œ≤} (hf : ae_strongly_measurable f (Œº.trim hm)) :
  ae_strongly_measurable f Œº :=
‚ü®hf.mk f, strongly_measurable.mono hf.strongly_measurable_mk hm, ae_eq_of_ae_eq_trim hf.ae_eq_mk‚ü©

lemma comp_measurable {Œ≥ : Type*} {mŒ≥ : measurable_space Œ≥} {mŒ± : measurable_space Œ±} {f : Œ≥ ‚Üí Œ±}
  {Œº : measure Œ≥} (hg : ae_strongly_measurable g (measure.map f Œº)) (hf : measurable f) :
  ae_strongly_measurable (g ‚àò f) Œº :=
‚ü®(hg.mk g) ‚àò f, hg.strongly_measurable_mk.comp_measurable hf, ae_eq_comp hf hg.ae_eq_mk‚ü©

/-- A function is almost everywhere strongly measurable if and only if it is almost everywhere
measurable, and up to a zero measure set its range is contained in a separable set. -/
theorem _root_.ae_strongly_measurable_iff_ae_measurable_separable
  [metrizable_space Œ≤] [measurable_space Œ≤] [borel_space Œ≤] :
  ae_strongly_measurable f Œº ‚Üî
    (ae_measurable f Œº ‚àß ‚àÉ (t : set Œ≤), is_separable t ‚àß f ‚Åª¬π' t ‚àà Œº.ae) :=
begin
  letI : metric_space Œ≤ := metrizable_space_metric Œ≤,
  classical,
  split,
  { assume H,
    refine ‚ü®H.ae_measurable, _‚ü©,
    refine ‚ü®range (H.mk f), H.strongly_measurable_mk.is_separable_range, _‚ü©,
    filter_upwards [H.ae_eq_mk] with x hx,
    simp [hx] },
  { rintros ‚ü®H, ‚ü®t, t_sep, ht‚ü©‚ü©,
    rcases eq_empty_or_nonempty t with rfl|‚ü®‚ü®y‚ÇÄ, h‚ÇÄ‚ü©‚ü©,
    { simp only [preimage_empty] at ht,
      rcases is_empty_or_nonempty Œ± with hŒ±|‚ü®‚ü®x‚ÇÄ‚ü©‚ü©,
      { exactI (strongly_measurable_of_is_empty _).ae_strongly_measurable },
      { refine ‚ü®Œª x, f x‚ÇÄ, strongly_measurable_const, _‚ü©,
        filter_upwards [ht],
        simp only [mem_empty_eq, forall_false_left, implies_true_iff] } },
    { obtain ‚ü®g, g_meas, gt, fg‚ü© : ‚àÉ (g : Œ± ‚Üí Œ≤), measurable g ‚àß range g ‚äÜ t ‚àß f =·µê[Œº] g :=
        H.exists_ae_eq_range_subset ht h‚ÇÄ,
      refine ‚ü®g, _, fg‚ü©,
      exact strongly_measurable_iff_measurable_separable.2 ‚ü®g_meas, t_sep.mono gt‚ü© } }
end

lemma _root_.measurable_embedding.ae_strongly_measurable_map_iff
  {Œ≥ : Type*} {mŒ≥ : measurable_space Œ≥} {mŒ± : measurable_space Œ±}
  {f : Œ≥ ‚Üí Œ±} {Œº : measure Œ≥} (hf : measurable_embedding f) {g : Œ± ‚Üí Œ≤} :
  ae_strongly_measurable g (measure.map f Œº) ‚Üî ae_strongly_measurable (g ‚àò f) Œº :=
begin
  refine ‚ü®Œª H, H.comp_measurable hf.measurable, _‚ü©,
  rintro ‚ü®g‚ÇÅ, hgm‚ÇÅ, heq‚ü©,
  rcases hf.exists_strongly_measurable_extend hgm‚ÇÅ (Œª x, ‚ü®g x‚ü©) with ‚ü®g‚ÇÇ, hgm‚ÇÇ, rfl‚ü©,
  exact ‚ü®g‚ÇÇ, hgm‚ÇÇ, hf.ae_map_iff.2 heq‚ü©
end

lemma _root_.embedding.ae_strongly_measurable_comp_iff
  [metrizable_space Œ≤] [metrizable_space Œ≥]
  {g : Œ≤ ‚Üí Œ≥} {f : Œ± ‚Üí Œ≤} (hg : embedding g) :
  ae_strongly_measurable (Œª x, g (f x)) Œº ‚Üî ae_strongly_measurable f Œº :=
begin
  letI := metrizable_space_metric Œ≥,
  letI : measurable_space Œ≤ := borel Œ≤,
  haveI : borel_space Œ≤ := ‚ü®rfl‚ü©,
  letI : measurable_space Œ≥ := borel Œ≥,
  haveI : borel_space Œ≥ := ‚ü®rfl‚ü©,
  refine ‚ü®Œª H, ae_strongly_measurable_iff_ae_measurable_separable.2 ‚ü®_, _‚ü©,
    Œª H, hg.continuous.comp_ae_strongly_measurable H‚ü©,
  { let G : Œ≤ ‚Üí range g := cod_restrict g (range g) mem_range_self,
    have hG : closed_embedding G :=
    { closed_range :=
      begin
        convert is_closed_univ,
        apply eq_univ_of_forall,
        rintros ‚ü®-, ‚ü®x, rfl‚ü©‚ü©,
        exact mem_range_self x
      end,
      .. hg.cod_restrict _ _ },
    have : ae_measurable (G ‚àò f) Œº := ae_measurable.subtype_mk H.ae_measurable,
    exact hG.measurable_embedding.ae_measurable_comp_iff.1 this },
  { rcases (ae_strongly_measurable_iff_ae_measurable_separable.1 H).2 with ‚ü®t, ht, h't‚ü©,
    exact ‚ü®g‚Åª¬π' t, hg.is_separable_preimage ht, h't‚ü© }
end

/-- An almost everywhere sequential limit of almost everywhere strongly measurable functions is
almost everywhere strongly measurable. -/
lemma _root_.ae_strongly_measurable_of_tendsto_ae
  [metrizable_space Œ≤] (u : filter Œπ) [ne_bot u] [is_countably_generated u]
  {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} (hf : ‚àÄ i, ae_strongly_measurable (f i) Œº)
  (lim : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) u (ùìù (g x))) :
  ae_strongly_measurable g Œº :=
begin
  letI := metrizable_space_metric Œ≤,
  letI : measurable_space Œ≤ := borel Œ≤,
  haveI : borel_space Œ≤ := ‚ü®rfl‚ü©,
  refine ae_strongly_measurable_iff_ae_measurable_separable.2 ‚ü®_, _‚ü©,
  { exact ae_measurable_of_tendsto_metric_ae _ (Œª n, (hf n).ae_measurable) lim },
  { have : ‚àÄ (n : Œπ), ‚àÉ (t : set Œ≤), is_separable t ‚àß f n ‚Åª¬π' t ‚àà Œº.ae :=
      Œª n, (ae_strongly_measurable_iff_ae_measurable_separable.1 (hf n)).2,
    choose t t_sep ht using this,
    refine ‚ü®closure (‚ãÉ i, (t i)), (is_separable_Union (Œª i, (t_sep i))).closure, _‚ü©,
    filter_upwards [ae_all_iff.2 ht, lim] with x hx h'x,
    apply mem_closure_of_tendsto (h'x),
    apply eventually_of_forall (Œª n, _),
    apply mem_Union_of_mem n,
    exact hx n }
end

/-- If a sequence of almost everywhere strongly measurable functions converges almost everywhere,
one can select a strongly measurable function as the almost everywhere limit. -/
lemma _root_.exists_strongly_measurable_limit_of_tendsto_ae [metrizable_space Œ≤] {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤}
  (hf : ‚àÄ n, ae_strongly_measurable (f n) Œº)
  (h_ae_tendsto : ‚àÄ·µê x ‚àÇŒº, ‚àÉ l : Œ≤, tendsto (Œª n, f n x) at_top (ùìù l)) :
  ‚àÉ (f_lim : Œ± ‚Üí Œ≤) (hf_lim_meas : strongly_measurable f_lim),
    ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (f_lim x)) :=
begin
  letI : measurable_space Œ≤ := borel Œ≤,
  haveI : borel_space Œ≤ := ‚ü®rfl‚ü©,
  letI := metrizable_space_metric Œ≤,
  obtain ‚ü®g, g_meas, hg‚ü© : ‚àÉ (g : Œ± ‚Üí Œ≤) (g_meas : measurable g),
      ‚àÄ·µê x ‚àÇŒº, tendsto (Œª n, f n x) at_top (ùìù (g x)) :=
    measurable_limit_of_tendsto_metric_ae (Œª n, (hf n).ae_measurable) h_ae_tendsto,
  have Hg : ae_strongly_measurable g Œº := ae_strongly_measurable_of_tendsto_ae _ hf hg,
  refine ‚ü®Hg.mk g, Hg.strongly_measurable_mk, _‚ü©,
  filter_upwards [hg, Hg.ae_eq_mk] with x hx h'x,
  rwa h'x at hx,
end

lemma sum_measure [metrizable_space Œ≤]
  {m : measurable_space Œ±} {Œº : Œπ ‚Üí measure Œ±} (h : ‚àÄ i, ae_strongly_measurable f (Œº i)) :
  ae_strongly_measurable f (measure.sum Œº) :=
begin
  letI : measurable_space Œ≤ := borel Œ≤,
  haveI : borel_space Œ≤ := ‚ü®rfl‚ü©,
  refine ae_strongly_measurable_iff_ae_measurable_separable.2
    ‚ü®ae_measurable.sum_measure (Œª i, (h i).ae_measurable), _‚ü©,
  have A : ‚àÄ (i : Œπ), ‚àÉ (t : set Œ≤), is_separable t ‚àß f ‚Åª¬π' t ‚àà (Œº i).ae :=
    Œª i, (ae_strongly_measurable_iff_ae_measurable_separable.1 (h i)).2,
  choose t t_sep ht using A,
  refine ‚ü®(‚ãÉ i, t i), is_separable_Union t_sep, _‚ü©,
  simp only [preimage_Union, measure.ae_sum_eq, mem_supr],
  assume i,
  filter_upwards [ht i] with x hx,
  exact mem_Union_of_mem i hx,
end

@[simp] lemma _root_.ae_strongly_measurable_sum_measure_iff
  [metrizable_space Œ≤] {m : measurable_space Œ±} {Œº : Œπ ‚Üí measure Œ±} :
  ae_strongly_measurable f (sum Œº) ‚Üî ‚àÄ i, ae_strongly_measurable f (Œº i) :=
‚ü®Œª h i, h.mono_measure (measure.le_sum _ _), sum_measure‚ü©

@[simp] lemma _root_.ae_strongly_measurable_add_measure_iff [metrizable_space Œ≤] {ŒΩ : measure Œ±} :
  ae_strongly_measurable f (Œº + ŒΩ) ‚Üî ae_strongly_measurable f Œº ‚àß ae_strongly_measurable f ŒΩ :=
by { rw [‚Üê sum_cond, ae_strongly_measurable_sum_measure_iff, bool.forall_bool, and.comm], refl }

lemma add_measure [metrizable_space Œ≤] {ŒΩ : measure Œ±} {f : Œ± ‚Üí Œ≤}
  (hŒº : ae_strongly_measurable f Œº) (hŒΩ : ae_strongly_measurable f ŒΩ) :
  ae_strongly_measurable f (Œº + ŒΩ) :=
ae_strongly_measurable_add_measure_iff.2 ‚ü®hŒº, hŒΩ‚ü©

protected lemma Union [metrizable_space Œ≤] {s : Œπ ‚Üí set Œ±}
  (h : ‚àÄ i, ae_strongly_measurable f (Œº.restrict (s i))) :
  ae_strongly_measurable f (Œº.restrict (‚ãÉ i, s i)) :=
(sum_measure h).mono_measure $ restrict_Union_le

@[simp] lemma _root_.ae_strongly_measurable_Union_iff [metrizable_space Œ≤] {s : Œπ ‚Üí set Œ±} :
  ae_strongly_measurable f (Œº.restrict (‚ãÉ i, s i)) ‚Üî
    ‚àÄ i, ae_strongly_measurable f (Œº.restrict (s i)) :=
‚ü®Œª h i, h.mono_measure $ restrict_mono (subset_Union _ _) le_rfl, ae_strongly_measurable.Union‚ü©

@[simp] lemma _root_.ae_strongly_measurable_union_iff [metrizable_space Œ≤] {s t : set Œ±} :
  ae_strongly_measurable f (Œº.restrict (s ‚à™ t)) ‚Üî
    ae_strongly_measurable f (Œº.restrict s) ‚àß ae_strongly_measurable f (Œº.restrict t) :=
by simp only [union_eq_Union, ae_strongly_measurable_Union_iff, bool.forall_bool, cond, and.comm]

lemma smul_measure {R : Type*} [monoid R] [distrib_mul_action R ‚Ñù‚â•0‚àû]
  [is_scalar_tower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] (h : ae_strongly_measurable f Œº) (c : R) :
  ae_strongly_measurable f (c ‚Ä¢ Œº) :=
‚ü®h.mk f, h.strongly_measurable_mk, ae_smul_measure h.ae_eq_mk c‚ü©


section normed_space
variables {ùïú : Type*} [nondiscrete_normed_field ùïú] [complete_space ùïú]
variables {E : Type*} [normed_group E] [normed_space ùïú E]

lemma _root_.ae_strongly_measurable_smul_const_iff {f : Œ± ‚Üí ùïú} {c : E} (hc : c ‚â† 0) :
  ae_strongly_measurable (Œª x, f x ‚Ä¢ c) Œº ‚Üî ae_strongly_measurable f Œº :=
(closed_embedding_smul_left hc).to_embedding.ae_strongly_measurable_comp_iff

end normed_space


section mul_action

variables {G : Type*} [group G] [mul_action G Œ≤]
  [has_continuous_const_smul G Œ≤]

lemma _root_.strongly_measurable_const_smul_iff {m : measurable_space Œ±} (c : G) :
  strongly_measurable (Œª x, c ‚Ä¢ f x) ‚Üî strongly_measurable f :=
‚ü®Œª h, by simpa only [inv_smul_smul] using h.const_smul' c‚Åª¬π, Œª h, h.const_smul c‚ü©

lemma _root_.ae_strongly_measurable_const_smul_iff (c : G) :
  ae_strongly_measurable (Œª x, c ‚Ä¢ f x) Œº ‚Üî ae_strongly_measurable f Œº :=
‚ü®Œª h, by simpa only [inv_smul_smul] using h.const_smul' c‚Åª¬π, Œª h, h.const_smul c‚ü©

variables {G‚ÇÄ : Type*} [group_with_zero G‚ÇÄ] [mul_action G‚ÇÄ Œ≤]
  [has_continuous_const_smul G‚ÇÄ Œ≤]

lemma _root_.strongly_measurable_const_smul_iff‚ÇÄ {m : measurable_space Œ±} {c : G‚ÇÄ} (hc : c ‚â† 0) :
  strongly_measurable (Œª x, c ‚Ä¢ f x) ‚Üî strongly_measurable f :=
begin
  refine ‚ü®Œª h, _, Œª h, h.const_smul c‚ü©,
  convert h.const_smul' c‚Åª¬π,
  simp [smul_smul, inv_mul_cancel hc]
end

lemma _root_.ae_strongly_measurable_const_smul_iff‚ÇÄ {c : G‚ÇÄ} (hc : c ‚â† 0) :
  ae_strongly_measurable (Œª x, c ‚Ä¢ f x) Œº ‚Üî ae_strongly_measurable f Œº :=
begin
  refine ‚ü®Œª h, _, Œª h, h.const_smul c‚ü©,
  convert h.const_smul' c‚Åª¬π,
  simp [smul_smul, inv_mul_cancel hc]
end

end mul_action

section continuous_linear_map_nondiscrete_normed_field

variables {ùïú : Type*} [nondiscrete_normed_field ùïú]
variables {E : Type*} [normed_group E] [normed_space ùïú E]
variables {F : Type*} [normed_group F] [normed_space ùïú F]

lemma _root_.strongly_measurable.apply_continuous_linear_map
  {m : measurable_space Œ±} {œÜ : Œ± ‚Üí F ‚ÜíL[ùïú] E} (hœÜ : strongly_measurable œÜ) (v : F) :
  strongly_measurable (Œª a, œÜ a v) :=
(continuous_linear_map.apply ùïú E v).continuous.comp_strongly_measurable hœÜ

lemma apply_continuous_linear_map {œÜ : Œ± ‚Üí F ‚ÜíL[ùïú] E}
  (hœÜ : ae_strongly_measurable œÜ Œº) (v : F) : ae_strongly_measurable (Œª a, œÜ a v) Œº :=
(continuous_linear_map.apply ùïú E v).continuous.comp_ae_strongly_measurable hœÜ

end continuous_linear_map_nondiscrete_normed_field

lemma _root_.ae_strongly_measurable_with_density_iff {E : Type*} [normed_group E] [normed_space ‚Ñù E]
  {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : measurable f) {g : Œ± ‚Üí E} :
  ae_strongly_measurable g (Œº.with_density (Œª x, (f x : ‚Ñù‚â•0‚àû))) ‚Üî
    ae_strongly_measurable (Œª x, (f x : ‚Ñù) ‚Ä¢ g x) Œº :=
begin
  split,
  { rintros ‚ü®g', g'meas, hg'‚ü©,
    have A : measurable_set {x : Œ± | f x ‚â† 0} := (hf (measurable_set_singleton 0)).compl,
    refine ‚ü®Œª x, (f x : ‚Ñù) ‚Ä¢ g' x, hf.coe_nnreal_real.strongly_measurable.smul g'meas, _‚ü©,
    apply @ae_of_ae_restrict_of_ae_restrict_compl _ _ _ {x | f x ‚â† 0},
    { rw [eventually_eq, ae_with_density_iff hf.coe_nnreal_ennreal] at hg',
      rw ae_restrict_iff' A,
      filter_upwards [hg'],
      assume a ha h'a,
      have : (f a : ‚Ñù‚â•0‚àû) ‚â† 0, by simpa only [ne.def, ennreal.coe_eq_zero] using h'a,
      rw ha this },
    { filter_upwards [ae_restrict_mem A.compl],
      assume x hx,
      simp only [not_not, mem_set_of_eq, mem_compl_eq] at hx,
      simp [hx] } },
  { rintros ‚ü®g', g'meas, hg'‚ü©,
    refine ‚ü®Œª x, (f x : ‚Ñù)‚Åª¬π ‚Ä¢ g' x, hf.coe_nnreal_real.inv.strongly_measurable.smul g'meas, _‚ü©,
    rw [eventually_eq, ae_with_density_iff hf.coe_nnreal_ennreal],
    filter_upwards [hg'],
    assume x hx h'x,
    rw [‚Üê hx, smul_smul, _root_.inv_mul_cancel, one_smul],
    simp only [ne.def, ennreal.coe_eq_zero] at h'x,
    simpa only [nnreal.coe_eq_zero, ne.def] using h'x }
end

end ae_strongly_measurable

/-! ### Almost everywhere finitely strongly measurable functions -/

namespace ae_fin_strongly_measurable

variables {m : measurable_space Œ±} {Œº : measure Œ±} [topological_space Œ≤]
  {f g : Œ± ‚Üí Œ≤}

section mk
variables [has_zero Œ≤]

/-- A `fin_strongly_measurable` function such that `f =·µê[Œº] hf.mk f`. See lemmas
`fin_strongly_measurable_mk` and `ae_eq_mk`. -/
protected noncomputable def mk (f : Œ± ‚Üí Œ≤) (hf : ae_fin_strongly_measurable f Œº) : Œ± ‚Üí Œ≤ := hf.some

lemma fin_strongly_measurable_mk (hf : ae_fin_strongly_measurable f Œº) :
  fin_strongly_measurable (hf.mk f) Œº :=
hf.some_spec.1

lemma ae_eq_mk (hf : ae_fin_strongly_measurable f Œº) : f =·µê[Œº] hf.mk f :=
hf.some_spec.2

protected lemma ae_measurable {Œ≤} [has_zero Œ≤] [measurable_space Œ≤] [topological_space Œ≤]
  [metrizable_space Œ≤] [borel_space Œ≤]
  {f : Œ± ‚Üí Œ≤} (hf : ae_fin_strongly_measurable f Œº) :
  ae_measurable f Œº :=
‚ü®hf.mk f, hf.fin_strongly_measurable_mk.measurable, hf.ae_eq_mk‚ü©

end mk

section arithmetic

protected lemma mul [monoid_with_zero Œ≤] [has_continuous_mul Œ≤]
  (hf : ae_fin_strongly_measurable f Œº) (hg : ae_fin_strongly_measurable g Œº) :
  ae_fin_strongly_measurable (f * g) Œº :=
‚ü®hf.mk f * hg.mk g, hf.fin_strongly_measurable_mk.mul hg.fin_strongly_measurable_mk,
  hf.ae_eq_mk.mul hg.ae_eq_mk‚ü©

protected lemma add [add_monoid Œ≤] [has_continuous_add Œ≤]
  (hf : ae_fin_strongly_measurable f Œº) (hg : ae_fin_strongly_measurable g Œº) :
  ae_fin_strongly_measurable (f + g) Œº :=
‚ü®hf.mk f + hg.mk g, hf.fin_strongly_measurable_mk.add hg.fin_strongly_measurable_mk,
  hf.ae_eq_mk.add hg.ae_eq_mk‚ü©

protected lemma neg [add_group Œ≤] [topological_add_group Œ≤] (hf : ae_fin_strongly_measurable f Œº) :
  ae_fin_strongly_measurable (-f) Œº :=
‚ü®-hf.mk f, hf.fin_strongly_measurable_mk.neg, hf.ae_eq_mk.neg‚ü©

protected lemma sub [add_group Œ≤] [has_continuous_sub Œ≤]
  (hf : ae_fin_strongly_measurable f Œº) (hg : ae_fin_strongly_measurable g Œº) :
  ae_fin_strongly_measurable (f - g) Œº :=
‚ü®hf.mk f - hg.mk g, hf.fin_strongly_measurable_mk.sub hg.fin_strongly_measurable_mk,
  hf.ae_eq_mk.sub hg.ae_eq_mk‚ü©

protected lemma const_smul {ùïú} [topological_space ùïú] [add_monoid Œ≤] [monoid ùïú]
  [distrib_mul_action ùïú Œ≤] [has_continuous_smul ùïú Œ≤]
  (hf : ae_fin_strongly_measurable f Œº) (c : ùïú) :
  ae_fin_strongly_measurable (c ‚Ä¢ f) Œº :=
‚ü®c ‚Ä¢ hf.mk f, hf.fin_strongly_measurable_mk.const_smul c, hf.ae_eq_mk.const_smul c‚ü©

end arithmetic

section order
variables [has_zero Œ≤]

protected lemma sup [semilattice_sup Œ≤] [has_continuous_sup Œ≤]
  (hf : ae_fin_strongly_measurable f Œº) (hg : ae_fin_strongly_measurable g Œº) :
  ae_fin_strongly_measurable (f ‚äî g) Œº :=
‚ü®hf.mk f ‚äî hg.mk g, hf.fin_strongly_measurable_mk.sup hg.fin_strongly_measurable_mk,
  hf.ae_eq_mk.sup hg.ae_eq_mk‚ü©

protected lemma inf [semilattice_inf Œ≤] [has_continuous_inf Œ≤]
  (hf : ae_fin_strongly_measurable f Œº) (hg : ae_fin_strongly_measurable g Œº) :
  ae_fin_strongly_measurable (f ‚äì g) Œº :=
‚ü®hf.mk f ‚äì hg.mk g, hf.fin_strongly_measurable_mk.inf hg.fin_strongly_measurable_mk,
  hf.ae_eq_mk.inf hg.ae_eq_mk‚ü©

end order

variables [has_zero Œ≤] [t2_space Œ≤]

lemma exists_set_sigma_finite (hf : ae_fin_strongly_measurable f Œº) :
  ‚àÉ t, measurable_set t ‚àß f =·µê[Œº.restrict t·∂ú] 0 ‚àß sigma_finite (Œº.restrict t) :=
begin
  rcases hf with ‚ü®g, hg, hfg‚ü©,
  obtain ‚ü®t, ht, hgt_zero, htŒº‚ü© := hg.exists_set_sigma_finite,
  refine ‚ü®t, ht, _, htŒº‚ü©,
  refine eventually_eq.trans (ae_restrict_of_ae hfg) _,
  rw [eventually_eq, ae_restrict_iff' ht.compl],
  exact eventually_of_forall hgt_zero,
end

/-- A measurable set `t` such that `f =·µê[Œº.restrict t·∂ú] 0` and `sigma_finite (Œº.restrict t)`. -/
def sigma_finite_set (hf : ae_fin_strongly_measurable f Œº) : set Œ± :=
hf.exists_set_sigma_finite.some

protected lemma measurable_set (hf : ae_fin_strongly_measurable f Œº) :
  measurable_set hf.sigma_finite_set :=
hf.exists_set_sigma_finite.some_spec.1

lemma ae_eq_zero_compl (hf : ae_fin_strongly_measurable f Œº) :
  f =·µê[Œº.restrict hf.sigma_finite_set·∂ú] 0 :=
hf.exists_set_sigma_finite.some_spec.2.1

instance sigma_finite_restrict (hf : ae_fin_strongly_measurable f Œº) :
  sigma_finite (Œº.restrict hf.sigma_finite_set) :=
hf.exists_set_sigma_finite.some_spec.2.2

end ae_fin_strongly_measurable

lemma measurable_uncurry_of_continuous_of_measurable {Œ± Œ≤ Œπ : Type*} [topological_space Œπ]
  [metrizable_space Œπ] [measurable_space Œπ] [second_countable_topology Œπ] [opens_measurable_space Œπ]
  {mŒ≤ : measurable_space Œ≤} [metric_space Œ≤] [borel_space Œ≤]
  {m : measurable_space Œ±} {u : Œπ ‚Üí Œ± ‚Üí Œ≤}
  (hu_cont : ‚àÄ x, continuous (Œª i, u i x)) (h : ‚àÄ i, measurable (u i)) :
  measurable (function.uncurry u) :=
begin
  obtain ‚ü®t_sf, ht_sf‚ü© : ‚àÉ t : ‚Ñï ‚Üí simple_func Œπ Œπ, ‚àÄ j x,
    tendsto (Œª n, u (t n j) x) at_top (ùìù $ u j x),
  { have h_str_meas : strongly_measurable (id : Œπ ‚Üí Œπ), from strongly_measurable_id,
    refine ‚ü®h_str_meas.approx, Œª j x, _‚ü©,
    exact ((hu_cont x).tendsto j).comp (h_str_meas.tendsto_approx j), },
  let U := Œª (n : ‚Ñï) (p : Œπ √ó Œ±), u (t_sf n p.fst) p.snd,
  have h_tendsto : tendsto U at_top (ùìù (Œª p, u p.fst p.snd)),
  { rw tendsto_pi_nhds,
    exact Œª p, ht_sf p.fst p.snd, },
  refine measurable_of_tendsto_metric (Œª n, _) h_tendsto,
  have h_meas : measurable (Œª (p : (t_sf n).range √ó Œ±), u ‚Üëp.fst p.snd),
  { have : (Œª (p : ‚Ü•((t_sf n).range) √ó Œ±), u ‚Üë(p.fst) p.snd)
        = (Œª (p : Œ± √ó ((t_sf n).range)), u ‚Üë(p.snd) p.fst) ‚àò prod.swap,
      by refl,
    rw [this, @measurable_swap_iff Œ± ‚Ü•((t_sf n).range) Œ≤ m],
    haveI : encodable (t_sf n).range, from fintype.encodable ‚Ü•(t_sf n).range,
    exact measurable_from_prod_encodable (Œª j, h j), },
  have : (Œª p : Œπ √ó Œ±, u (t_sf n p.fst) p.snd)
    = (Œª p : ‚Ü•(t_sf n).range √ó Œ±, u p.fst p.snd)
      ‚àò (Œª p : Œπ √ó Œ±, (‚ü®t_sf n p.fst, simple_func.mem_range_self _ _‚ü©, p.snd)),
  { refl, },
  simp_rw [U, this],
  refine h_meas.comp (measurable.prod_mk _ measurable_snd),
  exact ((t_sf n).measurable.comp measurable_fst).subtype_mk,
end

end measure_theory
