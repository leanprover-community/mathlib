/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import measure_theory.covering.vitali
import measure_theory.covering.differentiation
import analysis.special_functions.log.base

/-!
# Doubling measures and Lebesgue's density theorem

A doubling measure `Œº` on a metric space is a measure for which there exists a constant `C` such
that for all sufficiently small radii `Œµ`, and for any centre, the measure of a ball of radius
`2 * Œµ` is bounded by `C` times the measure of the concentric ball of radius `Œµ`.

Lebesgue's density theorem states that given a set `S` in a proper metric space with locally-finite
doubling measure `Œº` then for almost all points `x` in `S`, for any sequence of closed balls
`B‚ÇÄ, B‚ÇÅ, B‚ÇÇ, ...` containing `x`, the limit `Œº (S ‚à© B‚±º) / Œº (B‚±º) ‚Üí 1` as `j ‚Üí ‚àû`.

In this file we combine general results about existence of Vitali families for doubling measures
with results about differentiation along a Vitali family to obtain an explicit form of Lebesgue's
density theorem.

## Main results

  * `is_doubling_measure`: the definition of a doubling measure (as a typeclass).
  * `is_doubling_measure.doubling_constant`: a function yielding the doubling constant `C` appearing
  in the definition of a doubling measure.
  * `is_doubling_measure.ae_tendsto_measure_inter_div`: a version of Lebesgue's density theorem for
  sequences of balls converging on a point but whose centres are not required to be fixed.

-/

noncomputable theory

open set filter metric measure_theory
open_locale nnreal topological_space

/-- A measure `Œº` is said to be a doubling measure if there exists a constant `C` such that for
all sufficiently small radii `Œµ`, and for any centre, the measure of a ball of radius `2 * Œµ` is
bounded by `C` times the measure of the concentric ball of radius `Œµ`.

Note: it is important that this definition makes a demand only for sufficiently small `Œµ`. For
example we want hyperbolic space to carry the instance `is_doubling_measure volume` but volumes grow
exponentially in hyperbolic space. To be really explicit, consider the hyperbolic plane of
curvature -1, the area of a disc of radius `Œµ` is `A(Œµ) = 2œÄ(cosh(Œµ) - 1)` so `A(2Œµ)/A(Œµ) ~ exp(Œµ)`.
-/
class is_doubling_measure {Œ± : Type*} [metric_space Œ±] [measurable_space Œ±] (Œº : measure Œ±) :=
(exists_measure_closed_ball_le_mul [] :
  ‚àÉ (C : ‚Ñù‚â•0), ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (closed_ball x (2 * Œµ)) ‚â§ C * Œº (closed_ball x Œµ))

namespace is_doubling_measure

variables {Œ± : Type*} [metric_space Œ±] [measurable_space Œ±] (Œº : measure Œ±) [is_doubling_measure Œº]

/-- A doubling constant for a doubling measure. -/
def doubling_constant : ‚Ñù‚â•0 := classical.some $ exists_measure_closed_ball_le_mul Œº

lemma exists_measure_closed_ball_le_mul' :
  ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (closed_ball x (2 * Œµ)) ‚â§ (doubling_constant Œº) * Œº (closed_ball x Œµ) :=
classical.some_spec $ exists_measure_closed_ball_le_mul Œº

lemma exists_eventually_forall_measure_closed_ball_le_mul (K : ‚Ñù) :
  ‚àÉ (C : ‚Ñù‚â•0), ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x t (ht : t ‚â§ K),
    Œº (closed_ball x (t * Œµ)) ‚â§ C * Œº (closed_ball x Œµ) :=
begin
  let C := doubling_constant Œº,
  have hŒº : ‚àÄ (n : ‚Ñï), ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x,
    Œº (closed_ball x (2^n * Œµ)) ‚â§ ‚Üë(C^n) * Œº (closed_ball x Œµ),
  { intros n,
    induction n with n ih, { simp, },
    replace ih := eventually_nhds_within_pos_mul_left (two_pos : 0 < (2 : ‚Ñù)) ih,
    refine (ih.and (exists_measure_closed_ball_le_mul' Œº)).mono (Œª Œµ hŒµ x, _),
    calc Œº (closed_ball x (2^(n + 1) * Œµ))
          = Œº (closed_ball x (2^n * (2 * Œµ))) : by rw [pow_succ', mul_assoc]
      ... ‚â§ ‚Üë(C^n) * Œº (closed_ball x (2 * Œµ)) : hŒµ.1 x
      ... ‚â§ ‚Üë(C^n) * (C * Œº (closed_ball x Œµ)) : ennreal.mul_left_mono (hŒµ.2 x)
      ... = ‚Üë(C^(n + 1)) * Œº (closed_ball x Œµ) : by rw [‚Üê mul_assoc, pow_succ', ennreal.coe_mul], },
  rcases lt_or_le K 1 with hK | hK,
  { refine ‚ü®1, _‚ü©,
    simp only [ennreal.coe_one, one_mul],
    exact eventually_mem_nhds_within.mono (Œª Œµ hŒµ x t ht,
      measure_mono $ closed_ball_subset_closed_ball (by nlinarith [mem_Ioi.mp hŒµ])), },
  { refine ‚ü®C^‚åàreal.logb 2 K‚åâ‚Çä, ((hŒº ‚åàreal.logb 2 K‚åâ‚Çä).and eventually_mem_nhds_within).mono
      (Œª Œµ hŒµ x t ht, le_trans (measure_mono $ closed_ball_subset_closed_ball _) (hŒµ.1 x))‚ü©,
    refine mul_le_mul_of_nonneg_right (ht.trans _) (mem_Ioi.mp hŒµ.2).le,
    conv_lhs { rw ‚Üê real.rpow_logb two_pos (by norm_num) (by linarith : 0 < K), },
    rw ‚Üê real.rpow_nat_cast,
    exact real.rpow_le_rpow_of_exponent_le one_le_two (nat.le_ceil (real.logb 2 K)), },
end

variables [proper_space Œ±] [borel_space Œ±] [is_locally_finite_measure Œº]

/-- A Vitali family in space with doubling measure with a covering proportion controlled by `K`. -/
def vitali_family (K : ‚Ñù) (hK : 6 ‚â§ K) : vitali_family Œº :=
vitali.vitali_family Œº
  (classical.some (exists_eventually_forall_measure_closed_ball_le_mul Œº K)) $ Œª x Œµ hŒµ,
begin
  have h := classical.some_spec (exists_eventually_forall_measure_closed_ball_le_mul Œº K),
  replace h := forall_eventually_of_eventually_forall (forall_eventually_of_eventually_forall h x),
  replace h := (eventually_imp_distrib_left.mp (h 6) hK),
  simpa only [exists_prop] using ((eventually_nhds_within_pos_mem_Ioc hŒµ).and h).exists,
end

/-- A version of *Lebesgue's density theorem* for a sequence of closed balls whose centres are
not required to be fixed.

See also `besicovitch.ae_tendsto_measure_inter_div`. -/
lemma ae_tendsto_measure_inter_div (S : set Œ±) (K : ‚Ñù) (hK : K ‚àà unit_interval) :
  ‚àÄ·µê x ‚àÇŒº.restrict S, ‚àÄ {Œπ : Type*} {l : filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí ‚Ñù)
    (Œ¥lim : tendsto Œ¥ l (ùìù[>] 0))
    (xmem : ‚àÄ·∂† j in l, x ‚àà closed_ball (w j) (K * Œ¥ j)),
    tendsto (Œª j, Œº (S ‚à© closed_ball (w j) (Œ¥ j)) / Œº (closed_ball (w j) (Œ¥ j))) l (ùìù 1) :=
begin
  let v := is_doubling_measure.vitali_family Œº 7 (by norm_num),
  filter_upwards [v.ae_tendsto_measure_inter_div S] with x hx Œπ l w Œ¥ Œ¥lim xmem,
  suffices : tendsto (Œª j, closed_ball (w j) (Œ¥ j)) l (v.filter_at x), { exact hx.comp this, },
  refine v.tendsto_filter_at_iff.mpr ‚ü®_, Œª Œµ hŒµ, _‚ü©,
  { simp only [v, vitali.vitali_family],
    have Œ¥pos : ‚àÄ·∂† j in l, 0 < Œ¥ j := eventually_mem_of_tendsto_nhds_within Œ¥lim,
    replace xmem : ‚àÄ·∂† (j : Œπ) in l, x ‚àà closed_ball (w j) (Œ¥ j) := (Œ¥pos.and xmem).mono
      (Œª j hj, closed_ball_subset_closed_ball (by nlinarith [hj.1, hK.2]) hj.2),
    apply ((Œ¥lim.eventually (classical.some_spec
      (exists_eventually_forall_measure_closed_ball_le_mul Œº 7))).and (xmem.and Œ¥pos)).mono,
    rintros j ‚ü®hjC, hjx, hjŒ¥‚ü©,
    have hdiam : 3 * diam (closed_ball (w j) (Œ¥ j)) ‚â§ 6 * Œ¥ j,
    { linarith [@diam_closed_ball _ _ (w j) _ hjŒ¥.le], },
    refine ‚ü®hjx, is_closed_ball, (nonempty_ball.mpr hjŒ¥).mono ball_subset_interior_closed_ball,
      (measure_mono (closed_ball_subset_closed_ball hdiam)).trans _‚ü©,
    suffices : closed_ball x (6 * Œ¥ j) ‚äÜ closed_ball (w j) (7 * Œ¥ j),
    { exact (measure_mono this).trans ((hjC (w j) 7 (by norm_num)).trans $ le_refl _), },
    intros y hy,
    simp only [mem_closed_ball] at hjx hy ‚ä¢,
    rw dist_comm at hjx,
    linarith [dist_triangle_right y (w j) x], },
  { have Œ¥pos := eventually_mem_of_tendsto_nhds_within Œ¥lim,
    replace Œ¥lim := tendsto_nhds_of_tendsto_nhds_within Œ¥lim,
    replace hK : 0 < K + 1 := by linarith [hK.1],
    apply (((metric.tendsto_nhds.mp Œ¥lim _ (div_pos hŒµ hK)).and Œ¥pos).and xmem).mono,
    rintros j ‚ü®‚ü®hjŒµ, hj‚ÇÄ : 0 < Œ¥ j‚ü©, hx‚ü© y hy,
    replace hjŒµ : (K + 1) * Œ¥ j < Œµ :=
      by simpa [abs_eq_self.mpr hj‚ÇÄ.le] using (lt_div_iff' hK).mp hjŒµ,
    simp only [mem_closed_ball] at hx hy ‚ä¢,
    linarith [dist_triangle_right y x (w j)], },
end

end is_doubling_measure
