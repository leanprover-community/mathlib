/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import measure_theory.covering.density_theorem

/-!
# Liminf, limsup, and doubling measures.

This file is a place to collect lemmas about liminf and limsup for subsets of a metric space
carrying a doubling measure.

## Main results:

 * `blimsup_cthickening_mul_ae_eq`: the limsup of the closed thickening of a sequence of compact
   subsets is unchanged if the sequence of distances is multiplied by a positive scale factor.

-/

open set filter metric measure_theory
open_locale nnreal ennreal topological_space

variables {Œ± : Type*} [metric_space Œ±] [proper_space Œ±] [measurable_space Œ±] [borel_space Œ±]
variables (Œº : measure Œ±) [is_locally_finite_measure Œº] [is_doubling_measure Œº]

/-- This is really an auxiliary result en route to `blimsup_cthickening_mul_ae_eq`.

NB: The `set : Œ±` type ascription is present because of issue #16932 on GitHub. -/
lemma blimsup_cthickening_ae_le_of_eventually_mul_le
  (p : ‚Ñï ‚Üí Prop) {s : ‚Ñï ‚Üí set Œ±} (hs : ‚àÄ i, is_compact (s i)) {M : ‚Ñù} (hM : 0 < M)
  {r‚ÇÅ r‚ÇÇ : ‚Ñï ‚Üí ‚Ñù} (hr : tendsto r‚ÇÅ at_top (ùìù[>] 0)) (hMr : ‚àÄ·∂† i in at_top, M * r‚ÇÅ i ‚â§ r‚ÇÇ i) :
  (blimsup (Œª i, cthickening (r‚ÇÅ i) (s i)) at_top p : set Œ±) ‚â§·µê[Œº]
  (blimsup (Œª i, cthickening (r‚ÇÇ i) (s i)) at_top p : set Œ±) :=
begin
  /- Sketch of proof:

  Assume that `p` is identically true for simplicity. We may also assume that `M < 1` and `0 ‚â§ r‚ÇÅ`.
  Let `Y‚ÇÅ i = cthickening (r‚ÇÅ i) (s i)`, define `Y‚ÇÇ` similarly except using `r‚ÇÇ`, and let
  `(Z i) = ‚ãÉ_{j ‚â• i} (Y‚ÇÇ j)`. Our goal is equivalent to showing that `Œº ((limsup Y‚ÇÅ) \ (Z i)) = 0`
  for all `i`.

  Assume for contradiction that `Œº ((limsup Y‚ÇÅ) \ (Z i)) ‚â† 0` for some `i` and let
  `W = (limsup Y‚ÇÅ) \ (Z i)`. Apply Lebesgue's density theorem to obtain a point `d` in `W` of
  positive density. Since `d ‚àà limsup Y‚ÇÅ`, there is a subsequence of `j ‚Ü¶ Y‚ÇÅ j`, indexed by
  `f 0 < f 1 < ...`, such that `d ‚àà Y‚ÇÅ (f j)` for all `j`. For each `j`, we may thus choose
  `w j ‚àà s (f j)` such that `d ‚àà B j`, where `B j = closed_ball (w j) (r‚ÇÅ (f j))`. Note that
  since `d` has positive density `Œº (W ‚à© (B j)) / Œº (B j) ‚Üí 1`.

  We obtain our contradiction by showing that there exists `Œ∑ < 1` such that
  `Œº (W ‚à© (B j)) / Œº (B j) ‚â§ Œ∑` for sufficiently large `j`. In fact we claim that `Œ∑ = 1 - C‚Åª¬π`
  is such a value where `C` is the scaling constant of `M‚Åª¬π` for the doubling measure `Œº`.

  To prove the claim, let `b j = closed_ball (w j) (M * r‚ÇÅ (f j))` and for given `j` consider the
  sets `b j` and `W ‚à© (B j)`. These are both subsets of `B j` and are disjoint for large enough `j`
  since `M * r‚ÇÅ j ‚â§ r‚ÇÇ j` and thus `b j ‚äÜ Z i ‚äÜ W·∂ú`. We thus have:
  `Œº (b j) + Œº (W ‚à© (B j)) ‚â§ Œº (B j)`. Combining this with `Œº (B j) ‚â§ C * Œº (b j)` we obtain
  the required inequality. -/
  suffices : ‚àÄ {r‚ÇÅ r‚ÇÇ : ‚Ñï ‚Üí ‚Ñù} (hr : tendsto r‚ÇÅ at_top (ùìù[>] 0)) (hrp : 0 ‚â§ r‚ÇÅ)
    {M : ‚Ñù} (hM : 0 < M) (hM' : M < 1) (hMr : ‚àÄ·∂† i in at_top, M * r‚ÇÅ i ‚â§ r‚ÇÇ i),
    (blimsup (Œª i, cthickening (r‚ÇÅ i) (s i)) at_top p : set Œ±) ‚â§·µê[Œº]
    (blimsup (Œª i, cthickening (r‚ÇÇ i) (s i)) at_top p : set Œ±),
  { let R‚ÇÅ := Œª i, max 0 (r‚ÇÅ i),
    let R‚ÇÇ := Œª i, max 0 (r‚ÇÇ i),
    have hRp : 0 ‚â§ R‚ÇÅ := Œª i, le_max_left 0 (r‚ÇÅ i),
    replace hMr : ‚àÄ·∂† i in at_top, M * R‚ÇÅ i ‚â§ R‚ÇÇ i,
    { refine hMr.mono (Œª i hi, _),
      rw [mul_max_of_nonneg _ _ hM.le, mul_zero],
      exact max_le_max (le_refl 0) hi, },
    simp_rw [‚Üê cthickening_max_zero (r‚ÇÅ _), ‚Üê cthickening_max_zero (r‚ÇÇ _)],
    cases le_or_lt 1 M with hM' hM',
    { apply has_subset.subset.eventually_le,
      change _ ‚â§ _,
      refine mono_blimsup' (hMr.mono $ Œª i hi, cthickening_mono _ (s i)),
      exact (le_mul_of_one_le_left (hRp i) hM').trans hi, },
    { exact this (tendsto_nhds_max_right hr) hRp hM hM' hMr, }, },
  clear hr hMr r‚ÇÅ r‚ÇÇ hM M,
  intros,
  set Y‚ÇÅ : ‚Ñï ‚Üí set Œ± := Œª i, cthickening (r‚ÇÅ i) (s i),
  set Y‚ÇÇ : ‚Ñï ‚Üí set Œ± := Œª i, cthickening (r‚ÇÇ i) (s i),
  let Z : ‚Ñï ‚Üí set Œ± := Œª i, ‚ãÉ j (h : p j ‚àß i ‚â§ j), Y‚ÇÇ j,
  suffices : ‚àÄ i, Œº (at_top.blimsup Y‚ÇÅ p \ Z i) = 0,
  { rwa [ae_le_set, @blimsup_eq_infi_bsupr_of_nat _ _ _ Y‚ÇÇ, infi_eq_Inter, diff_Inter,
      measure_Union_null_iff], },
  intros,
  set W := at_top.blimsup Y‚ÇÅ p \ Z i,
  by_contra contra,
  obtain ‚ü®d, hd, hd'‚ü© : ‚àÉ d, d ‚àà W ‚àß ‚àÄ {Œπ : Type*} {l : filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí ‚Ñù),
    tendsto Œ¥ l (ùìù[>] 0) ‚Üí (‚àÄ·∂† j in l, d ‚àà closed_ball (w j) (1 * Œ¥ j)) ‚Üí
    tendsto (Œª j, Œº (W ‚à© closed_ball (w j) (Œ¥ j)) / Œº (closed_ball (w j) (Œ¥ j))) l (ùìù 1) :=
    measure.exists_mem_of_measure_ne_zero_of_ae contra
      (is_doubling_measure.ae_tendsto_measure_inter_div Œº W 1),
  replace hd : d ‚àà blimsup Y‚ÇÅ at_top p := ((mem_diff _).mp hd).1,
  obtain ‚ü®f : ‚Ñï ‚Üí ‚Ñï, hf‚ü© := exists_forall_mem_of_has_basis_mem_blimsup' at_top_basis hd,
  simp only [forall_and_distrib] at hf,
  obtain ‚ü®hf‚ÇÄ : ‚àÄ j, d ‚àà cthickening (r‚ÇÅ (f j)) (s (f j)), hf‚ÇÅ, hf‚ÇÇ : ‚àÄ j, j ‚â§ f j‚ü© := hf,
  have hf‚ÇÉ : tendsto f at_top at_top :=
    tendsto_at_top_at_top.mpr (Œª j, ‚ü®f j, Œª i hi, (hf‚ÇÇ j).trans (hi.trans $ hf‚ÇÇ i)‚ü©),
  replace hr : tendsto (r‚ÇÅ ‚àò f) at_top (ùìù[>] 0) := hr.comp hf‚ÇÉ,
  replace hMr : ‚àÄ·∂† j in at_top, M * r‚ÇÅ (f j) ‚â§ r‚ÇÇ (f j) := hf‚ÇÉ.eventually hMr,
  replace hf‚ÇÄ : ‚àÄ j, ‚àÉ (w ‚àà s (f j)), d ‚àà closed_ball w (r‚ÇÅ (f j)) := Œª j,
    by simpa only [(hs (f j)).cthickening_eq_bUnion_closed_ball (hrp (f j)), mem_Union] using hf‚ÇÄ j,
  choose w hw hw' using hf‚ÇÄ,
  let C := is_doubling_measure.scaling_constant_of Œº M‚Åª¬π,
  have hC : 0 < C :=
    lt_of_lt_of_le zero_lt_one (is_doubling_measure.one_le_scaling_constant_of Œº M‚Åª¬π),
  suffices : ‚àÉ (Œ∑ < (1 : ‚Ñù‚â•0)), ‚àÄ·∂† j in at_top,
    Œº (W ‚à© closed_ball (w j) (r‚ÇÅ (f j))) / Œº (closed_ball (w j) (r‚ÇÅ (f j))) ‚â§ Œ∑,
  { obtain ‚ü®Œ∑, hŒ∑, hŒ∑'‚ü© := this,
    replace hŒ∑' : 1 ‚â§ Œ∑ := by simpa only [ennreal.one_le_coe_iff] using
      le_of_tendsto (hd' w (Œª j, r‚ÇÅ (f j)) hr $ eventually_of_forall (by simpa only [one_mul])) hŒ∑',
    exact (lt_self_iff_false _).mp (lt_of_lt_of_le hŒ∑ hŒ∑'), },
  refine ‚ü®1 - C‚Åª¬π, tsub_lt_self zero_lt_one (nnreal.inv_pos.mpr hC), _‚ü©,
  replace hC : C ‚â† 0 := ne_of_gt hC,
  let b : ‚Ñï ‚Üí set Œ± := Œª j, closed_ball (w j) (M * r‚ÇÅ (f j)),
  let B : ‚Ñï ‚Üí set Œ± := Œª j, closed_ball (w j) (r‚ÇÅ (f j)),
  have h‚ÇÅ : ‚àÄ j, b j ‚äÜ B j :=
    Œª j, closed_ball_subset_closed_ball (mul_le_of_le_one_left (hrp (f j)) hM'.le),
  have h‚ÇÇ : ‚àÄ j, W ‚à© B j ‚äÜ B j := Œª j, inter_subset_right W (B j),
  have h‚ÇÉ : ‚àÄ·∂† j in at_top, disjoint (b j) (W ‚à© B j),
  { apply hMr.mp,
    rw eventually_at_top,
    refine ‚ü®i, Œª j hj hj', disjoint.inf_right (B j) $ disjoint.inf_right' (blimsup Y‚ÇÅ at_top p) _‚ü©,
    change disjoint (b j) (Z i)·∂ú,
    rw disjoint_compl_right_iff_subset,
    refine (closed_ball_subset_cthickening (hw j) (M * r‚ÇÅ (f j))).trans
      ((cthickening_mono hj' _).trans (Œª a ha, _)),
    simp only [mem_Union, exists_prop],
    exact ‚ü®f j, ‚ü®hf‚ÇÅ j, hj.le.trans (hf‚ÇÇ j)‚ü©, ha‚ü©, },
  have h‚ÇÑ : ‚àÄ·∂† j in at_top, Œº (B j) ‚â§ C * Œº (b j) :=
    (hr.eventually (is_doubling_measure.eventually_measure_le_scaling_constant_mul'
      Œº M hM)).mono (Œª j hj, hj (w j)),
  refine (h‚ÇÉ.and h‚ÇÑ).mono (Œª j hj‚ÇÄ, ennreal.div_le_of_le_mul _),
  change Œº (W ‚à© B j) ‚â§ ‚Üë(1 - C‚Åª¬π) * Œº (B j),
  have hB : Œº (B j) ‚â† ‚àû := measure_closed_ball_lt_top.ne,
  rw [with_top.coe_sub, ennreal.coe_one, ennreal.sub_mul (Œª _ _, hB), one_mul],
  replace hB : ‚ÜëC‚Åª¬π * Œº (B j) ‚â† ‚àû,
  { refine ennreal.mul_ne_top _ hB,
    rwa [ennreal.coe_inv hC, ne.def, ennreal.inv_eq_top, ennreal.coe_eq_zero], },
  obtain ‚ü®hj‚ÇÅ : disjoint (b j) (W ‚à© B j), hj‚ÇÇ : Œº (B j) ‚â§ C * Œº (b j)‚ü© := hj‚ÇÄ,
  replace hj‚ÇÇ : ‚ÜëC‚Åª¬π * Œº (B j) ‚â§ Œº (b j),
  { rw [ennreal.coe_inv hC, ‚Üê ennreal.div_eq_inv_mul],
    exact ennreal.div_le_of_le_mul' hj‚ÇÇ, },
  have hj‚ÇÉ : ‚ÜëC‚Åª¬π * Œº (B j) + Œº (W ‚à© B j) ‚â§ Œº (B j),
  { refine le_trans (add_le_add_right hj‚ÇÇ _) _,
    rw ‚Üê measure_union' hj‚ÇÅ measurable_set_closed_ball,
    exact measure_mono (union_subset (h‚ÇÅ j) (h‚ÇÇ j)), },
  replace hj‚ÇÉ := tsub_le_tsub_right hj‚ÇÉ (‚ÜëC‚Åª¬π * Œº (B j)),
  rwa ennreal.add_sub_cancel_left hB at hj‚ÇÉ,
end

/-- This lemma is a generalisation of Lemma 9 appearing on page 217 of
[J.W.S. Cassels, *Some metrical theorems in Diophantine approximation. I*](cassels1950).

NB: The `set : Œ±` type ascription is present because of issue #16932 on GitHub. -/
lemma blimsup_cthickening_mul_ae_eq
  (p : ‚Ñï ‚Üí Prop) (s : ‚Ñï ‚Üí set Œ±) (hs : ‚àÄ i, is_compact (s i)) {M : ‚Ñù} (hM : 0 < M)
  (r : ‚Ñï ‚Üí ‚Ñù) (hr : tendsto r at_top (ùìù 0)) :
  (blimsup (Œª i, cthickening (M * r i) (s i)) at_top p : set Œ±) =·µê[Œº]
  (blimsup (Œª i, cthickening (r i) (s i)) at_top p : set Œ±) :=
begin
  have : ‚àÄ (p : ‚Ñï ‚Üí Prop) {r : ‚Ñï ‚Üí ‚Ñù} (hr : tendsto r at_top (ùìù[>] 0)),
    (blimsup (Œª i, cthickening (M * r i) (s i)) at_top p : set Œ±) =·µê[Œº]
    (blimsup (Œª i, cthickening (r i) (s i)) at_top p : set Œ±),
  { clear p hr r, intros p r hr,
    have hr' : tendsto (Œª i, M * r i) at_top (ùìù[>] 0),
    { convert tendsto_nhds_within_Ioi.const_mul hM hr; simp only [mul_zero], },
    refine eventually_le_antisymm_iff.mpr ‚ü®_, _‚ü©,
    { exact blimsup_cthickening_ae_le_of_eventually_mul_le Œº p hs (inv_pos.mpr hM) hr'
        (eventually_of_forall $ Œª i, by rw inv_mul_cancel_left‚ÇÄ hM.ne' (r i)), },
    { exact blimsup_cthickening_ae_le_of_eventually_mul_le Œº p hs hM hr
        (eventually_of_forall $ Œª i, le_refl _), }, },
  let r' : ‚Ñï ‚Üí ‚Ñù := Œª i, if 0 < r i then r i else 1/((i : ‚Ñù) + 1),
  have hr' : tendsto r' at_top (ùìù[>] 0),
  { refine tendsto_nhds_within_iff.mpr ‚ü®tendsto.if' hr tendsto_one_div_add_at_top_nhds_0_nat,
      eventually_of_forall $ Œª i, _‚ü©,
    by_cases hi : 0 < r i,
    { simp [hi, r'], },
    { simp only [hi, r', one_div, mem_Ioi, if_false, inv_pos], positivity, }, },
  have h‚ÇÄ : ‚àÄ i, (p i ‚àß 0 < r i) ‚Üí cthickening (r i) (s i) = cthickening (r' i) (s i),
  { rintros i ‚ü®-, hi‚ü©, congr, change r i = ite (0 < r i) (r i) _, simp [hi], },
  have h‚ÇÅ : ‚àÄ i, (p i ‚àß 0 < r i) ‚Üí cthickening (M * r i) (s i) = cthickening (M * r' i) (s i),
  { rintros i ‚ü®-, hi‚ü©, simp only [hi, mul_ite, if_true], },
  have h‚ÇÇ : ‚àÄ i, (p i ‚àß r i ‚â§ 0) ‚Üí cthickening (M * r i) (s i) = cthickening (r i) (s i),
  { rintros i ‚ü®-, hi‚ü©,
    have hi' : M * r i ‚â§ 0 := mul_nonpos_of_nonneg_of_nonpos hM.le hi,
    rw [cthickening_of_nonpos hi, cthickening_of_nonpos hi'], },
  have hp : p = Œª i, (p i ‚àß 0 < r i) ‚à® (p i ‚àß r i ‚â§ 0),
  { ext i, simp [‚Üê and_or_distrib_left, lt_or_le 0 (r i)], },
  rw [hp, blimsup_or_eq_sup, blimsup_or_eq_sup, sup_eq_union,
    blimsup_congr (eventually_of_forall h‚ÇÄ), blimsup_congr (eventually_of_forall h‚ÇÅ),
    blimsup_congr (eventually_of_forall h‚ÇÇ)],
  exact ae_eq_set_union (this (Œª i, p i ‚àß 0 < r i) hr') (ae_eq_refl _),
end
