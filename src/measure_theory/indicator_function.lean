/-
Copyright (c) 2020 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou
-/

import measure_theory.measure_space
import analysis.normed_space.basic

/-!
# Indicator function

`indicator (s : set Œ±) (f : Œ± ‚Üí Œ≤) (a : Œ±)` is `f x` if `x ‚àà s` and is `0` otherwise.

## Implementation note

In mathematics, an indicator function or a characteristic function is a function used to indicate
membership of an element in a set `s`, having the value `1` for all elements of `s` and the value  `0`
otherwise. But since it is usually used to restrict a function to a certain set `s`, we let the
indicator function take the value `f x` for some function `f`, instead of `1`. If the usual indicator
function is needed, just set `f` to be the constant function `Œªx, 1`.

## Tags
indicator, characteristic
-/

noncomputable theory
open_locale classical

open set measure_theory filter

universes u v
variables {Œ± : Type u} {Œ≤ : Type v}

section has_zero
variables [has_zero Œ≤] {s t : set Œ±} {f g : Œ± ‚Üí Œ≤} {a : Œ±}

/-- `indicator s f a` is `f a` if `a ‚àà s`, `0` otherwise.  -/
@[reducible]
def indicator (s : set Œ±) (f : Œ± ‚Üí Œ≤) : Œ± ‚Üí Œ≤ := Œª x, if x ‚àà s then f x else 0

@[simp] lemma indicator_of_mem (h : a ‚àà s) (f : Œ± ‚Üí Œ≤) : indicator s f a = f a := if_pos h

@[simp] lemma indicator_of_not_mem (h : a ‚àâ s) (f : Œ± ‚Üí Œ≤) : indicator s f a = 0 := if_neg h

lemma indicator_congr (h : ‚àÄ a ‚àà s, f a = g a) : indicator s f = indicator s g :=
funext $ Œªx, by { simp only [indicator], split_ifs, { exact h _ h_1 }, refl }

lemma indicator_congr_ae [measure_space Œ±] (h : ‚àÄ‚Çò a, a ‚àà s ‚Üí f a = g a) :
  ‚àÄ‚Çò a, indicator s f a = indicator s g a :=
begin
  filter_upwards [h],
  simp only [mem_set_of_eq, indicator],
  assume a ha,
  split_ifs,
  { exact ha h_1 },
  refl
end

lemma indicator_congr_of_set [measure_space Œ±] (h : ‚àÄ‚Çò a, a ‚àà s ‚Üî a ‚àà t) :
  ‚àÄ‚Çò a, indicator s f a = indicator t f a :=
begin
  filter_upwards [h],
  simp only [mem_set_of_eq, indicator],
  assume a ha,
  split_ifs,
  { refl },
  { have := ha.1 h_1, contradiction },
  { have := ha.2 h_2, contradiction },
  refl
end

@[simp] lemma indicator_univ (f : Œ± ‚Üí Œ≤) : indicator (univ : set Œ±) f = f :=
funext $ Œªx, indicator_of_mem (mem_univ _) f

@[simp] lemma indicator_empty (f : Œ± ‚Üí Œ≤) : indicator (‚àÖ : set Œ±) f = Œªa, 0 :=
funext $ Œªx, indicator_of_not_mem (not_mem_empty _) f

variable (Œ≤)
@[simp] lemma indicator_zero (s : set Œ±) : indicator s (Œªx, (0:Œ≤)) = Œªx, (0:Œ≤) :=
funext $ Œªx, by { simp only [indicator], split_ifs, refl, refl }
variable {Œ≤}

lemma indicator_indicator (s t : set Œ±) (f : Œ± ‚Üí Œ≤) : indicator s (indicator t f) = indicator (s ‚à© t) f :=
funext $ Œªx, by { simp only [indicator], split_ifs, repeat {simp * at * {contextual := tt}} }

-- TODO : move
lemma if_preimage (p : Œ± ‚Üí Prop) (f g : Œ± ‚Üí Œ≤) (B : set Œ≤) :
  (Œªa, if p a then f a else g a)‚Åª¬π' B = p ‚à© f ‚Åª¬π' B ‚à™ (-p) ‚à© g ‚Åª¬π' B :=
begin
  ext,
  simp only [mem_inter_eq, mem_union_eq, mem_preimage],
  split_ifs;
  simp [mem_def, h]
end

lemma indicator_preimage (s : set Œ±) (f : Œ± ‚Üí Œ≤) (B : set Œ≤) :
  (indicator s f)‚Åª¬π' B = s ‚à© f ‚Åª¬π' B ‚à™ (-s) ‚à© (Œªa:Œ±, (0:Œ≤)) ‚Åª¬π' B :=
by { rw [indicator, if_preimage], refl }

end has_zero

section has_add
variables [add_monoid Œ≤] {s t : set Œ±} {f g : Œ± ‚Üí Œ≤} {a : Œ±}

lemma indicator_union_of_not_mem_inter (h : a ‚àâ s ‚à© t) (f : Œ± ‚Üí Œ≤) :
  indicator (s ‚à™ t) f a = indicator s f a + indicator t f a :=
by { simp only [indicator], split_ifs, repeat {simp * at * {contextual := tt}} }

lemma indicator_union_of_disjoint (h : disjoint s t) (f : Œ± ‚Üí Œ≤) :
  indicator (s ‚à™ t) f = Œªa, indicator s f a + indicator t f a :=
funext $ Œªa, indicator_union_of_not_mem_inter
  (by { convert not_mem_empty a, have := disjoint.eq_bot h, assumption })
  _

lemma indicator_union_ae [measure_space Œ±] {Œ≤ : Type*} [add_monoid Œ≤]
  (h : ‚àÄ‚Çò a, a ‚àâ s ‚à© t) (f : Œ± ‚Üí Œ≤) :
  ‚àÄ‚Çò a, indicator (s ‚à™ t) f a = indicator s f a + indicator t f a :=
begin
  filter_upwards [h],
  simp only [mem_set_of_eq],
  assume a ha,
  exact indicator_union_of_not_mem_inter ha _
end

lemma indicator_add (s : set Œ±) (f g : Œ± ‚Üí Œ≤) :
  indicator s (Œªa, f a + g a) = Œªa, indicator s f a + indicator s g a :=
by { funext, simp only [indicator], split_ifs, { refl }, rw add_zero }

lemma indicator_smul {ùïú : Type*} [monoid ùïú] [distrib_mul_action ùïú Œ≤] (s : set Œ±) (r : ùïú) (f : Œ± ‚Üí Œ≤) :
  indicator s (Œª (x : Œ±), r ‚Ä¢ f x) = Œª (x : Œ±), r ‚Ä¢ indicator s f x :=
by { simp only [indicator], funext, split_ifs, refl, exact (smul_zero r).symm }

lemma indicator_neg {Œ≤ : Type*} [add_group Œ≤] (s : set Œ±) (f : Œ± ‚Üí Œ≤) :
  indicator s (Œªa, - f a) = Œªa, - indicator s f a :=
by { funext, simp only [indicator], split_ifs, { refl }, rw neg_zero }

lemma indicator_sub {Œ≤ : Type*} [add_group Œ≤] (s : set Œ±) (f g : Œ± ‚Üí Œ≤) :
  indicator s (Œªa, f a - g a) = Œªa, indicator s f a - indicator s g a :=
by { funext, simp only [indicator], split_ifs, { refl }, rw sub_zero }

end has_add

section norm
variables [normed_group Œ≤] {s t : set Œ±} {f g : Œ± ‚Üí Œ≤} {a : Œ±}

lemma norm_indicator_le_of_subset (h : s ‚äÜ t) (f : Œ± ‚Üí Œ≤) (a : Œ±) :
  ‚à•indicator s f a‚à• ‚â§ ‚à•indicator t f a‚à• :=
begin
  simp only [indicator],
  split_ifs with h‚ÇÅ h‚ÇÇ,
  { refl },
  { exact absurd (h h‚ÇÅ) h‚ÇÇ },
  { simp only [norm_zero, norm_nonneg] },
  refl
end

lemma norm_indicator_le_norm_self (f : Œ± ‚Üí Œ≤) (a : Œ±) : ‚à•indicator s f a‚à• ‚â§ ‚à•f a‚à• :=
by { convert norm_indicator_le_of_subset (subset_univ s) f a, rw indicator_univ }

lemma norm_indicator_eq_indicator_norm (f : Œ± ‚Üí Œ≤) (a : Œ±) :‚à•indicator s f a‚à• = indicator s (Œªa, ‚à•f a‚à•) a :=
by { simp only [indicator], split_ifs, { refl }, rw norm_zero }

end norm

section order
variables [has_zero Œ≤] [preorder Œ≤] {s t : set Œ±} {f g : Œ± ‚Üí Œ≤} {a : Œ±}

lemma indicator_le_indicator (h : f a ‚â§ g a) : indicator s f a ‚â§ indicator s g a :=
by { simp only [indicator], split_ifs with ha, { exact h }, refl }

lemma indicator_le_indicator_of_subset (h : s ‚äÜ t) (hf : ‚àÄa, 0 ‚â§ f a) (a : Œ±) :
  indicator s f a ‚â§ indicator t f a :=
begin
  simp only [indicator],
  split_ifs,
  { refl },
  { have := h h_1, contradiction },
  { exact hf a },
  { refl }
end

lemma indicator_le_indicator_ae [measure_space Œ±] (h : ‚àÄ‚Çò a, a ‚àà s ‚Üí f a ‚â§ g a) :
  ‚àÄ‚Çò a, indicator s f a ‚â§ indicator s g a :=
begin
  filter_upwards [h],
  simp only [mem_set_of_eq, indicator],
  assume a h,
  split_ifs with ha,
  { exact h ha },
  refl
end

end order

section tendsto
variables [has_zero Œ≤] [topological_space Œ≤]

lemma tendsto_indicator_of_monotone (s : ‚Ñï ‚Üí set Œ±) (hs : monotone s) (f : Œ± ‚Üí Œ≤)
  (a : Œ±) : tendsto (Œªi, indicator (s i) f a) at_top (nhds $ indicator (Union s) f a) :=
begin
  by_cases h : ‚àÉi, a ‚àà s i,
  { rcases h with ‚ü®i, hi‚ü©,
    refine tendsto_nhds.mpr (Œª t ht hf, _),
    simp only [mem_at_top_sets, mem_preimage],
    use i, assume n hn,
    have : indicator (s n) f a = f a := indicator_of_mem (hs hn hi) _,
    rw this,
    have : indicator (Union s) f a = f a := indicator_of_mem ((subset_Union _ _) hi) _,
    rwa this at hf },
  { rw [not_exists] at h,
    have : (Œªi, indicator (s i) f a) = Œªi, 0 := funext (Œªi, indicator_of_not_mem (h i) _),
    rw this,
    have : indicator (Union s) f a = 0,
      { apply indicator_of_not_mem, simpa only [not_exists, mem_Union] },
    rw this,
    exact tendsto_const_nhds }
end

lemma tendsto_indicator_of_decreasing (s : ‚Ñï ‚Üí set Œ±) (hs : ‚àÄi j, i ‚â§ j ‚Üí s j ‚äÜ s i) (f : Œ± ‚Üí Œ≤)
  (a : Œ±) : tendsto (Œªi, indicator (s i) f a) at_top (nhds $ indicator (Inter s) f a) :=
begin
  by_cases h : ‚àÉi, a ‚àâ s i,
  { rcases h with ‚ü®i, hi‚ü©,
    refine tendsto_nhds.mpr (Œª t ht hf, _),
    simp only [mem_at_top_sets, mem_preimage],
    use i, assume n hn,
    have : indicator (s n) f a = 0 := indicator_of_not_mem _ _,
    rw this,
    have : indicator (Inter s) f a = 0 := indicator_of_not_mem _ _,
    rwa this at hf,
    { simp only [mem_Inter, not_forall], exact ‚ü®i, hi‚ü© },
    { assume h, have := hs i _ hn h, contradiction } },
  { simp only [not_exists, not_not_mem] at h,
    have : (Œªi, indicator (s i) f a) = Œªi, f a := funext (Œªi, indicator_of_mem (h i) _),
    rw this,
    have : indicator (Inter s) f a = f a,
      { apply indicator_of_mem, simpa only [mem_Inter] },
    rw this,
    exact tendsto_const_nhds }
end

end tendsto
