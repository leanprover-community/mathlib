/-
Copyright (c) 2022 Mantas Bak≈°ys. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mantas Bak≈°ys
-/
import analysis.normed_space.add_torsor_bases
import group_theory.perm.list

/-!
# Ceva's Theorem

This file proves Ceva's theorem in euclidean geometry following the barycentric coordinate proof.

## Implementation notes

Because of the currently generality of `affine_basis.interior_convex_hull` is stated in, we prove
Ceva's theorem in its current form. This will need to be upgraded to the usual setting of Euclidean
Geometry results after the affinity refactor.

## Main declarations

* `geometry.ceva_of_mem_interior`: Ceva's theorem for an interior point

## TODO

Generalize to exterior points as well, using signed distances.

## References

* https://en.wikipedia.org/wiki/Ceva%27s_theorem
* This is problem 61 on [Freek's list](https://www.cs.ru.nl/~freek/100/).
-/

open affine affine_basis basis finite_dimensional finset fintype equiv
open_locale big_operators

variables {ùïú V E Œπ Œπ' : Type*}

section add_comm_group
variables [add_comm_group V]

section ring
variables [ring ùïú] [module ùïú V] [add_torsor V E]
include V

lemma affine_basis.vsub_eq_coord_smul_sum [fintype Œπ] (o : E) (S : affine_basis Œπ ùïú E) (x : E) :
  x -·µ• o = ‚àë i, S.coord i o ‚Ä¢ (x -·µ• S i) :=
begin
  convert (finset.univ.sum_smul_const_vsub_eq_vsub_affine_combination (Œª i, S.coord i o) S
    x $ S.sum_coord_apply_eq_one o).symm,
  exact (S.affine_combination_coord_eq_self _).symm,
end

end ring

section field
variables [field ùïú] [add_comm_group E] [module ùïú E]

lemma affine_basis.pair_lin_indep {o d v‚ÇÅ v‚ÇÇ : E} (S : affine_basis (fin 3) ùïú E) {r‚ÇÅ r‚ÇÇ r‚ÇÉ r‚ÇÑ : ùïú}
  (hA‚ÇÅ : S 0 = r‚ÇÉ ‚Ä¢ v‚ÇÇ +·µ• d) (hB‚ÇÅ : S 1 = r‚ÇÑ ‚Ä¢ v‚ÇÇ +·µ• d) (hC‚ÇÅ : S 2 = r‚ÇÇ ‚Ä¢ v‚ÇÅ +·µ• o)
  (hD‚ÇÅ : d = r‚ÇÅ ‚Ä¢ v‚ÇÅ +·µ• o) :
  linear_independent ùïú ![v‚ÇÅ, v‚ÇÇ] :=
begin
  rw linear_independent_fin2,
  split,
  { simp only [matrix.head_cons, ne.def, matrix.cons_val_one],
    rintro rfl,
    simp only [smul_zero, zero_vadd, function.comp_app] at hA‚ÇÅ hB‚ÇÅ,
    have hindep := S.ind,
    rw affine_independent at hindep,
    specialize hindep {0, 1} (![1, -1, 0]),
    replace hindep : (({0, 1} : finset (fin 3)).weighted_vsub S) ![(1 : ùïú), -1, 0] = 0 ‚Üí
      false := by simpa using hindep,
    apply hindep,
    rw weighted_vsub_eq_weighted_vsub_of_point_of_sum_eq_zero _ _ _ _ d,
    suffices : S 0 - S 1 = 0, { simpa},
    rw [hA‚ÇÅ, hB‚ÇÅ],
    exact sub_self d,
    simp },
  intros a ha,
  simp only [matrix.head_cons, matrix.cons_val_one, matrix.cons_val_zero] at ha,
  subst ha,
  subst hD‚ÇÅ,
  have hindep := S.ind,
  rw [affine_independent_iff_not_collinear,
    collinear_iff_of_mem (set.mem_range_self _ : S 0 ‚àà set.range S)] at hindep,
  refine hindep ‚ü®v‚ÇÇ, _‚ü©,
  rintro _ ‚ü®n, rfl‚ü©,
  fin_cases n,
  { use 0,
    simp },
  { use r‚ÇÑ - r‚ÇÉ,
    rw [hB‚ÇÅ, hA‚ÇÅ],
    simp only [sub_smul, vadd_vadd, ‚Üê add_assoc, ‚Üê smul_assoc, smul_eq_mul, sub_add_cancel] },
  { use r‚ÇÇ ‚Ä¢ a - r‚ÇÅ ‚Ä¢ a - r‚ÇÉ,
    rw [hC‚ÇÅ, hA‚ÇÅ],
    simp only [sub_smul, vadd_vadd, ‚Üê add_assoc, ‚Üê smul_assoc, smul_eq_mul, sub_add_cancel] }
end

lemma affine_basis.fin3_coord_vsub_smul_sum_eq_zero (o d : E) (S : affine_basis (fin 3) ùïú E)
  (h‚ÇÅ : collinear ùïú ({S 0, S 1, d} : set E))
  (habd : collinear ùïú ({d, o, S 2} : set E)) :
  S.coord 0 o ‚Ä¢ (d -·µ• S 0) + S.coord 1 o ‚Ä¢ (d -·µ• S 1) = (0 : E) :=
begin
  have h := affine_basis.vsub_eq_coord_smul_sum o S d,
  have hsub : d -·µ• o - S.coord 2 o ‚Ä¢ (d -·µ• S 2) = S.coord 0 o ‚Ä¢ (d -·µ• S 0) +
  S.coord 1 o ‚Ä¢ (d -·µ• S 1),
  { apply vadd_right_cancel (S.coord 2 o ‚Ä¢ (d -·µ• S 2)),
    simp only [vsub_eq_sub, sub_add_cancel, vadd_eq_add, add_assoc],
    simpa only [fin.sum_univ_succ, fin.sum_univ_zero, add_zero] using h },
  have hO : o ‚àà ({d, o, S 2} : set E),
  { simp only [set.mem_insert_iff, true_or, eq_self_iff_true, or_true] },
  rw collinear_iff_of_mem hO at habd,
  cases habd with v‚ÇÅ hv‚ÇÅ,
  have hD‚ÇÅ : d ‚àà ({S 0, S 1, d} : set E),
  { simp only [set.mem_insert_iff, set.mem_singleton, or_true] },
  rw collinear_iff_of_mem hD‚ÇÅ at h‚ÇÅ,
  cases h‚ÇÅ with v‚ÇÇ hv‚ÇÇ,
  obtain ‚ü®r‚ÇÇ, hC‚ÇÅ‚ü© := hv‚ÇÅ (S 2) (by simp only [set.mem_insert_iff, set.mem_singleton, or_true]),
  obtain ‚ü®r‚ÇÉ, hA‚ÇÅ‚ü© := hv‚ÇÇ (S 0) (by simp only [set.mem_insert_iff, true_or, eq_self_iff_true]),
  obtain ‚ü®r‚ÇÑ, hB‚ÇÅ‚ü© := hv‚ÇÇ (S 1)
    (by simp only [set.mem_insert_iff, true_or, eq_self_iff_true, or_true]),
  obtain ‚ü®r‚ÇÅ, hD‚ÇÅ‚ü© := hv‚ÇÅ d (by simp only [set.mem_insert_iff, true_or, eq_self_iff_true]),
  simp only [hC‚ÇÅ, hA‚ÇÅ, hB‚ÇÅ, hD‚ÇÅ, vadd_vsub_vadd_cancel_right, vadd_vsub, vsub_vadd_eq_vsub_sub,
    zero_sub, smul_neg, sub_self] at hsub,
  rw [hB‚ÇÅ, hA‚ÇÅ, hD‚ÇÅ],
  simp only [vadd_vsub_vadd_cancel_right, vadd_vsub, vsub_vadd_eq_vsub_sub, zero_sub, smul_neg,
   sub_self],
  have hlinind := affine_basis.pair_lin_indep S hA‚ÇÅ hB‚ÇÅ hC‚ÇÅ hD‚ÇÅ,
  have hv‚ÇÅ : (r‚ÇÅ + S.coord 2 o ‚Ä¢ r‚ÇÇ - S.coord 2 o ‚Ä¢ r‚ÇÅ) ‚Ä¢ v‚ÇÅ = r‚ÇÅ ‚Ä¢ v‚ÇÅ -
    S.coord 2 o ‚Ä¢ (r‚ÇÅ ‚Ä¢ v‚ÇÅ - r‚ÇÇ ‚Ä¢ v‚ÇÅ),
  { rw [‚Üêsub_smul, ‚Üêsmul_assoc],
    simp only [smul_eq_mul, mul_sub, sub_smul, add_smul],
    rw sub_sub_eq_add_sub },
  have hv‚ÇÇ : (- S.coord 0 o ‚Ä¢ r‚ÇÉ - S.coord 1 o ‚Ä¢ r‚ÇÑ) ‚Ä¢ v‚ÇÇ = -(S.coord 0 o ‚Ä¢ r‚ÇÉ ‚Ä¢ v‚ÇÇ) +
    -(S.coord 1 o ‚Ä¢ r‚ÇÑ ‚Ä¢ v‚ÇÇ),
  { simp only [sub_smul, ‚Üê smul_assoc, smul_eq_mul, neg_smul, ‚Üê sub_eq_add_neg] },
  have habd : (r‚ÇÅ + S.coord 2 o ‚Ä¢ r‚ÇÇ - S.coord 2 o ‚Ä¢ r‚ÇÅ) ‚Ä¢ v‚ÇÅ = (- S.coord 0 o ‚Ä¢ r‚ÇÉ -
    S.coord 1 o ‚Ä¢ r‚ÇÑ) ‚Ä¢ v‚ÇÇ,
  { rw [hv‚ÇÅ, hv‚ÇÇ],
    exact hsub },
  simp only [smul_eq_mul] at habd,
  rw [‚Üê sub_eq_add_neg, ‚Üê neg_smul, ‚Üê smul_assoc, ‚Üê smul_assoc, ‚Üê sub_smul],
  by_cases hbce : (r‚ÇÅ + S.coord 2 o * r‚ÇÇ - S.coord 2 o * r‚ÇÅ) = 0,
  simp only [hbce, zero_smul] at habd,
  simp only [smul_eq_mul, ‚Üê habd],
  rw [‚Üê eq_inv_smul_iff‚ÇÄ, ‚Üê smul_assoc] at habd,
  rw linear_independent_fin2 at hlinind,
  cases hlinind with hcaf hdoc,
  specialize hdoc
    ((r‚ÇÅ + S.coord 2 o * r‚ÇÇ - S.coord 2 o * r‚ÇÅ)‚Åª¬π ‚Ä¢ (-S.coord 0 o * r‚ÇÉ - S.coord 1 o * r‚ÇÑ)),
  simp only [matrix.head_cons, matrix.cons_val_one, matrix.cons_val_zero, habd] at hdoc,
  cases hdoc rfl,
  exact hbce,
end

end field
end add_comm_group

variables [normed_add_comm_group E] [normed_space ‚Ñù E]

lemma affine_basis.fin3_interior_coord_mul_dist_eq [fintype Œπ]{o d : E} (S : affine_basis Œπ ‚Ñù E)
  {i j : Œπ} (h : S.coord i o ‚Ä¢ (d -·µ• S i : E) + S.coord j o ‚Ä¢ (d -·µ• S j) = 0)
  (hinterior : ‚àÄ i, 0 ‚â§ S.coord i o) :
  S.coord i o * dist (S i) d = S.coord j o * dist d (S j) :=
begin
  rw [add_eq_zero_iff_eq_neg, eq_neg_iff_eq_neg] at h,
  rw [dist_eq_norm_vsub E, dist_eq_norm_vsub E, ‚Üênorm_smul_of_nonneg (hinterior _),
    ‚Üênorm_smul_of_nonneg (hinterior _), h, ‚Üêsmul_neg, neg_vsub_eq_vsub_rev],
end

namespace geometry

/-- **Ceva's Theorem** for a triangle with cevians that intersect at an interior point. -/
theorem ceva_of_mem_interior [finite_dimensional ‚Ñù E] (a b c d e f o : E) (S : triangle ‚Ñù E)
  (hE : finrank ‚Ñù E = 2) (hS : S.points = ![a, b, c])
  (habd : collinear ‚Ñù ({a, b, d} : set E)) (hbce : collinear ‚Ñù ({b, c, e} : set E))
  (hcaf : collinear ‚Ñù ({c, a, f} : set E)) (hdoc : collinear ‚Ñù ({d, o, c} : set E))
  (heoa : collinear ‚Ñù ({e, o, a} : set E)) (hfob : collinear ‚Ñù ({f, o, b} : set E))
  (ho : o ‚àà interior (convex_hull ‚Ñù (set.range S.points))) :
  dist a d * dist b e * dist c f  = dist d b * dist e c * dist f a :=
begin
  have hfind : finite_dimensional ‚Ñù E := finite_dimensional_of_finrank_eq_succ hE,
  have hspan : affine_span ‚Ñù (set.range S.points) = ‚ä§,
  { rw [S.independent.affine_span_eq_top_iff_card_eq_finrank_add_one, fintype.card_fin, hE] },
  have hs := S.independent,
  set œÉ‚ÇÇ : perm (fin 3) := list.form_perm [0, 1, 2] with hœÉ‚ÇÇ,
  set œÉ‚ÇÉ : perm (fin 3) := œÉ‚ÇÇ.trans œÉ‚ÇÇ with hœÉ‚ÇÉ,
  set S‚ÇÅ : triangle ‚Ñù E := ‚ü®![a, b, c], by simpa [‚ÜêhS]‚ü© with hS‚ÇÅ,
  have hS‚ÇÅspan := S‚ÇÅ.span_eq_top hE,
  set T‚ÇÅ : affine_basis (fin 3) ‚Ñù E := ‚ü®![a, b, c], S‚ÇÅ.independent, hS‚ÇÅspan‚ü© with hT‚ÇÅ,
  change collinear ‚Ñù ({T‚ÇÅ 0, T‚ÇÅ 1, d} : set E) at habd,
  change collinear ‚Ñù ({d, o, T‚ÇÅ 2} : set E) at hdoc,
  set T‚ÇÇ : affine_basis (fin 3) ‚Ñù E := T‚ÇÅ.reindex œÉ‚ÇÇ.symm with hT‚ÇÇ,
  change collinear ‚Ñù ({T‚ÇÇ 0, T‚ÇÇ 1,e} : set E) at hbce,
  change collinear ‚Ñù ({e, o, T‚ÇÇ 2} : set E) at heoa,
  set T‚ÇÉ : affine_basis (fin 3) ‚Ñù E := T‚ÇÅ.reindex œÉ‚ÇÉ.symm with hT‚ÇÉ,
  change collinear ‚Ñù ({T‚ÇÉ 0, T‚ÇÉ 1, f} : set E) at hcaf,
  change collinear ‚Ñù ({f, o, T‚ÇÉ 2} : set E) at hfob,
  rw hS at ho,
  change o ‚àà interior (convex_hull ‚Ñù (set.range T‚ÇÅ)) at ho,
  rw affine_basis.interior_convex_hull at ho,
  have hwnezero : T‚ÇÅ.coord 0 o * T‚ÇÅ.coord 1 o * T‚ÇÅ.coord 2 o ‚â† 0 :=
    mul_ne_zero (mul_pos (ho _) $ ho _).ne' (ho _).ne',
  have hADB := T‚ÇÅ.fin3_interior_coord_mul_dist_eq
    (affine_basis.fin3_coord_vsub_smul_sum_eq_zero _ _ _ habd hdoc) (Œª _, (ho _).le),
  have hBEC := T‚ÇÇ.fin3_interior_coord_mul_dist_eq
    (affine_basis.fin3_coord_vsub_smul_sum_eq_zero _ _ _ hbce heoa) (Œª _, (ho _).le),
  have hCFA := T‚ÇÉ.fin3_interior_coord_mul_dist_eq
    (affine_basis.fin3_coord_vsub_smul_sum_eq_zero _ _ _ hcaf hfob) (Œª _, (ho _).le),
  clear habd hbce hcaf hdoc heoa hfob ho,
  have hb : ![a, b, c] 1 = b := by refl,
  have hc : ![a, b, c] 2 = c := by refl,
  have ha : ![a, b, c] 3 = a := by refl,
  have h := congr_arg2 (Œª a b, a * b) (congr_arg2 (Œª a b, a * b) hADB hBEC) hCFA,
  simp only [‚Üê affine_basis.coord_perm œÉ‚ÇÅ T‚ÇÅ T‚ÇÅ o hT‚ÇÅ, ‚Üê affine_basis.coord_perm œÉ‚ÇÇ T‚ÇÅ T‚ÇÇ o hT‚ÇÇ,
    ‚Üê affine_basis.coord_perm œÉ‚ÇÉ T‚ÇÅ T‚ÇÉ o hTœÉ‚ÇÉ] at h,
  clear hADB hBEC hCFA hT‚ÇÅ hT‚ÇÇ hTœÉ‚ÇÉ hT‚ÇÅ hT‚ÇÇ hT‚ÇÉ T‚ÇÅ T‚ÇÇ T‚ÇÉ,
  dsimp at h,
  simp only [hœÉ‚ÇÇ, hb, hc, ha] at h,
  replace h : (T‚ÇÅ.coord 0 o * T‚ÇÅ.coord 1 o * T‚ÇÅ.coord 2 o) * (dist a d * dist b e * dist c f) =
    (T‚ÇÅ.coord 3 o * T‚ÇÅ.coord 1 o * T‚ÇÅ.coord 2 o) * (dist d b * dist e c * dist f a) := by linarith,
  rwa ‚Üêmul_right_inj' hwnezero,
end

end geometry
