/-
Copyright (c) 2019 Jan-David Salchow. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/

import analysis.normed_space.operator_norm topology.algebra.multilinear

/-!
# Operator norm on the space of continuous multilinear maps

When `f` is a continuous multilinear map in finitely many variables, we define its norm `‚à•f‚à•` as the
smallest number such that `‚à•f m‚à• ‚â§ ‚à•f‚à• * univ.prod (Œªi, ‚à•m i‚à•)` for all `m`.

We show that it is indeed a norm, and prove its basic properties.

## Main results

Let `f` be a multilinear map.
* `exists_bound_of_continuous` asserts that, if `f` is continuous, then there exists `C > 0`
  with `‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)` for all `m`.
* `continuous_of_bound`, conversely, asserts that this bound implies continuity.
* `mk_continuous` constructs the associated continuous multilinear map.

Let `f` be a continuous multilinear map.
* `‚à•f‚à•` is its norm, i.e., the smallest number such that `‚à•f m‚à• ‚â§ ‚à•f‚à• * univ.prod (Œªi, ‚à•m i‚à•)` for
  all `m`.
* `le_op_norm f m` asserts the fundamental inequality `‚à•f m‚à• ‚â§ ‚à•f‚à• * univ.prod (Œªi, ‚à•m i‚à•)`.
* `norm_image_sub_le_of_bound f m‚ÇÅ m‚ÇÇ` gives a control of the difference `f m‚ÇÅ - f m‚ÇÇ` in terms of
  `‚à•f‚à•` and `‚à•m‚ÇÅ - m‚ÇÇ‚à•`.

We also register canonical isomorphisms corresponding to singling out a variable.
* `linear_to_multilinear_equiv_multilinear_cont ùïú E E‚ÇÇ`: The space of continuous multilinear maps on
  `Œ†(i : fin (n+1)), E i` is canonically isomorphic to the space of continuous linear maps from
  `E 0` to the space of continuous multilinear maps on `Œ†(i : fin n), E i.succ `, by separating the
  first variable. We register this isomorphism in
  `linear_to_multilinear_equiv_multilinear_cont ùïú E E‚ÇÇ`, as a continuous linear equiv.

## Implementation notes

We mostly follow the API (and the proofs) of `operator_norm.lean`, with the additional complexity
that we should deal with multilinear maps in several variables.
-/

noncomputable theory
open_locale classical
open finset

set_option class.instance_max_depth 45

universes u v w w‚ÇÅ w‚ÇÇ
variables {ùïú : Type u} {Œπ : Type v} {n : ‚Ñï}
{E : fin n.succ ‚Üí Type w } {E‚ÇÅ : Œπ ‚Üí Type w‚ÇÅ} {E‚ÇÇ : Type w‚ÇÇ}
[decidable_eq Œπ] [fintype Œπ] [nondiscrete_normed_field ùïú]
[‚àÄi, normed_group (E i)]  [‚àÄi, normed_group (E‚ÇÅ i)] [normed_group E‚ÇÇ]
[‚àÄi, normed_space ùïú (E i)] [‚àÄi, normed_space ùïú (E‚ÇÅ i)] [normed_space ùïú E‚ÇÇ]

/-!
### Continuity properties of multilinear maps

We relate continuity of multilinear maps to the inequality ``‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)`, in
both directions. Along the way, we prove useful bounds on the difference `‚à•f m‚ÇÅ - f m‚ÇÇ‚à•`.
-/
namespace multilinear_map

variable (f : multilinear_map ùïú E‚ÇÅ E‚ÇÇ)

/-- If a multilinear map in finitely many variables on normed spaces is continuous, then it
satisfies the inequality `‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)`, for some `C` which can be chosen to be
positive. -/
theorem exists_bound_of_continuous (hf : continuous f) :
  ‚àÉ (C : ‚Ñù), 0 < C ‚àß (‚àÄ m, ‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)) :=
begin
  /- The proof only uses the continuity at `0`. Then, given a general point `m`, rescale each of
  its coordinates to bring it to a shell of fixed width around `0`, on which one knows that `f` is
  bounded, and then use the multiplicativity of `f` along each coordinate to deduce the desired
  bound.-/
  have : continuous_at f 0 := continuous_iff_continuous_at.1 hf _,
  rcases metric.tendsto_nhds_nhds.1 this 1 zero_lt_one with ‚ü®Œµ, Œµ_pos, hŒµ‚ü©,
  let Œ¥ := Œµ/2,
  have Œ¥_pos : Œ¥ > 0 := half_pos Œµ_pos,
  /- On points of size at most `Œ¥`, `f` is bounded (by `1 + ‚à•f 0‚à•`). -/
  have H : ‚àÄ{a}, ‚à•a‚à• ‚â§ Œ¥ ‚Üí ‚à•f a‚à• ‚â§ 1 + ‚à•f 0‚à•,
  { assume a ha,
    have : dist (f a) (f 0) ‚â§ 1,
    { apply le_of_lt (hŒµ _),
      rw [dist_eq_norm, sub_zero],
      exact lt_of_le_of_lt ha (half_lt_self Œµ_pos) },
    calc ‚à•f a‚à• = dist (f a) 0 : (dist_zero_right _).symm
      ... ‚â§ dist (f a) (f 0) + dist (f 0) 0 : dist_triangle _ _ _
      ... ‚â§ 1 + ‚à•f 0‚à• : by { rw dist_zero_right, exact add_le_add_right this _ } },
  rcases normed_field.exists_one_lt_norm ùïú with ‚ü®c, hc‚ü©,
  set C := (1 + ‚à•f 0‚à•) * univ.prod (Œª(i : Œπ), Œ¥‚Åª¬π * ‚à•c‚à•),
  have C_pos : 0 < C :=
    mul_pos (lt_of_lt_of_le zero_lt_one (by simp))
      (prod_pos (Œªi hi, mul_pos (inv_pos Œ¥_pos) (lt_of_le_of_lt zero_le_one hc))),
  refine ‚ü®C, C_pos, Œªm, _‚ü©,
  /- Given a general point `m`, rescale each coordinate to bring it to `[Œ¥/‚à•c‚à•, Œ¥]` by multiplication
  by a power of a scalar `c` with norm `‚à•c‚à• > 1`.-/
  by_cases h : ‚àÉi, m i = 0,
  { rcases h with ‚ü®i, hi‚ü©,
    rw [f.map_coord_zero i hi, _root_.norm_zero],
    exact mul_nonneg'  (le_of_lt C_pos) (prod_nonneg (Œªi hi, norm_nonneg _)) },
  { push_neg at h,
    have : ‚àÄi, ‚àÉd:ùïú, d ‚â† 0 ‚àß ‚à•d ‚Ä¢ (m i)‚à• ‚â§ Œ¥ ‚àß (Œ¥/‚à•c‚à• ‚â§ ‚à•d ‚Ä¢ m i‚à•) ‚àß (‚à•d‚à•‚Åª¬π ‚â§ Œ¥‚Åª¬π * ‚à•c‚à• * ‚à•m i‚à•) :=
      Œªi, rescale_to_shell hc Œ¥_pos (h i),
    choose d hd using this,
    have A : 0 ‚â§ 1 + ‚à•f 0‚à• := add_nonneg zero_le_one (norm_nonneg _),
    have B : ‚àÄ (i : Œπ), i ‚àà univ ‚Üí 0 ‚â§ ‚à•d i‚à•‚Åª¬π := Œªi hi, by simp,
    -- use the bound on `f` on the ball of size `Œ¥` to conclude.
    calc
      ‚à•f m‚à• = ‚à•f (Œªi, (d i)‚Åª¬π ‚Ä¢ (d i ‚Ä¢ m i))‚à• :
        by { unfold_coes, congr, ext i, rw [‚Üê mul_smul, inv_mul_cancel (hd i).1, one_smul] }
      ... = ‚à•univ.prod (Œªi, (d i)‚Åª¬π) ‚Ä¢ f (Œªi, d i ‚Ä¢ m i)‚à• : by rw f.map_smul_univ
      ... = univ.prod (Œªi, ‚à•d i‚à•‚Åª¬π) * ‚à•f (Œªi, d i ‚Ä¢ m i)‚à• :
        by { rw [norm_smul, normed_field.norm_prod], congr, ext i, rw normed_field.norm_inv }
      ... ‚â§ univ.prod (Œªi, ‚à•d i‚à•‚Åª¬π) * (1 + ‚à•f 0‚à•) :
        mul_le_mul_of_nonneg_left (H ((pi_norm_le_iff (le_of_lt Œ¥_pos)).2 (Œªi, (hd i).2.1)))
          (prod_nonneg B)
      ... ‚â§ univ.prod (Œªi, Œ¥‚Åª¬π * ‚à•c‚à• * ‚à•m i‚à•) * (1 + ‚à•f 0‚à•) :
        mul_le_mul_of_nonneg_right (prod_le_prod B (Œªi hi, (hd i).2.2.2)) A
      ... = univ.prod (Œª(i : Œπ), Œ¥‚Åª¬π * ‚à•c‚à•) * univ.prod (Œªi, ‚à•m i‚à•) * (1 + ‚à•f 0‚à•) :
        by rw prod_mul_distrib
      ... = C * univ.prod (Œª (i : Œπ), ‚à•m i‚à•) :
        by rw [mul_comm, ‚Üê mul_assoc] }
end

/-- If `f` satisfies a boundedness property around `0`, one can deduce a bound on `f m‚ÇÅ - f m‚ÇÇ`
using the multilinearity. Here, we give a precise but hard to use version. See
`norm_image_sub_le_of_bound` for a less precise but more usable version. -/
lemma norm_image_sub_le_of_bound' {C : ‚Ñù} (hC : 0 ‚â§ C)
  (H : ‚àÄ m, ‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)) (m‚ÇÅ m‚ÇÇ : Œ†i, E‚ÇÅ i) :
  ‚à•f m‚ÇÅ - f m‚ÇÇ‚à• ‚â§
  C * univ.sum (Œªi, univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•)) :=
begin
  have A : ‚àÄ(s : finset Œπ), ‚à•f m‚ÇÅ - f (s.piecewise m‚ÇÇ m‚ÇÅ)‚à•
    ‚â§ C * s.sum (Œªi, univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•)),
  { refine finset.induction (by simp) _,
    assume i s his Hrec,
    have I : ‚à•f (s.piecewise m‚ÇÇ m‚ÇÅ) - f ((insert i s).piecewise m‚ÇÇ m‚ÇÅ)‚à•
      ‚â§ C * univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•),
    { have A : ((insert i s).piecewise m‚ÇÇ m‚ÇÅ)
            = function.update (s.piecewise m‚ÇÇ m‚ÇÅ) i (m‚ÇÇ i) := s.piecewise_insert _ _ _,
      have B : s.piecewise m‚ÇÇ m‚ÇÅ = function.update (s.piecewise m‚ÇÇ m‚ÇÅ) i (m‚ÇÅ i),
      { ext j,
        by_cases h : j = i,
        { rw h, simp [his] },
        { simp [h] } },
      rw [B, A, ‚Üê f.map_sub],
      apply le_trans (H _) (mul_le_mul_of_nonneg_left _ hC),
      refine prod_le_prod (Œªj hj, norm_nonneg _) (Œªj hj, _),
      by_cases h : j = i,
      { rw h, simp },
      { by_cases h' : j ‚àà s;
        simp [h', h, le_refl] } },
    calc ‚à•f m‚ÇÅ - f ((insert i s).piecewise m‚ÇÇ m‚ÇÅ)‚à• ‚â§
      ‚à•f m‚ÇÅ - f (s.piecewise m‚ÇÇ m‚ÇÅ)‚à•
        + ‚à•f (s.piecewise m‚ÇÇ m‚ÇÅ) - f ((insert i s).piecewise m‚ÇÇ m‚ÇÅ)‚à• :
          by { rw [‚Üê dist_eq_norm, ‚Üê dist_eq_norm, ‚Üê dist_eq_norm], exact dist_triangle _ _ _ }
      ... ‚â§ C * s.sum (Œªi, univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•))
            + C * univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•) :
        add_le_add Hrec I
      ... = C * (insert i s).sum (Œªi, univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•)) :
        by simp [his, left_distrib] },
  convert A univ,
  simp
end

/-- If `f` satisfies a boundedness property around `0`, one can deduce a bound on `f m‚ÇÅ - f m‚ÇÇ`
using the multilinearity. Here, we give a usable but not very precise version. See
`norm_image_sub_le_of_bound'` for a more precise but less usable version. -/
lemma norm_image_sub_le_of_bound {C : ‚Ñù} (hC : 0 ‚â§ C)
  (H : ‚àÄ m, ‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)) (m‚ÇÅ m‚ÇÇ : Œ†i, E‚ÇÅ i) :
  ‚à•f m‚ÇÅ - f m‚ÇÇ‚à• ‚â§ C * (fintype.card Œπ) * (max ‚à•m‚ÇÅ‚à• ‚à•m‚ÇÇ‚à•) ^ (fintype.card Œπ - 1) * ‚à•m‚ÇÅ - m‚ÇÇ‚à• :=
begin
  have A : ‚àÄ (i : Œπ), univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•)
    ‚â§ ‚à•m‚ÇÅ - m‚ÇÇ‚à• * (max ‚à•m‚ÇÅ‚à• ‚à•m‚ÇÇ‚à•)^(fintype.card Œπ - 1),
  { assume i,
    calc univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•)
    ‚â§ (univ : finset Œπ).prod (piecewise (finset.singleton i) (Œª j, ‚à•m‚ÇÅ - m‚ÇÇ‚à•) (Œª j, max ‚à•m‚ÇÅ‚à• ‚à•m‚ÇÇ‚à•)) :
      begin
        apply prod_le_prod,
        { assume j hj, by_cases h : j = i; simp [h, norm_nonneg] },
        { assume j hj,
          by_cases h : j = i,
          { simp [h], exact norm_le_pi_norm (m‚ÇÅ - m‚ÇÇ) i },
          { simp [h,  max_le_max, norm_le_pi_norm] } }
      end
    ... = ‚à•m‚ÇÅ - m‚ÇÇ‚à• ^ (card (finset.singleton i))
          * (max ‚à•m‚ÇÅ‚à• ‚à•m‚ÇÇ‚à•) ^ (fintype.card Œπ - card (finset.singleton i)) :
      by { rw prod_piecewise, simp [card_univ_diff] }
    ... = ‚à•m‚ÇÅ - m‚ÇÇ‚à• * (max ‚à•m‚ÇÅ‚à• ‚à•m‚ÇÇ‚à•) ^ (fintype.card Œπ - 1) : by simp },
  calc
  ‚à•f m‚ÇÅ - f m‚ÇÇ‚à•
  ‚â§ C * univ.sum (Œªi, univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•)) :
    f.norm_image_sub_le_of_bound' hC H m‚ÇÅ m‚ÇÇ
  ... ‚â§ C * univ.sum (Œª (i : Œπ), ‚à•m‚ÇÅ - m‚ÇÇ‚à• * (max ‚à•m‚ÇÅ‚à• ‚à•m‚ÇÇ‚à•) ^ (fintype.card Œπ - 1)) :
    mul_le_mul_of_nonneg_left (sum_le_sum (Œªi hi, A i)) hC
  ... = C * (fintype.card Œπ) * (max ‚à•m‚ÇÅ‚à• ‚à•m‚ÇÇ‚à•) ^ (fintype.card Œπ - 1) * ‚à•m‚ÇÅ - m‚ÇÇ‚à• :
    by { rw [sum_const, card_univ, add_monoid.smul_eq_mul], ring }
end

/-- If a multilinear map satisfies an inequality `‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)`, then it is
continuous. -/
theorem continuous_of_bound (C : ‚Ñù) (H : ‚àÄ m, ‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)) :
  continuous f :=
begin
  let D := max C 1,
  have D_pos : 0 ‚â§ D := le_trans zero_le_one (le_max_right _ _),
  replace H : ‚àÄ m, ‚à•f m‚à• ‚â§ D * univ.prod (Œªi, ‚à•m i‚à•),
  { assume m,
    apply le_trans (H m) (mul_le_mul_of_nonneg_right (le_max_left _ _) _),
    exact prod_nonneg (Œª(i : Œπ) hi, norm_nonneg (m i)) },
  refine continuous_iff_continuous_at.2 (Œªm, _),
  refine continuous_at_of_locally_lipschitz zero_lt_one (D * (fintype.card Œπ) * (‚à•m‚à• + 1) ^ (fintype.card Œπ - 1))
    (Œªm' h', _),
  rw [dist_eq_norm, dist_eq_norm],
  have : 0 ‚â§ (max ‚à•m'‚à• ‚à•m‚à•), by simp,
  have : ‚à•m'‚à• ‚â§ 1 + ‚à•m‚à•, from calc
    ‚à•m'‚à• = ‚à•(m' - m) + m‚à• : by { congr' 1, abel }
    ... ‚â§ ‚à•m' - m‚à• + ‚à•m‚à• : norm_add_le _ _
    ... ‚â§ 1 + ‚à•m‚à• : begin
      apply add_le_add_right,
      rw ‚Üê dist_eq_norm,
      exact le_of_lt h'
    end,
  have : (max ‚à•m'‚à• ‚à•m‚à•) ‚â§ ‚à•m‚à• + 1, by simp [zero_le_one, this],
  calc
    ‚à•f m' - f m‚à•
    ‚â§ D * (fintype.card Œπ) * (max ‚à•m'‚à• ‚à•m‚à•) ^ (fintype.card Œπ - 1) * ‚à•m' - m‚à• :
      f.norm_image_sub_le_of_bound D_pos H m' m
    ... ‚â§ D * (fintype.card Œπ) * (‚à•m‚à• + 1) ^ (fintype.card Œπ - 1) * ‚à•m' - m‚à• :
      by apply_rules [mul_le_mul_of_nonneg_right, mul_le_mul_of_nonneg_left, mul_nonneg',
        norm_nonneg, nat.cast_nonneg, pow_le_pow_of_le_left]
end

/-- Constructing a continuous multilinear map from a multilinear map satisfying a boundedness
condition. -/
def mk_continuous (C : ‚Ñù) (H : ‚àÄ m, ‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)) :
  continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ :=
{ cont := f.continuous_of_bound C H,
  ..f }

end multilinear_map

/-!
### Continuous multilinear maps

We define the norm `‚à•f‚à•` of a continuous multilinear map `f` in finitely many variables, as the
smallest number such that `‚à•f m‚à• ‚â§ ‚à•f‚à• * univ.prod (Œªi, ‚à•m i‚à•)` for all `m`. We show that this
defines a normed space structure on `continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ`.
-/
namespace continuous_multilinear_map

variables (c : ùïú) (f g : continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ) (m : Œ†i, E‚ÇÅ i)

theorem bound : ‚àÉ (C : ‚Ñù), 0 < C ‚àß (‚àÄ m, ‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)) :=
f.to_multilinear_map.exists_bound_of_continuous f.2

open real

/-- The operator norm of a continuous multilinear map is the inf of all its bounds. -/
def op_norm := Inf {c | 0 ‚â§ (c : ‚Ñù) ‚àß ‚àÄ m, ‚à•f m‚à• ‚â§ c * finset.univ.prod (Œªi, ‚à•m i‚à•)}
instance has_op_norm : has_norm (continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ) := ‚ü®op_norm‚ü©

-- So that invocations of `real.Inf_le` make sense: we show that the set of
-- bounds is nonempty and bounded below.
lemma bounds_nonempty {f : continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ} :
  ‚àÉ c, c ‚àà {c | 0 ‚â§ c ‚àß ‚àÄ m, ‚à•f m‚à• ‚â§ c * finset.univ.prod (Œªi, ‚à•m i‚à•)} :=
let ‚ü®M, hMp, hMb‚ü© := f.bound in ‚ü®M, le_of_lt hMp, hMb‚ü©

lemma bounds_bdd_below {f : continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ} :
  bdd_below {c | 0 ‚â§ c ‚àß ‚àÄ m, ‚à•f m‚à• ‚â§ c * finset.univ.prod (Œªi, ‚à•m i‚à•)} :=
‚ü®0, Œª _ ‚ü®hn, _‚ü©, hn‚ü©

lemma op_norm_nonneg : 0 ‚â§ ‚à•f‚à• :=
lb_le_Inf _ bounds_nonempty (Œª _ ‚ü®hx, _‚ü©, hx)

/-- The fundamental property of the operator norm of a continuous multilinear map:
`‚à•f m‚à•` is bounded by `‚à•f‚à•` times the product of the `‚à•m i‚à•`. -/
theorem le_op_norm : ‚à•f m‚à• ‚â§ ‚à•f‚à• * finset.univ.prod (Œªi, ‚à•m i‚à•) :=
begin
  have A : 0 ‚â§ finset.univ.prod (Œªi, ‚à•m i‚à•) := prod_nonneg (Œªj hj, norm_nonneg _),
  by_cases h : finset.univ.prod (Œªi, ‚à•m i‚à•) = 0,
  { rcases prod_eq_zero_iff.1 h with ‚ü®i, _, hi‚ü©,
    rw norm_eq_zero at hi,
    have : f m = 0 := f.map_coord_zero i hi,
    rw [this, norm_zero],
    exact mul_nonneg' (op_norm_nonneg f) A },
  { have hlt : 0 < finset.univ.prod (Œªi, ‚à•m i‚à•) := lt_of_le_of_ne A (ne.symm h),
    exact le_mul_of_div_le hlt ((le_Inf _ bounds_nonempty bounds_bdd_below).2
      (Œª c ‚ü®_, hc‚ü©, div_le_of_le_mul hlt (begin rw mul_comm, apply hc, end))) }
end

lemma ratio_le_op_norm : ‚à•f m‚à• / finset.univ.prod (Œªi, ‚à•m i‚à•) ‚â§ ‚à•f‚à• :=
begin
  have A : 0 ‚â§ finset.univ.prod (Œªi, ‚à•m i‚à•) := prod_nonneg (Œªj hj, norm_nonneg _),
  by_cases h : finset.univ.prod (Œªi, ‚à•m i‚à•) = 0,
  { simp [h, op_norm_nonneg f] },
  { have hlt : 0 < finset.univ.prod (Œªi, ‚à•m i‚à•) := lt_of_le_of_ne A (ne.symm h),
    rw div_le_iff hlt,
    exact le_op_norm f m }
end

/-- The image of the unit ball under a continuous multilinear map is bounded. -/
lemma unit_le_op_norm (h : ‚à•m‚à• ‚â§ 1) : ‚à•f m‚à• ‚â§ ‚à•f‚à• :=
calc
  ‚à•f m‚à• ‚â§ ‚à•f‚à• * finset.univ.prod (Œªi, ‚à•m i‚à•) : f.le_op_norm m
  ... ‚â§ ‚à•f‚à• * finset.univ.prod (Œª (i : Œπ), 1) :
    mul_le_mul_of_nonneg_left (prod_le_prod (Œªi hi, norm_nonneg _) (Œªi hi, le_trans (norm_le_pi_norm _ _) h))
      (op_norm_nonneg f)
  ... = ‚à•f‚à• : by simp

/-- If one controls the norm of every `f x`, then one controls the norm of `f`. -/
lemma op_norm_le_bound {M : ‚Ñù} (hMp: 0 ‚â§ M) (hM : ‚àÄ m, ‚à•f m‚à• ‚â§ M * finset.univ.prod (Œªi, ‚à•m i‚à•)) :
  ‚à•f‚à• ‚â§ M :=
Inf_le _ bounds_bdd_below ‚ü®hMp, hM‚ü©

/-- The operator norm satisfies the triangle inequality. -/
theorem op_norm_add_le : ‚à•f + g‚à• ‚â§ ‚à•f‚à• + ‚à•g‚à• :=
Inf_le _ bounds_bdd_below
  ‚ü®add_nonneg (op_norm_nonneg _) (op_norm_nonneg _), Œª x, by { rw add_mul,
    exact norm_add_le_of_le (le_op_norm _ _) (le_op_norm _ _) }‚ü©

/-- An operator is zero iff its norm vanishes. -/
theorem op_norm_zero_iff : ‚à•f‚à• = 0 ‚Üî f = 0 :=
begin
  split,
  { assume h,
    ext m,
    simpa [h, (norm_le_zero_iff _).symm] using f.le_op_norm m },
  { assume h,
    apply le_antisymm (op_norm_le_bound f (le_refl _) (Œªm, _)) (op_norm_nonneg _),
    rw h,
    simp }
end

@[simp] lemma norm_zero : ‚à•(0 : continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ)‚à• = 0 :=
by rw op_norm_zero_iff

/-- The operator norm is homogeneous. -/
lemma op_norm_smul : ‚à•c ‚Ä¢ f‚à• = ‚à•c‚à• * ‚à•f‚à• :=
le_antisymm
  (Inf_le _ bounds_bdd_below
    ‚ü®mul_nonneg (norm_nonneg _) (op_norm_nonneg _), Œª _,
    begin
      erw [norm_smul, mul_assoc],
      exact mul_le_mul_of_nonneg_left (le_op_norm _ _) (norm_nonneg _)
    end‚ü©)
  (lb_le_Inf _ bounds_nonempty (Œª _ ‚ü®hn, hc‚ü©,
    (or.elim (lt_or_eq_of_le (norm_nonneg c))
      (Œª hlt,
        begin
          rw mul_comm,
          exact mul_le_of_le_div hlt (Inf_le _ bounds_bdd_below
          ‚ü®div_nonneg hn hlt, Œª _,
          (by { rw div_mul_eq_mul_div, exact le_div_of_mul_le hlt
          (by { rw [ mul_comm, ‚Üênorm_smul ], exact hc _ }) })‚ü©)
        end)
      (Œª heq, by { rw [‚Üêheq, zero_mul], exact hn }))))

lemma op_norm_neg : ‚à•-f‚à• = ‚à•f‚à• := calc
  ‚à•-f‚à• = ‚à•(-1:ùïú) ‚Ä¢ f‚à• : by rw neg_one_smul
  ... = ‚à•(-1:ùïú)‚à• * ‚à•f‚à• : by rw op_norm_smul
  ... = ‚à•f‚à• : by simp

/-- Continuous multilinear maps themselves form a normed space with respect to
    the operator norm. -/
instance to_normed_group : normed_group (continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ) :=
normed_group.of_core _ ‚ü®op_norm_zero_iff, op_norm_add_le, op_norm_neg‚ü©

instance to_normed_space : normed_space ùïú (continuous_multilinear_map ùïú E‚ÇÅ E‚ÇÇ) :=
‚ü®op_norm_smul‚ü©

/-- The difference `f m‚ÇÅ - f m‚ÇÇ` is controlled in terms of `‚à•f‚à•` and `‚à•m‚ÇÅ - m‚ÇÇ‚à•`, precise version.
For a less precise but more usable version, see `norm_image_sub_le_of_bound`. -/
lemma norm_image_sub_le_of_bound' (m‚ÇÅ m‚ÇÇ : Œ†i, E‚ÇÅ i) :
  ‚à•f m‚ÇÅ - f m‚ÇÇ‚à• ‚â§
  ‚à•f‚à• * univ.sum (Œªi, univ.prod (Œªj, if j = i then ‚à•m‚ÇÅ i - m‚ÇÇ i‚à• else max ‚à•m‚ÇÅ j‚à• ‚à•m‚ÇÇ j‚à•)) :=
f.to_multilinear_map.norm_image_sub_le_of_bound' (norm_nonneg _) f.le_op_norm _ _

/-- The difference `f m‚ÇÅ - f m‚ÇÇ` is controlled in terms of `‚à•f‚à•` and `‚à•m‚ÇÅ - m‚ÇÇ‚à•`, less precise
version. For a more precise but less usable version, see `norm_image_sub_le_of_bound'`. -/
lemma norm_image_sub_le_of_bound (m‚ÇÅ m‚ÇÇ : Œ†i, E‚ÇÅ i) :
  ‚à•f m‚ÇÅ - f m‚ÇÇ‚à• ‚â§ ‚à•f‚à• * (fintype.card Œπ) * (max ‚à•m‚ÇÅ‚à• ‚à•m‚ÇÇ‚à•) ^ (fintype.card Œπ - 1) * ‚à•m‚ÇÅ - m‚ÇÇ‚à• :=
f.to_multilinear_map.norm_image_sub_le_of_bound (norm_nonneg _) f.le_op_norm _ _

end continuous_multilinear_map

lemma multilinear_map.mk_continuous_norm_le (f : multilinear_map ùïú E‚ÇÅ E‚ÇÇ) {C : ‚Ñù} (hC : 0 ‚â§ C)
  (H : ‚àÄ m, ‚à•f m‚à• ‚â§ C * univ.prod (Œªi, ‚à•m i‚à•)) :
  ‚à•f.mk_continuous C H‚à• ‚â§ C :=
continuous_multilinear_map.op_norm_le_bound _ hC (Œªm, H m)

section isomorphisms

set_option class.instance_max_depth 200
open fin function

lemma continuous_linear_map.norm_image_tail_le
  (f : E 0 ‚ÜíL[ùïú] (continuous_multilinear_map ùïú (Œª(i : fin n), E i.succ) E‚ÇÇ)) (m : Œ†i, E i) :
  ‚à•f (m 0) (tail m)‚à• ‚â§ ‚à•f‚à• * univ.prod (Œªi, ‚à•m i‚à•) :=
calc
  ‚à•f (m 0) (tail m)‚à• ‚â§ ‚à•f (m 0)‚à• * univ.prod (Œªi, ‚à•(tail m) i‚à•) : (f (m 0)).le_op_norm _
  ... ‚â§ (‚à•f‚à• * ‚à•m 0‚à•) * univ.prod (Œªi, ‚à•(tail m) i‚à•) :
    mul_le_mul_of_nonneg_right (f.le_op_norm _) (prod_nonneg (Œªi hi, norm_nonneg _))
  ... = ‚à•f‚à• * (‚à•m 0‚à• * univ.prod (Œªi, ‚à•(tail m) i‚à•)) : by ring
  ... = ‚à•f‚à• * univ.prod (Œªi, ‚à•m i‚à•) : by { rw prod_univ_succ, refl }

lemma continuous_multilinear_map.norm_image_cons_le
  (f : continuous_multilinear_map ùïú E E‚ÇÇ) (x : E 0) (m : Œ†(i : fin n), E i.succ) :
  ‚à•f (cons x m)‚à• ‚â§ ‚à•f‚à• * ‚à•x‚à• * univ.prod (Œªi, ‚à•m i‚à•) :=
calc
  ‚à•f (cons x m)‚à• ‚â§ ‚à•f‚à• * univ.prod (Œª(i : fin n.succ), ‚à•cons x m i‚à•) : f.le_op_norm _
  ... = (‚à•f‚à• * ‚à•x‚à•) * univ.prod (Œªi, ‚à•m i‚à•) :
    by { rw prod_univ_succ, simp [mul_assoc] }

/-- Given a continuous linear map `f` from `E 0` to continuous multilinear maps on `n` variables,
construct the corresponding continuous multilinear map on `n+1` variables obtained by concatenating
the variables, given by `f (m 0) (tail m)`-/
def continuous_linear_map.merge_variables
  (f : E 0 ‚ÜíL[ùïú] (continuous_multilinear_map ùïú (Œª(i : fin n), E i.succ) E‚ÇÇ)) :
  continuous_multilinear_map ùïú E E‚ÇÇ :=
(linear_to_multilinear_equiv_multilinear ùïú E E‚ÇÇ
    (continuous_multilinear_map.to_multilinear_map_linear.comp f.to_linear_map)).mk_continuous
      (‚à•f‚à•) (Œªm, continuous_linear_map.norm_image_tail_le f m)

@[simp] lemma continuous_linear_map.merge_variables_apply
  (f : E 0 ‚ÜíL[ùïú] (continuous_multilinear_map ùïú (Œª(i : fin n), E i.succ) E‚ÇÇ))
  (m : Œ†i, E i) :
  f.merge_variables m = f (m 0) (tail m) := rfl

/-- Given a continuous multilinear map `f` in `n+1` variables, split the first variable to obtain
a continuous linear map into continuous multilinear maps in `n` variables, given by `f (cons x m)`.
-/
def continuous_multilinear_map.split_variables
  (f : continuous_multilinear_map ùïú E E‚ÇÇ) :
  E 0 ‚ÜíL[ùïú] (continuous_multilinear_map ùïú (Œª(i : fin n), E i.succ) E‚ÇÇ) :=
linear_map.mk_continuous
{ -- define a linear map into `n` continuous multilinear maps from an `n+1` continuous multilinear map
  to_fun := Œªx,
    ((linear_to_multilinear_equiv_multilinear ùïú E E‚ÇÇ).symm
      f.to_multilinear_map x).mk_continuous (‚à•f‚à• * ‚à•x‚à•) (f.norm_image_cons_le x),
  add    := Œªx y, by { ext m, exact f.cons_add m x y },
  smul   := Œªc x, by { ext m, exact f.cons_smul m c x } }
  -- then register its continuity thanks to its boundedness properties.
(‚à•f‚à•) (Œªx, multilinear_map.mk_continuous_norm_le _ (mul_nonneg' (norm_nonneg _) (norm_nonneg _)) _)

@[simp] lemma continuous_multilinear_map.split_variables_apply
  (f : continuous_multilinear_map ùïú E E‚ÇÇ) (x : E 0) (m : Œ†(i : fin n), E i.succ) :
  f.split_variables x m = f (cons x m) := rfl

lemma continuous_multilinear_map.split_variables_norm_aux (f : continuous_multilinear_map ùïú E E‚ÇÇ) :
  ‚à•f.split_variables‚à• ‚â§ ‚à•f‚à• :=
begin
  apply linear_map.mk_continuous_norm_le,
end

lemma continuous_linear_map.merge_variables_norm_aux
  (f : E 0 ‚ÜíL[ùïú] (continuous_multilinear_map ùïú (Œª(i : fin n), E i.succ) E‚ÇÇ)) :
  ‚à•f.merge_variables‚à• ‚â§ ‚à•f‚à• :=
multilinear_map.mk_continuous_norm_le _ (norm_nonneg _) _,

#exit

@[simp] lemma continuous_linear_map.split_variables_merge_variables
  (f : E 0 ‚ÜíL[ùïú] (continuous_multilinear_map ùïú (Œª(i : fin n), E i.succ) E‚ÇÇ)) :
  f.merge_variables.split_variables = f :=
begin
  ext m x,
  simp only [tail_cons, continuous_linear_map.merge_variables_apply, continuous_multilinear_map.split_variables_apply],
  rw cons_zero
end

@[simp] lemma continuous_multilinear_map.merge_variables_split_variables
  (f : continuous_multilinear_map ùïú E E‚ÇÇ) :
  f.split_variables.merge_variables = f :=
by { ext m, simp }

variables (ùïú E E‚ÇÇ)

/-- The space of continuous multilinear maps on `Œ†(i : fin (n+1)), E i` is canonically isomorphic to
the space of continuous linear maps from `E 0` to the space of continuous multilinear maps on
`Œ†(i : fin n), E i.succ `, by separating the first variable. We register this isomorphism as a
linear isomorphism in `linear_to_multilinear_equiv_multilinear_cont_aux ùïú E E‚ÇÇ`.
The algebraic version (without continuity assumption on the maps) is
`linear_to_multilinear_equiv_multilinear ùïú E E‚ÇÇ`, and the topological isomorphism (registering
additionally that the isomorphism is continuous) is
`linear_to_multilinear_equiv_multilinear_cont ùïú E E‚ÇÇ`.-/
def linear_to_multilinear_equiv_multilinear_cont_aux :
  (E 0 ‚ÜíL[ùïú] (continuous_multilinear_map ùïú (Œª(i : fin n), E i.succ) E‚ÇÇ)) ‚âÉ‚Çó[ùïú]
  (continuous_multilinear_map ùïú E E‚ÇÇ) :=
{ to_fun  := continuous_linear_map.merge_variables,
  add     := Œªf‚ÇÅ f‚ÇÇ, by { ext m, refl },
  smul    := Œªc f, by { ext m, refl },
  inv_fun := continuous_multilinear_map.split_variables,
  left_inv := continuous_linear_map.split_variables_merge_variables,
  right_inv := continuous_multilinear_map.merge_variables_split_variables }

/-- The space of continuous multilinear maps on `Œ†(i : fin (n+1)), E i` is canonically isomorphic to
the space of continuous linear maps from `E 0` to the space of continuous multilinear maps on
`Œ†(i : fin n), E i.succ `, by separating the first variable. We register this isomorphism in
`linear_to_multilinear_equiv_multilinear_cont ùïú E E‚ÇÇ`. We build on the algebraic version (without
topology) given in `linear_to_multilinear_equiv_multilinear ùïú E E‚ÇÇ`. -/
def linear_to_multilinear_equiv_multilinear_cont :
  (E 0 ‚ÜíL[ùïú] (continuous_multilinear_map ùïú (Œª(i : fin n), E i.succ) E‚ÇÇ)) ‚âÉL[ùïú]
  (continuous_multilinear_map ùïú E E‚ÇÇ) :=
{ continuous_to_fun := begin
    refine (linear_to_multilinear_equiv_multilinear_cont_aux ùïú E E‚ÇÇ).to_linear_map.continuous_of_bound (1 : ‚Ñù) (Œªf, _),
    rw one_mul,
    apply continuous_multilinear_map.op_norm_le_bound _ (norm_nonneg _) (Œªm, _),
    apply continuous_multilinear_map.norm_image_tail_le f
  end,
  continuous_inv_fun := begin
    refine (linear_to_multilinear_equiv_multilinear_cont_aux ùïú E E‚ÇÇ).symm.to_linear_map.continuous_of_bound (1 : ‚Ñù) (Œªf, _),
    rw one_mul,
    apply continuous_linear_map.op_norm_le_bound _ (norm_nonneg _ ) (Œªx, _),
    apply continuous_multilinear_map.op_norm_le_bound _
      ((mul_nonneg' (norm_nonneg _) (norm_nonneg _))) (Œªm, _),
    exact f.norm_image_cons_le x m
  end,
  .. linear_to_multilinear_equiv_multilinear_cont_aux ùïú E E‚ÇÇ }

end isomorphisms
