/-
Copyright (c) 2022 Jireh Loreaux. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jireh Loreaux
-/
import analysis.normed_space.lp_space
import analysis.normed_space.pi_Lp
import topology.continuous_function.bounded

/-!
# Equivalences among $$L^p$$ spaces

In this file we collect a variety of equivalences among various $$L^p$$ spaces.  In particular,
when `Œ±` is a `fintype`, given `E : Œ± ‚Üí Type u` and `p : ‚Ñù‚â•0‚àû`, there is a natural linear isometric
equivalence `lp_pi_Lp‚Çó·µ¢ : lp E p ‚âÉ‚Çó·µ¢ pi_Lp p E`.

We keep this as a separate file so that the various $$L^p$$ space files don't import the others.

## TODO

* Equivalence between `lp` and `measure_theory.Lp`, for `f : Œ± ‚Üí E` (i.e., functions rather than
  pi-types) and the counting measure on `Œ±`

-/

open_locale ennreal

section lp_pi_Lp

variables {Œ± : Type*} {E : Œ± ‚Üí Type*} [Œ† i, normed_add_comm_group (E i)] (p : ‚Ñù‚â•0‚àû)
/-- When `Œ±` is `finite`, every `f : pre_lp E p` satisfies `mem_‚Ñìp f p`. -/
lemma mem_‚Ñìp.all [finite Œ±] (f : Œ† i, E i) : mem_‚Ñìp f p :=
begin
  rcases p.trichotomy with (rfl | rfl | h),
  { exact mem_‚Ñìp_zero_iff.mpr {i : Œ± | f i ‚â† 0}.to_finite, },
  { exact mem_‚Ñìp_infty_iff.mpr (set.finite.bdd_above (set.range (Œª (i : Œ±), ‚à•f i‚à•)).to_finite) },
  { casesI nonempty_fintype Œ±, exact mem_‚Ñìp_gen ‚ü®finset.univ.sum _, has_sum_fintype _‚ü© }
end

variables [fintype Œ±]

/-- The canonical `equiv` between `lp E p ‚âÉ pi_Lp p E` when `E : Œ± ‚Üí Type u` with `[fintype Œ±]`. -/
def equiv.lp_pi_Lp : lp E p ‚âÉ pi_Lp p E :=
{ to_fun := Œª f, f,
  inv_fun := Œª f, ‚ü®f, mem_‚Ñìp.all p f‚ü©,
  left_inv := Œª f, lp.ext $ funext $ Œª x, rfl,
  right_inv := Œª f, funext $ Œª x, rfl }

lemma equiv_lp_pi_Lp_norm (f : lp E p) : ‚à•equiv.lp_pi_Lp p f‚à• = ‚à•f‚à• :=
begin
  unfreezingI { rcases p.trichotomy with (rfl | rfl | h) },
  { rw [pi_Lp.norm_eq_card, lp.norm_eq_card_dsupport], refl },
  { rw [pi_Lp.norm_eq_csupr, lp.norm_eq_csupr], refl },
  { rw [pi_Lp.norm_eq_sum h, lp.norm_eq_tsum_rpow h, tsum_fintype], refl },
end

/-- The canonical `add_equiv` between `lp E p` and `pi_Lp p E` when `E : Œ± ‚Üí Type u` with
`[fintype Œ±]` and `[fact (1 ‚â§ p)]`. -/
def add_equiv.lp_pi_Lp [fact (1 ‚â§ p)] : lp E p ‚âÉ+ pi_Lp p E :=
{ map_add' := Œª f g, rfl,
  .. (equiv.lp_pi_Lp p) }

section equiv‚Çó·µ¢
variables {ùïú : Type*} [nontrivially_normed_field ùïú] [Œ† i, normed_space ùïú (E i)]

/-- The canonical `add_equiv` between `lp E p` and `pi_Lp p E` when `E : Œ± ‚Üí Type u` with
`[fintype Œ±]` and `[fact (1 ‚â§ p)]`. -/
noncomputable def lp_pi_Lp‚Çó·µ¢ [fact (1 ‚â§ p)] : lp E p ‚âÉ‚Çó·µ¢[ùïú] pi_Lp p E :=
{ map_smul' := Œª k f, rfl,
  norm_map' := equiv_lp_pi_Lp_norm p,
  .. (add_equiv.lp_pi_Lp p) }

end equiv‚Çó·µ¢

end lp_pi_Lp

section lp_bcf

open_locale bounded_continuous_function
open bounded_continuous_function

variables (Œ± E ùïú : Type*) [topological_space Œ±] [discrete_topology Œ±]

/-- The canonical map between `lp (Œª (_ : Œ±), E) ‚àû` and `Œ± ‚Üí·µá E` as an `add_equiv`. -/
noncomputable def add_equiv.lp_bcf [normed_add_comm_group E] :
  lp (Œª (_ : Œ±), E) ‚àû ‚âÉ+ (Œ± ‚Üí·µá E) :=
{ to_fun := Œª f, of_normed_add_comm_group_discrete f (‚à•f‚à•) $ le_csupr (mem_‚Ñìp_infty_iff.mp f.prop),
  inv_fun := Œª f, ‚ü®f, f.bdd_above_range_norm_comp‚ü©,
  left_inv := Œª f, lp.ext rfl,
  right_inv := Œª f, ext $ Œª x, rfl,
  map_add' := Œª f g, ext $ Œª x, rfl }

/-- The canonical map between `lp (Œª (_ : Œ±), E) ‚àû` and `Œ± ‚Üí·µá E` as a `linear_isometry_equiv`. -/
noncomputable def equiv‚Çó·µ¢.lp_bcf [normed_add_comm_group E] [nontrivially_normed_field ùïú]
  [normed_space ùïú E] : lp (Œª (_ : Œ±), E) ‚àû ‚âÉ‚Çó·µ¢[ùïú] (Œ± ‚Üí·µá E) :=
{ map_smul' := Œª k f, rfl,
  norm_map' := Œª f, by { simp only [norm_eq_supr_norm, lp.norm_eq_csupr], refl },
  .. add_equiv.lp_bcf Œ± E }

/-- The canonical map between `lp (Œª (_ : Œ±), E) ‚àû` and `Œ± ‚Üí·µá E` as a `ring_equiv`. -/
noncomputable def ring_equiv.lp_bcf [non_unital_normed_ring E] :
  lp (Œª (_ : Œ±), E) ‚àû ‚âÉ+* (Œ± ‚Üí·µá E) :=
{ map_mul' := Œª f g, ext $ Œª x, rfl, .. add_equiv.lp_bcf Œ± E }

-- the `norm_one_class E` shouldn't really be necessary, but currently it is for
-- `one_mem_‚Ñìp_infty` to get the `ring` instance on `lp`.
/-- The canonical map between `lp (Œª (_ : Œ±), E) ‚àû` and `Œ± ‚Üí·µá E` as an `alg_equiv`. -/
noncomputable def alg_equiv.lp_bcf [normed_ring E] [norm_one_class E] [nontrivially_normed_field ùïú]
  [normed_algebra ùïú E] :
  lp (Œª (_ : Œ±), E) ‚àû ‚âÉ‚Çê[ùïú] (Œ± ‚Üí·µá E) :=
{ commutes' := Œª k, rfl, .. ring_equiv.lp_bcf Œ± E }

end lp_bcf
