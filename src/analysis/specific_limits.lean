/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl

A collection of specific limit computations.
-/
import analysis.normed_space.basic algebra.geom_sum
import topology.instances.ennreal

noncomputable theory
open_locale classical topological_space

open classical function lattice filter finset metric

variables {Œ± : Type*} {Œ≤ : Type*} {Œπ : Type*}

/-- If a function tends to infinity along a filter, then this function multiplied by a positive
constant (on the left) also tends to infinity. The archimedean assumption is convenient to get a
statement that works on `‚Ñï`, `‚Ñ§` and `‚Ñù`, although not necessary (a version in ordered fields is
given in `tendsto_at_top_mul_left'`). -/
lemma tendsto_at_top_mul_left [decidable_linear_ordered_semiring Œ±] [archimedean Œ±]
  {l : filter Œ≤} {r : Œ±} (hr : 0 < r) {f : Œ≤ ‚Üí Œ±} (hf : tendsto f l at_top) :
  tendsto (Œªx, r * f x) l at_top :=
begin
  apply (tendsto_at_top _ _).2 (Œªb, _),
  obtain ‚ü®n, hn‚ü© : ‚àÉ (n : ‚Ñï), (1 : Œ±) ‚â§ n ‚Ä¢ r := archimedean.arch 1 hr,
  have hn' : 1 ‚â§ r * n, by rwa add_monoid.smul_eq_mul' at hn,
  filter_upwards [(tendsto_at_top _ _).1 hf (n * max b 0)],
  assume x hx,
  calc b ‚â§ 1 * max b 0 : by { rw [one_mul], exact le_max_left _ _ }
  ... ‚â§ (r * n) * max b 0 : mul_le_mul_of_nonneg_right hn' (le_max_right _ _)
  ... = r * (n * max b 0) : by rw [mul_assoc]
  ... ‚â§ r * f x : mul_le_mul_of_nonneg_left hx (le_of_lt hr)
end

/-- If a function tends to infinity along a filter, then this function multiplied by a positive
constant (on the right) also tends to infinity. The archimedean assumption is convenient to get a
statement that works on `‚Ñï`, `‚Ñ§` and `‚Ñù`, although not necessary (a version in ordered fields is
given in `tendsto_at_top_mul_right'`). -/
lemma tendsto_at_top_mul_right [decidable_linear_ordered_semiring Œ±] [archimedean Œ±]
  {l : filter Œ≤} {r : Œ±} (hr : 0 < r) {f : Œ≤ ‚Üí Œ±} (hf : tendsto f l at_top) :
  tendsto (Œªx, f x * r) l at_top :=
begin
  apply (tendsto_at_top _ _).2 (Œªb, _),
  obtain ‚ü®n, hn‚ü© : ‚àÉ (n : ‚Ñï), (1 : Œ±) ‚â§ n ‚Ä¢ r := archimedean.arch 1 hr,
  have hn' : 1 ‚â§ (n : Œ±) * r, by rwa add_monoid.smul_eq_mul at hn,
  filter_upwards [(tendsto_at_top _ _).1 hf (max b 0 * n)],
  assume x hx,
  calc b ‚â§ max b 0 * 1 : by { rw [mul_one], exact le_max_left _ _ }
  ... ‚â§ max b 0 * (n * r) : mul_le_mul_of_nonneg_left hn' (le_max_right _ _)
  ... = (max b 0 * n) * r : by rw [mul_assoc]
  ... ‚â§ f x * r : mul_le_mul_of_nonneg_right hx (le_of_lt hr)
end

/-- If a function tends to infinity along a filter, then this function multiplied by a positive
constant (on the left) also tends to infinity. For a version working in `‚Ñï` or `‚Ñ§`, use
`tendsto_at_top_mul_left` instead. -/
lemma tendsto_at_top_mul_left' [linear_ordered_field Œ±]
  {l : filter Œ≤} {r : Œ±} (hr : 0 < r) {f : Œ≤ ‚Üí Œ±} (hf : tendsto f l at_top) :
  tendsto (Œªx, r * f x) l at_top :=
begin
  apply (tendsto_at_top _ _).2 (Œªb, _),
  filter_upwards [(tendsto_at_top _ _).1 hf (b/r)],
  assume x hx,
  simpa [div_le_iff' hr] using hx
end

/-- If a function tends to infinity along a filter, then this function multiplied by a positive
constant (on the right) also tends to infinity. For a version working in `‚Ñï` or `‚Ñ§`, use
`tendsto_at_top_mul_right` instead. -/
lemma tendsto_at_top_mul_right' [linear_ordered_field Œ±]
  {l : filter Œ≤} {r : Œ±} (hr : 0 < r) {f : Œ≤ ‚Üí Œ±} (hf : tendsto f l at_top) :
  tendsto (Œªx, f x * r) l at_top :=
by simpa [mul_comm] using tendsto_at_top_mul_left' hr hf

/-- If a function tends to infinity along a filter, then this function divided by a positive
constant also tends to infinity. -/
lemma tendsto_at_top_div [linear_ordered_field Œ±]
  {l : filter Œ≤} {r : Œ±} (hr : 0 < r) {f : Œ≤ ‚Üí Œ±} (hf : tendsto f l at_top) :
  tendsto (Œªx, f x / r) l at_top :=
tendsto_at_top_mul_right' (inv_pos hr) hf

lemma summable_of_absolute_convergence_real {f : ‚Ñï ‚Üí ‚Ñù} :
  (‚àÉr, tendsto (Œªn, (range n).sum (Œªi, abs (f i))) at_top (ùìù r)) ‚Üí summable f
| ‚ü®r, hr‚ü© :=
  begin
    refine summable_of_summable_norm ‚ü®r, (has_sum_iff_tendsto_nat_of_nonneg _ _).2 _‚ü©,
    exact assume i, norm_nonneg _,
    simpa only using hr
  end

lemma tendsto_pow_at_top_at_top_of_gt_1 {r : ‚Ñù} (h : 1 < r) :
  tendsto (Œªn:‚Ñï, r ^ n) at_top at_top :=
(tendsto_at_top_at_top _).2 $ assume p,
  let ‚ü®n, hn‚ü© := pow_unbounded_of_one_lt p h in
  ‚ü®n, Œª m hnm, le_of_lt $
    lt_of_lt_of_le hn (pow_le_pow (le_of_lt h) hnm)‚ü©

lemma tendsto_inverse_at_top_nhds_0 : tendsto (Œªr:‚Ñù, r‚Åª¬π) at_top (ùìù 0) :=
tendsto_orderable_unbounded (no_top 0) (no_bot 0) $ assume l u hl hu,
  mem_at_top_sets.mpr ‚ü®u‚Åª¬π + 1, assume b hb,
    have u‚Åª¬π < b, from lt_of_lt_of_le (lt_add_of_pos_right _ zero_lt_one) hb,
    ‚ü®lt_trans hl $ inv_pos $ lt_trans (inv_pos hu) this,
    lt_of_one_div_lt_one_div hu $
    begin
      rw [inv_eq_one_div],
      simp [-one_div_eq_inv, div_div_eq_mul_div, div_one],
      simp [this]
    end‚ü©‚ü©

lemma tendsto_pow_at_top_nhds_0_of_lt_1 {r : ‚Ñù} (h‚ÇÅ : 0 ‚â§ r) (h‚ÇÇ : r < 1) :
  tendsto (Œªn:‚Ñï, r^n) at_top (ùìù 0) :=
by_cases
  (assume : r = 0, (tendsto_add_at_top_iff_nat 1).mp $ by simp [pow_succ, this, tendsto_const_nhds])
  (assume : r ‚â† 0,
    have tendsto (Œªn, (r‚Åª¬π ^ n)‚Åª¬π) at_top (ùìù 0),
      from tendsto.comp tendsto_inverse_at_top_nhds_0
        (tendsto_pow_at_top_at_top_of_gt_1 $ one_lt_inv (lt_of_le_of_ne h‚ÇÅ this.symm) h‚ÇÇ),
    tendsto.congr' (univ_mem_sets' $ by simp *) this)

lemma tendsto_pow_at_top_nhds_0_of_lt_1_normed_field {K : Type*} [normed_field K] {Œæ : K}
  (_ : ‚à•Œæ‚à• < 1) : tendsto (Œª n : ‚Ñï, Œæ^n) at_top (ùìù 0) :=
begin
  rw[tendsto_iff_norm_tendsto_zero],
  convert tendsto_pow_at_top_nhds_0_of_lt_1 (norm_nonneg Œæ) ‚Äπ‚à•Œæ‚à• < 1‚Ä∫,
  ext n,
  simp
end

lemma tendsto_pow_at_top_at_top_of_gt_1_nat {k : ‚Ñï} (h : 1 < k) :
  tendsto (Œªn:‚Ñï, k ^ n) at_top at_top :=
tendsto_coe_nat_real_at_top_iff.1 $
  have hr : 1 < (k : ‚Ñù), by rw [‚Üê nat.cast_one, nat.cast_lt]; exact h,
  by simpa using tendsto_pow_at_top_at_top_of_gt_1 hr

lemma tendsto_inverse_at_top_nhds_0_nat : tendsto (Œª n : ‚Ñï, (n : ‚Ñù)‚Åª¬π) at_top (ùìù 0) :=
tendsto.comp tendsto_inverse_at_top_nhds_0 (tendsto_coe_nat_real_at_top_iff.2 tendsto_id)

lemma tendsto_const_div_at_top_nhds_0_nat (C : ‚Ñù) : tendsto (Œª n : ‚Ñï, C / n) at_top (ùìù 0) :=
by simpa only [mul_zero] using tendsto_mul tendsto_const_nhds tendsto_inverse_at_top_nhds_0_nat

lemma tendsto_one_div_add_at_top_nhds_0_nat :
  tendsto (Œª n : ‚Ñï, 1 / ((n : ‚Ñù) + 1)) at_top (ùìù 0) :=
suffices tendsto (Œª n : ‚Ñï, 1 / (‚Üë(n + 1) : ‚Ñù)) at_top (ùìù 0), by simpa,
(tendsto_add_at_top_iff_nat 1).2 (tendsto_const_div_at_top_nhds_0_nat 1)

lemma has_sum_geometric {r : ‚Ñù} (h‚ÇÅ : 0 ‚â§ r) (h‚ÇÇ : r < 1) :
  has_sum (Œªn:‚Ñï, r ^ n) (1 / (1 - r)) :=
have r ‚â† 1, from ne_of_lt h‚ÇÇ,
have r + -1 ‚â† 0,
  by rw [‚Üêsub_eq_add_neg, ne, sub_eq_iff_eq_add]; simp; assumption,
have tendsto (Œªn, (r ^ n - 1) * (r - 1)‚Åª¬π) at_top (ùìù ((0 - 1) * (r - 1)‚Åª¬π)),
  from tendsto_mul
    (tendsto_sub (tendsto_pow_at_top_nhds_0_of_lt_1 h‚ÇÅ h‚ÇÇ) tendsto_const_nhds) tendsto_const_nhds,
have (Œª n, (range n).sum (Œª i, r ^ i)) = (Œª n, geom_series r n) := rfl,
(has_sum_iff_tendsto_nat_of_nonneg (pow_nonneg h‚ÇÅ) _).mpr $
  by simp [neg_inv, geom_sum, div_eq_mul_inv, *] at *

lemma summable_geometric {r : ‚Ñù} (h‚ÇÅ : 0 ‚â§ r) (h‚ÇÇ : r < 1) : summable (Œªn:‚Ñï, r ^ n) :=
‚ü®_, has_sum_geometric h‚ÇÅ h‚ÇÇ‚ü©

lemma tsum_geometric {r : ‚Ñù} (h‚ÇÅ : 0 ‚â§ r) (h‚ÇÇ : r < 1) : (‚àën:‚Ñï, r ^ n) = 1 / (1 - r) :=
tsum_eq_has_sum (has_sum_geometric h‚ÇÅ h‚ÇÇ)

lemma has_sum_geometric_two : has_sum (Œªn:‚Ñï, ((1:‚Ñù)/2) ^ n) 2 :=
by convert has_sum_geometric _ _; norm_num

lemma summable_geometric_two : summable (Œªn:‚Ñï, ((1:‚Ñù)/2) ^ n) :=
‚ü®_, has_sum_geometric_two‚ü©

lemma tsum_geometric_two : (‚àën:‚Ñï, ((1:‚Ñù)/2) ^ n) = 2 :=
tsum_eq_has_sum has_sum_geometric_two

lemma has_sum_geometric_two' (a : ‚Ñù) : has_sum (Œªn:‚Ñï, (a / 2) / 2 ^ n) a :=
begin
  convert has_sum_mul_left (a / 2) (has_sum_geometric
    (le_of_lt one_half_pos) one_half_lt_one),
  { funext n, simp,
    rw ‚Üê pow_inv; [refl, exact two_ne_zero] },
  { norm_num, rw div_mul_cancel _ two_ne_zero }
end

lemma summable_geometric_two' (a : ‚Ñù) : summable (Œª n:‚Ñï, (a / 2) / 2 ^ n) :=
‚ü®a, has_sum_geometric_two' a‚ü©

lemma tsum_geometric_two' (a : ‚Ñù) : (‚àë n:‚Ñï, (a / 2) / 2^n) = a :=
tsum_eq_has_sum $ has_sum_geometric_two' a

/-- For any positive `Œµ`, define on an encodable type a positive sequence with sum less than `Œµ` -/
def pos_sum_of_encodable {Œµ : ‚Ñù} (hŒµ : 0 < Œµ)
  (Œπ) [encodable Œπ] : {Œµ' : Œπ ‚Üí ‚Ñù // (‚àÄ i, 0 < Œµ' i) ‚àß ‚àÉ c, has_sum Œµ' c ‚àß c ‚â§ Œµ} :=
begin
  let f := Œª n, (Œµ / 2) / 2 ^ n,
  have hf : has_sum f Œµ := has_sum_geometric_two' _,
  have f0 : ‚àÄ n, 0 < f n := Œª n, div_pos (half_pos hŒµ) (pow_pos two_pos _),
  refine ‚ü®f ‚àò encodable.encode, Œª i, f0 _, _‚ü©,
  rcases summable_comp_of_summable_of_injective f (summable_spec hf) (@encodable.encode_injective Œπ _)
    with ‚ü®c, hg‚ü©,
  refine ‚ü®c, hg, has_sum_le_inj _ (@encodable.encode_injective Œπ _) _ _ hg hf‚ü©,
  { assume i _, exact le_of_lt (f0 _) },
  { assume n, exact le_refl _ }
end

lemma cauchy_seq_of_le_geometric [metric_space Œ±] (r C : ‚Ñù) (hr : r < 1) {f : ‚Ñï ‚Üí Œ±}
  (hu : ‚àÄn, dist (f n) (f (n+1)) ‚â§ C * r^n) : cauchy_seq f :=
begin
  refine cauchy_seq_of_summable_dist (summable_of_norm_bounded (Œªn, C * r^n) _ _),
  { by_cases h : C = 0,
    { simp [h, summable_zero] },
    { have Cpos : C > 0,
      { have := le_trans dist_nonneg (hu 0),
        simp only [mul_one, pow_zero] at this,
        exact lt_of_le_of_ne this (ne.symm h) },
      have rnonneg: r ‚â• 0,
      { have := le_trans dist_nonneg (hu 1),
        simp only [pow_one] at this,
        exact nonneg_of_mul_nonneg_left this Cpos },
      refine summable_mul_left C _,
      exact summable_spec (@has_sum_geometric r rnonneg hr) }},
  show ‚àÄn, abs (dist (f n) (f (n+1))) ‚â§ C * r^n,
  { assume n, rw abs_of_nonneg (dist_nonneg), exact hu n }
end

namespace nnreal

theorem exists_pos_sum_of_encodable {Œµ : nnreal} (hŒµ : 0 < Œµ) (Œπ) [encodable Œπ] :
  ‚àÉ Œµ' : Œπ ‚Üí nnreal, (‚àÄ i, 0 < Œµ' i) ‚àß ‚àÉc, has_sum Œµ' c ‚àß c < Œµ :=
let ‚ü®a, a0, aŒµ‚ü© := dense hŒµ in
let ‚ü®Œµ', hŒµ', c, hc, hcŒµ‚ü© := pos_sum_of_encodable a0 Œπ in
‚ü® Œªi, ‚ü®Œµ' i, le_of_lt $ hŒµ' i‚ü©, assume i, nnreal.coe_lt.2 $ hŒµ' i,
  ‚ü®c, has_sum_le (assume i, le_of_lt $ hŒµ' i) has_sum_zero hc ‚ü©, nnreal.has_sum_coe.1 hc,
   lt_of_le_of_lt (nnreal.coe_le.1 hcŒµ) aŒµ ‚ü©

end nnreal

namespace ennreal

theorem exists_pos_sum_of_encodable {Œµ : ennreal} (hŒµ : 0 < Œµ) (Œπ) [encodable Œπ] :
  ‚àÉ Œµ' : Œπ ‚Üí nnreal, (‚àÄ i, 0 < Œµ' i) ‚àß (‚àë i, (Œµ' i : ennreal)) < Œµ :=
begin
  rcases dense hŒµ with ‚ü®r, h0r, hrŒµ‚ü©,
  rcases lt_iff_exists_coe.1 hrŒµ with ‚ü®x, rfl, hx‚ü©,
  rcases nnreal.exists_pos_sum_of_encodable (coe_lt_coe.1 h0r) Œπ with ‚ü®Œµ', hp, c, hc, hcr‚ü©,
  exact ‚ü®Œµ', hp, (ennreal.tsum_coe_eq hc).symm ‚ñ∏ lt_trans (coe_lt_coe.2 hcr) hrŒµ‚ü©
end

end ennreal
