/-
Copyright (c) 2019 Jean Lo. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jean Lo, Bhavik Mehta
-/
import analysis.convex.basic
import analysis.normed_space.basic
import data.real.pointwise
import data.set.intervals

/-!
# Seminorms and Local Convexity

This file introduces the following notions, defined for a vector space
over a normed field:
* `absorbent`: A set `s` is absorbent if every point eventually belongs to all large scalings of
  `s`.
* `balanced`: A set `s` is balanced if `a ‚Ä¢ s ‚äÜ s` for all `a` of norm less than `1`.
* `seminorm`: A function to the reals that is positive-semidefinite, absolutely homogeneous, and
  subadditive.
* `gauge`: Aka Minkowksi functional. `gauge s x` is the smallest (actually, an infimum) `Œ∏` such
  that `x ‚àà Œ∏ ‚Ä¢ s`.
* `gauge_seminorm`: The Minkowski functional as a seminorm, when `s` is symmetric, convex and
  absorbent.

We prove related properties.

## References

* [H. H. Schaefer, *Topological Vector Spaces*][schaefer1966]

## TODO

Define and show equivalence of two notions of local convexity for a
topological vector space over ‚Ñù or ‚ÑÇ: that it has a local base of
balanced convex absorbent sets, and that it carries the initial
topology induced by a family of seminorms.

Prove the properties of balanced and absorbent sets of a real vector space.

## Tags

absorbent, balanced, seminorm, Minkowski functional, gauge, locally convex, LCTVS
-/

/-!
### Set Properties

Absorbent and balanced sets in a vector space over a
nondiscrete normed field.
-/

open normed_field set
open_locale pointwise topological_space

section
variables
(ùïú : Type*) [normed_field ùïú]
{E : Type*} [add_comm_group E] [module ùïú E]

/-- A set `A` absorbs another set `B` if `B` is contained in all scalings of
`A` by elements of sufficiently large norms. -/
def absorbs (A B : set E) := ‚àÉ r, 0 < r ‚àß ‚àÄ a : ùïú, r ‚â§ ‚à•a‚à• ‚Üí B ‚äÜ a ‚Ä¢ A

/-- A set is absorbent if it absorbs every singleton. -/
def absorbent (A : set E) := ‚àÄ x, ‚àÉ r, 0 < r ‚àß ‚àÄ a : ùïú, r ‚â§ ‚à•a‚à• ‚Üí x ‚àà a ‚Ä¢ A

/-- A set `A` is balanced if `a ‚Ä¢ A` is contained in `A` whenever `a`
has norm less than or equal to one. -/
def balanced (A : set E) := ‚àÄ a : ùïú, ‚à•a‚à• ‚â§ 1 ‚Üí a ‚Ä¢ A ‚äÜ A

variables {ùïú} (a : ùïú) {A : set E}

/-- A balanced set absorbs itself. -/
lemma balanced.absorbs_self (hA : balanced ùïú A) : absorbs ùïú A A :=
begin
  use [1, zero_lt_one],
  intros a ha x hx,
  rw mem_smul_set_iff_inv_smul_mem‚ÇÄ,
  { apply hA a‚Åª¬π,
    { rw norm_inv, exact inv_le_one ha },
    { rw mem_smul_set, use [x, hx] }},
  { rw ‚Üênorm_pos_iff, calc 0 < 1 : zero_lt_one ... ‚â§ ‚à•a‚à• : ha, }
end

lemma balanced.univ : balanced ùïú (univ : set E) :=
Œª a ha, subset_univ _

lemma balanced.union {A‚ÇÅ A‚ÇÇ : set E} (hA‚ÇÅ : balanced ùïú A‚ÇÅ) (hA‚ÇÇ : balanced ùïú A‚ÇÇ) :
  balanced ùïú (A‚ÇÅ ‚à™ A‚ÇÇ) :=
begin
  intros a ha t ht,
  rw [smul_set_union] at ht,
  exact ht.imp (Œª x, hA‚ÇÅ _ ha x) (Œª x, hA‚ÇÇ _ ha x),
end

lemma balanced.inter {A‚ÇÅ A‚ÇÇ : set E} (hA‚ÇÅ : balanced ùïú A‚ÇÅ) (hA‚ÇÇ : balanced ùïú A‚ÇÇ) :
  balanced ùïú (A‚ÇÅ ‚à© A‚ÇÇ) :=
begin
  rintro a ha _ ‚ü®x, ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©, rfl‚ü©,
  exact ‚ü®hA‚ÇÅ _ ha ‚ü®_, hx‚ÇÅ, rfl‚ü©, hA‚ÇÇ _ ha ‚ü®_, hx‚ÇÇ, rfl‚ü©‚ü©,
end

lemma balanced.add {A‚ÇÅ A‚ÇÇ : set E} (hA‚ÇÅ : balanced ùïú A‚ÇÅ) (hA‚ÇÇ : balanced ùïú A‚ÇÇ) :
  balanced ùïú (A‚ÇÅ + A‚ÇÇ) :=
begin
  rintro a ha _ ‚ü®_, ‚ü®x, y, hx, hy, rfl‚ü©, rfl‚ü©,
  rw smul_add,
  exact ‚ü®_, _, hA‚ÇÅ _ ha ‚ü®_, hx, rfl‚ü©, hA‚ÇÇ _ ha ‚ü®_, hy, rfl‚ü©, rfl‚ü©,
end

lemma balanced.smul (hA : balanced ùïú A) : balanced ùïú (a ‚Ä¢ A) :=
begin
  rintro b hb _ ‚ü®_, ‚ü®x, hx, rfl‚ü©, rfl‚ü©,
  exact ‚ü®b ‚Ä¢ x, hA _ hb ‚ü®_, hx, rfl‚ü©, smul_comm _ _ _‚ü©,
end

lemma absorbent_iff_forall_absorbs_singleton :
  absorbent ùïú A ‚Üî ‚àÄ x, absorbs ùïú A {x} :=
by simp [absorbs, absorbent]

/-!
Properties of balanced and absorbent sets in a topological vector space:
-/
variables [topological_space E] [has_continuous_smul ùïú E]

/-- Every neighbourhood of the origin is absorbent. -/
lemma absorbent_nhds_zero (hA : A ‚àà ùìù (0 : E)) : absorbent ùïú A :=
begin
  intro x,
  rcases mem_nhds_iff.mp hA with ‚ü®w, hw‚ÇÅ, hw‚ÇÇ, hw‚ÇÉ‚ü©,
  have hc : continuous (Œª t : ùïú, t ‚Ä¢ x), from continuous_id.smul continuous_const,
  rcases metric.is_open_iff.mp (hw‚ÇÇ.preimage hc) 0 (by rwa [mem_preimage, zero_smul])
    with ‚ü®r, hr‚ÇÅ, hr‚ÇÇ‚ü©,
  have hr‚ÇÉ, from inv_pos.mpr (half_pos hr‚ÇÅ),
  use [(r/2)‚Åª¬π, hr‚ÇÉ],
  intros a ha‚ÇÅ,
  have ha‚ÇÇ : 0 < ‚à•a‚à• := hr‚ÇÉ.trans_le ha‚ÇÅ,
  have ha‚ÇÉ : a ‚Åª¬π ‚Ä¢ x ‚àà w,
  { apply hr‚ÇÇ,
    rw [metric.mem_ball, dist_zero_right, norm_inv],
    calc ‚à•a‚à•‚Åª¬π ‚â§ r/2 : (inv_le (half_pos hr‚ÇÅ) ha‚ÇÇ).mp ha‚ÇÅ
    ...       < r : half_lt_self hr‚ÇÅ },
  rw [mem_smul_set_iff_inv_smul_mem‚ÇÄ (norm_pos_iff.mp ha‚ÇÇ)],
  exact hw‚ÇÅ ha‚ÇÉ,
end

/-- The union of `{0}` with the interior of a balanced set
    is balanced. -/
lemma balanced_zero_union_interior (hA : balanced ùïú A) :
  balanced ùïú ({(0 : E)} ‚à™ interior A) :=
begin
  intros a ha, by_cases a = 0,
  { rw [h, zero_smul_set],
    exacts [subset_union_left _ _, ‚ü®0, or.inl rfl‚ü©] },
  { rw [‚Üêimage_smul, image_union],
    apply union_subset_union,
    { rw [image_singleton, smul_zero] },
    { calc a ‚Ä¢ interior A ‚äÜ interior (a ‚Ä¢ A) : (is_open_map_smul‚ÇÄ h).image_interior_subset A
                      ... ‚äÜ interior A       : interior_mono (hA _ ha) } }
end

/-- The interior of a balanced set is balanced if it contains the origin. -/
lemma balanced.interior (hA : balanced ùïú A) (h : (0 : E) ‚àà interior A) :
  balanced ùïú (interior A) :=
begin
  rw ‚Üêsingleton_subset_iff at h,
  rw [‚Üêunion_eq_self_of_subset_left h],
  exact balanced_zero_union_interior hA,
end

/-- The closure of a balanced set is balanced. -/
lemma balanced.closure (hA : balanced ùïú A) : balanced ùïú (closure A) :=
assume a ha,
calc _ ‚äÜ closure (a ‚Ä¢ A) : image_closure_subset_closure_image (continuous_id.const_smul _)
...    ‚äÜ _ : closure_mono (hA _ ha)

end

/-!
### Seminorms
-/

/-- A seminorm on a vector space over a normed field is a function to
the reals that is positive semidefinite, positive homogeneous, and
subadditive. -/
structure seminorm (ùïú : Type*) (E : Type*)
  [normed_field ùïú] [add_comm_group E] [module ùïú E] :=
(to_fun    : E ‚Üí ‚Ñù)
(smul'     : ‚àÄ (a : ùïú) (x : E), to_fun (a ‚Ä¢ x) = ‚à•a‚à• * to_fun x)
(triangle' : ‚àÄ x y : E, to_fun (x + y) ‚â§ to_fun x + to_fun y)

namespace seminorm
variables
{ùïú : Type*} [nondiscrete_normed_field ùïú]
{E : Type*} [add_comm_group E] [module ùïú E]

instance : inhabited (seminorm ùïú E) :=
‚ü®{ to_fun     := Œª _, 0,
   smul'     := Œª _ _, (mul_zero _).symm,
   triangle' := Œª x y, by rw add_zero }‚ü©

instance : has_coe_to_fun (seminorm ùïú E) (Œª _, E ‚Üí ‚Ñù) := ‚ü®Œª p, p.to_fun‚ü©

variables (p : seminorm ùïú E) (c : ùïú) (x y : E) (r : ‚Ñù)

protected lemma smul : p (c ‚Ä¢ x) = ‚à•c‚à• * p x := p.smul' _ _
protected lemma triangle : p (x + y) ‚â§ p x + p y := p.triangle' _ _

@[simp]
protected lemma zero : p 0 = 0 :=
calc p 0 = p ((0 : ùïú) ‚Ä¢ 0) : by rw zero_smul
...      = 0 : by rw [p.smul, norm_zero, zero_mul]

@[simp]
protected lemma neg : p (-x) = p x :=
calc p (-x) = p ((-1 : ùïú) ‚Ä¢ x) : by rw neg_one_smul
...         = p x : by rw [p.smul, norm_neg, norm_one, one_mul]

lemma nonneg : 0 ‚â§ p x :=
have h: 0 ‚â§ 2 * p x, from
calc 0 = p (x + (- x)) : by rw [add_neg_self, p.zero]
...    ‚â§ p x + p (-x)  : p.triangle _ _
...    = 2 * p x : by rw [p.neg, two_mul],
nonneg_of_mul_nonneg_left h zero_lt_two

lemma sub_rev : p (x - y) = p (y - x) :=
by rw [‚Üêneg_sub, p.neg]

/-- The ball of radius `r` at `x` with respect to seminorm `p`
    is the set of elements `y` with `p (y - x) < `r`. -/
def ball (p : seminorm ùïú E) (x : E) (r : ‚Ñù) := { y : E | p (y - x) < r }

lemma mem_ball : y ‚àà ball p x r ‚Üî p (y - x) < r :=
iff.rfl

lemma mem_ball_zero : y ‚àà ball p 0 r ‚Üî p y < r :=
by rw [mem_ball, sub_zero]

lemma ball_zero_eq : ball p 0 r = { y : E | p y < r } :=
set.ext $ Œª x,by { rw mem_ball_zero, exact iff.rfl }

/-- Seminorm-balls at the origin are balanced. -/
lemma balanced_ball_zero : balanced ùïú (ball p 0 r) :=
begin
  rintro a ha x ‚ü®y, hy, hx‚ü©,
  rw [mem_ball_zero, ‚Üêhx, p.smul],
  calc _ ‚â§ p y : mul_le_of_le_one_left (p.nonneg _) ha
  ...    < r   : by rwa mem_ball_zero at hy,
end

-- TODO: convexity and absorbent/balanced sets in vector spaces over ‚Ñù

end seminorm

section gauge
noncomputable theory
variables {E : Type*} [add_comm_group E] [module ‚Ñù E]

/-- Given a subset `s` of a real vector space, we have a functional (sometimes called the Minkowski
functional) which sends `x : E` to `Inf {y ‚àà set.Ioi 0 | x ‚àà y ‚Ä¢ s}`, essentially the smallest
`y` such that `x` is in `s` expanded by `y`. -/
def gauge (s : set E) (x : E) : ‚Ñù := Inf {y : ‚Ñù | 0 < y ‚àß x ‚àà y ‚Ä¢ s}

variables {s : set E} {x : E}

lemma gauge_def : gauge s x = Inf {y ‚àà set.Ioi 0 | x ‚àà y ‚Ä¢ s} := rfl

/-- An alternative definition of the gauge using scalar multiplication on the element rather than on
the set. -/
lemma gauge_def' : gauge s x = Inf {y ‚àà set.Ioi 0 | y‚Åª¬π ‚Ä¢ x ‚àà s} :=
begin
  unfold gauge,
  congr' 1,
  ext y,
  exact and_congr_right (Œª hy, mem_smul_set_iff_inv_smul_mem‚ÇÄ hy.ne' _ _),
end

private lemma gauge_set_bdd_below : bdd_below {y : ‚Ñù | 0 < y ‚àß x ‚àà y ‚Ä¢ s} := ‚ü®0, Œª y hy, hy.1.le‚ü©

lemma gauge_le_of_mem {Œ∏ : ‚Ñù} (hŒ∏ : 0 < Œ∏) {x : E} (hx : x ‚àà Œ∏ ‚Ä¢ s) : gauge s x ‚â§ Œ∏ :=
cInf_le gauge_set_bdd_below ‚ü®hŒ∏, hx‚ü©

/-- If the given subset is `absorbent` then the set we take an infimum over in `gauge` is nonempty,
which is useful for proving many properties about the gauge.  -/
lemma absorbent.gauge_set_nonempty (absorbs : absorbent ‚Ñù s) :
  {y : ‚Ñù | 0 < y ‚àß x ‚àà y ‚Ä¢ s}.nonempty :=
let ‚ü®Œ∏, hŒ∏‚ÇÅ, hŒ∏‚ÇÇ‚ü© := absorbs x in ‚ü®Œ∏, hŒ∏‚ÇÅ, hŒ∏‚ÇÇ Œ∏ (real.norm_of_nonneg hŒ∏‚ÇÅ.le).ge‚ü©

lemma exists_lt_of_gauge_lt (absorbs : absorbent ‚Ñù s) {x : E} {a : ‚Ñù} (h : gauge s x < a) :
  ‚àÉ b, 0 < b ‚àß b < a ‚àß x ‚àà b ‚Ä¢ s :=
begin
  obtain ‚ü®b, ‚ü®hb, hx‚ü©, hba‚ü© := exists_lt_of_cInf_lt absorbs.gauge_set_nonempty h,
  exact ‚ü®b, hb, hba, hx‚ü©,
end

/-- The gauge evaluated at `0` is always zero (mathematically this requires that `0` is in the
subset `s`, but as the real infimum of the empty set in Lean is defined to be `0`, it holds
unconditionally). -/
@[simp] lemma gauge_zero : gauge s 0 = 0 :=
begin
  rw gauge_def',
  by_cases (0 : E) ‚àà s,
  { simp only [smul_zero, sep_true, h, cInf_Ioi] },
  { simp only [smul_zero, sep_false, h, real.Inf_empty] }
end

/-- The gauge is always nonnegative. -/
lemma gauge_nonneg (x : E) : 0 ‚â§ gauge s x := real.Inf_nonneg _ $ Œª x hx, hx.1.le

lemma gauge_neg (symmetric : ‚àÄ x ‚àà s, -x ‚àà s) (x : E) : gauge s (-x) = gauge s x :=
begin
  have : ‚àÄ x, -x ‚àà s ‚Üî x ‚àà s := Œª x, ‚ü®Œª h, by simpa using symmetric _ h, symmetric x‚ü©,
  rw [gauge_def', gauge_def'],
  simp_rw [smul_neg, this],
end

lemma gauge_le_one_eq' (hs : convex ‚Ñù s) (zero_mem : (0 : E) ‚àà s) (absorbs : absorbent ‚Ñù s) :
  {x | gauge s x ‚â§ 1} = ‚ãÇ (Œ∏ : ‚Ñù) (H : 1 < Œ∏), Œ∏ ‚Ä¢ s :=
begin
  ext,
  simp_rw [set.mem_Inter, set.mem_set_of_eq],
  split,
  { intros h Œ∏ hŒ∏,
    have hŒ∏' := zero_lt_one.trans hŒ∏,
    rw mem_smul_set_iff_inv_smul_mem‚ÇÄ hŒ∏'.ne',
    obtain ‚ü®Œ¥, Œ¥_pos, hŒ¥Œ∏, hŒ¥‚ü© := exists_lt_of_gauge_lt absorbs (h.trans_lt hŒ∏),
    suffices : (Œ∏‚Åª¬π * Œ¥) ‚Ä¢ Œ¥‚Åª¬π ‚Ä¢ x ‚àà s,
    { rwa [smul_smul, mul_inv_cancel_right‚ÇÄ Œ¥_pos.ne'] at this },
    rw mem_smul_set_iff_inv_smul_mem‚ÇÄ Œ¥_pos.ne' at hŒ¥,
    refine hs.smul_mem_of_zero_mem zero_mem hŒ¥
      ‚ü®mul_nonneg (inv_nonneg.2 hŒ∏'.le) Œ¥_pos.le, _‚ü©,
    rw [inv_mul_le_iff hŒ∏', mul_one],
    exact hŒ¥Œ∏.le },
  { refine Œª h, le_of_forall_pos_lt_add (Œª Œµ hŒµ, _),
    have hŒµ' := (lt_add_iff_pos_right 1).2 (half_pos hŒµ),
    exact (gauge_le_of_mem (zero_lt_one.trans hŒµ') $ h _ hŒµ').trans_lt
      (add_lt_add_left (half_lt_self hŒµ) _) }
end

lemma gauge_le_one_eq (hs : convex ‚Ñù s) (zero_mem : (0 : E) ‚àà s) (absorbs : absorbent ‚Ñù s) :
  {x | gauge s x ‚â§ 1} = ‚ãÇ (Œ∏ ‚àà set.Ioi (1 : ‚Ñù)), Œ∏ ‚Ä¢ s :=
gauge_le_one_eq' hs zero_mem absorbs

lemma gauge_lt_one_eq' (absorbs : absorbent ‚Ñù s) :
  {x | gauge s x < 1} = ‚ãÉ (Œ∏ : ‚Ñù) (H : 0 < Œ∏) (H : Œ∏ < 1), Œ∏ ‚Ä¢ s :=
begin
  ext,
  simp_rw [set.mem_set_of_eq, set.mem_Union],
  split,
  { intro h,
    obtain ‚ü®Œ∏, hŒ∏‚ÇÄ, hŒ∏‚ÇÅ, hx‚ü© := exists_lt_of_gauge_lt absorbs h,
    exact ‚ü®Œ∏, hŒ∏‚ÇÄ, hŒ∏‚ÇÅ, hx‚ü© },
  { exact Œª ‚ü®Œ∏, hŒ∏‚ÇÄ, hŒ∏‚ÇÅ, hx‚ü©, (gauge_le_of_mem hŒ∏‚ÇÄ hx).trans_lt hŒ∏‚ÇÅ }
end

lemma gauge_lt_one_eq (absorbs : absorbent ‚Ñù s) :
  {x | gauge s x < 1} = ‚ãÉ (Œ∏ ‚àà set.Ioo 0 (1 : ‚Ñù)), Œ∏ ‚Ä¢ s :=
begin
  ext,
  simp_rw [set.mem_set_of_eq, set.mem_Union],
  split,
  { intro h,
    obtain ‚ü®Œ∏, hŒ∏‚ÇÄ, hŒ∏‚ÇÅ, hx‚ü© := exists_lt_of_gauge_lt absorbs h,
    exact ‚ü®Œ∏, ‚ü®hŒ∏‚ÇÄ, hŒ∏‚ÇÅ‚ü©, hx‚ü© },
  { exact Œª ‚ü®Œ∏, ‚ü®hŒ∏‚ÇÄ, hŒ∏‚ÇÅ‚ü©, hx‚ü©, (gauge_le_of_mem hŒ∏‚ÇÄ hx).trans_lt hŒ∏‚ÇÅ }
end

lemma gauge_lt_one_subset_self (hs : convex ‚Ñù s) (h‚ÇÄ : (0 : E) ‚àà s) (absorbs : absorbent ‚Ñù s) :
  {x | gauge s x < 1} ‚äÜ s :=
begin
  rw gauge_lt_one_eq absorbs,
  apply set.bUnion_subset,
  rintro Œ∏ hŒ∏ _ ‚ü®y, hy, rfl‚ü©,
  exact hs.smul_mem_of_zero_mem h‚ÇÄ hy (Ioo_subset_Icc_self hŒ∏),
end

lemma gauge_le_one_of_mem {x : E} (hx : x ‚àà s) : gauge s x ‚â§ 1 :=
gauge_le_of_mem zero_lt_one $ by rwa one_smul

lemma self_subset_gauge_le_one : s ‚äÜ {x | gauge s x ‚â§ 1} := Œª x, gauge_le_one_of_mem

lemma convex.gauge_le_one (hs : convex ‚Ñù s) (h‚ÇÄ : (0 : E) ‚àà s) (absorbs : absorbent ‚Ñù s) :
  convex ‚Ñù {x | gauge s x ‚â§ 1} :=
begin
  rw gauge_le_one_eq hs h‚ÇÄ absorbs,
  exact convex_Inter (Œª i, convex_Inter (Œª (hi : _ < _), hs.smul _)),
end

section topological_space
variables [topological_space E] [has_continuous_smul ‚Ñù E]

lemma interior_subset_gauge_lt_one (s : set E) : interior s ‚äÜ {x | gauge s x < 1} :=
begin
  intros x hx,
  let f : ‚Ñù ‚Üí E := Œª t, t ‚Ä¢ x,
  have hf : continuous f,
  { continuity },
  let s' := f ‚Åª¬π' (interior s),
  have hs' : is_open s' := hf.is_open_preimage _ is_open_interior,
  have one_mem : (1 : ‚Ñù) ‚àà s',
  { simpa only [s', f, set.mem_preimage, one_smul] },
  obtain ‚ü®Œµ, hŒµ‚ÇÄ, hŒµ‚ü© := (metric.nhds_basis_closed_ball.1 _).1
    (is_open_iff_mem_nhds.1 hs' 1 one_mem),
  rw real.closed_ball_eq at hŒµ,
  have hŒµ‚ÇÅ : 0 < 1 + Œµ := hŒµ‚ÇÄ.trans (lt_one_add Œµ),
  have : (1 + Œµ)‚Åª¬π < 1,
  { rw inv_lt_one_iff,
    right,
    linarith },
  refine (gauge_le_of_mem (inv_pos.2 hŒµ‚ÇÅ) _).trans_lt this,
  rw mem_inv_smul_set_iff‚ÇÄ hŒµ‚ÇÅ.ne',
  exact interior_subset
    (hŒµ ‚ü®(sub_le_self _ hŒµ‚ÇÄ.le).trans ((le_add_iff_nonneg_right _).2 hŒµ‚ÇÄ.le), le_rfl‚ü©),
end

lemma gauge_lt_one_eq_self_of_open {s : set E} (hs : convex ‚Ñù s) (zero_mem : (0 : E) ‚àà s)
  (hs‚ÇÇ : is_open s) :
  {x | gauge s x < 1} = s :=
begin
  apply (gauge_lt_one_subset_self hs ‚Äπ_‚Ä∫ $ absorbent_nhds_zero $ hs‚ÇÇ.mem_nhds zero_mem).antisymm,
  convert interior_subset_gauge_lt_one s,
  exact hs‚ÇÇ.interior_eq.symm,
end

lemma gauge_lt_one_of_mem_of_open {s : set E} (hs : convex ‚Ñù s) (zero_mem : (0 : E) ‚àà s)
  (hs‚ÇÇ : is_open s) (x : E) (hx : x ‚àà s) :
  gauge s x < 1 :=
by rwa ‚Üêgauge_lt_one_eq_self_of_open hs zero_mem hs‚ÇÇ at hx

lemma one_le_gauge_of_not_mem {s : set E} (hs : convex ‚Ñù s) (zero_mem : (0 : E) ‚àà s)
  (hs‚ÇÇ : is_open s) {x : E} (hx : x ‚àâ s) :
  1 ‚â§ gauge s x :=
begin
  rw ‚Üêgauge_lt_one_eq_self_of_open hs zero_mem hs‚ÇÇ at hx,
  exact le_of_not_lt hx
end

end topological_space

variables {Œ± : Type*} [linear_ordered_field Œ±] [mul_action_with_zero Œ± ‚Ñù] [ordered_smul Œ± ‚Ñù]

lemma gauge_smul [mul_action_with_zero Œ± E] [is_scalar_tower Œ± ‚Ñù (set E)] {s : set E} {Œ∏ : Œ±}
  (hŒ∏ : 0 ‚â§ Œ∏) (x : E) :
  gauge s (Œ∏ ‚Ä¢ x) = Œ∏ ‚Ä¢ gauge s x :=
begin
  obtain rfl | hŒ∏' := hŒ∏.eq_or_lt,
  { rw [zero_smul, gauge_zero, zero_smul] },
  rw [gauge_def', gauge_def', ‚Üêreal.Inf_smul_of_nonneg hŒ∏],
  congr' 1,
  ext Œ≤,
  simp_rw [set.mem_smul_set, set.mem_sep_eq],
  split,
  { rintro ‚ü®hŒ≤, hx‚ü©,
    simp_rw [mem_Ioi] at ‚ä¢ hŒ≤,
    have := smul_pos (inv_pos.2 hŒ∏') hŒ≤,
    refine ‚ü®Œ∏‚Åª¬π ‚Ä¢ Œ≤, ‚ü®this, _‚ü©, smul_inv_smul‚ÇÄ hŒ∏'.ne' _‚ü©,
    rw ‚Üêmem_smul_set_iff_inv_smul_mem‚ÇÄ at ‚ä¢ hx,
    rwa [smul_assoc, mem_smul_set_iff_inv_smul_mem‚ÇÄ (inv_ne_zero hŒ∏'.ne'), inv_inv‚ÇÄ],
    { exact this.ne' },
    { exact hŒ≤.ne' } },
  { rintro ‚ü®Œ≤, ‚ü®hŒ≤, hx‚ü©, rfl‚ü©,
    rw mem_Ioi at ‚ä¢ hŒ≤,
    have := smul_pos hŒ∏' hŒ≤,
    refine ‚ü®this, _‚ü©,
    rw ‚Üêmem_smul_set_iff_inv_smul_mem‚ÇÄ at ‚ä¢ hx,
    rw smul_assoc,
    exact smul_mem_smul_set hx,
    { exact this.ne' },
    { exact hŒ≤.ne'} }
end

lemma gauge_homogeneous [module Œ± E] [is_scalar_tower Œ± ‚Ñù (set E)] {s : set E}
  (symmetric : ‚àÄ x ‚àà s, -x ‚àà s) (Œ∏ : Œ±) (x : E) :
  gauge s (Œ∏ ‚Ä¢ x) = abs Œ∏ ‚Ä¢ gauge s x :=
begin
  rw ‚Üêgauge_smul (abs_nonneg Œ∏),
  obtain h | h := abs_choice Œ∏,
  { rw h },
  { rw [h, neg_smul, gauge_neg symmetric] },
  { apply_instance }
end

lemma gauge_subadditive (hs : convex ‚Ñù s) (absorbs : absorbent ‚Ñù s) (x y : E) :
  gauge s (x + y) ‚â§ gauge s x + gauge s y :=
begin
  refine le_of_forall_pos_lt_add (Œª Œµ hŒµ, _),
  obtain ‚ü®a, ha, ha', hx‚ü© := exists_lt_of_gauge_lt absorbs
    (lt_add_of_pos_right (gauge s x) (half_pos hŒµ)),
  obtain ‚ü®b, hb, hb', hy‚ü© := exists_lt_of_gauge_lt absorbs
    (lt_add_of_pos_right (gauge s y) (half_pos hŒµ)),
  rw mem_smul_set_iff_inv_smul_mem‚ÇÄ ha.ne' at hx,
  rw mem_smul_set_iff_inv_smul_mem‚ÇÄ hb.ne' at hy,
  suffices : gauge s (x + y) ‚â§ a + b,
  { linarith },
  have hab : 0 < a + b := add_pos ha hb,
  apply gauge_le_of_mem hab,
  have := convex_iff_div.1 hs hx hy ha.le hb.le hab,
  rwa [smul_smul, smul_smul, mul_comm_div', mul_comm_div', ‚Üêmul_div_assoc, ‚Üêmul_div_assoc,
    mul_inv_cancel ha.ne', mul_inv_cancel hb.ne', ‚Üêsmul_add, one_div,
    ‚Üêmem_smul_set_iff_inv_smul_mem‚ÇÄ hab.ne'] at this,
end

/-- `gauge s` as a seminorm when `s` is symmetric, convex and absorbent. -/
@[simps] def gauge_seminorm (symmetric : ‚àÄ x ‚àà s, -x ‚àà s) (hs : convex ‚Ñù s) (hs' : absorbent ‚Ñù s) :
  seminorm ‚Ñù E :=
{ to_fun := gauge s,
  smul' := Œª Œ∏ x, by rw [gauge_homogeneous symmetric, real.norm_eq_abs, smul_eq_mul];
    apply_instance,
  triangle' := gauge_subadditive hs hs' }

end gauge

-- TODO: topology induced by family of seminorms, local convexity.
