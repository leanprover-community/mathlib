/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.complex.abs_max
import analysis.asymptotics.superpolynomial_decay

/-!
-/

open set function filter asymptotics metric complex
open_locale topological_space filter real

local notation `expR` := real.exp

namespace phragmen_lindelof

variables {E : Type*} [normed_group E] [normed_space ‚ÑÇ E] {a b C : ‚Ñù} {f : ‚ÑÇ ‚Üí E} {z : ‚ÑÇ}

/-- **Phragmen-Lindel√∂f principle** in a strip `U = {z : ‚ÑÇ | a < im z < b}`.
Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable on `U` and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * exp(c * |re z|))` on `U` for some `c < œÄ / (b - a)`;
* `‚à•f z‚à•` is bounded from above by a constant `C` on the boundary of `U`.

Then `‚à•f z‚à•` is bounded by the same constant on the closed strip
`{z : ‚ÑÇ | a ‚â§ im z ‚â§ b}`. Moreover, it suffices to verify the second assumption
only for sufficiently large values of `|re z|`.
-/
lemma horizontal_strip (hfd : diff_cont_on_cl ‚ÑÇ f (im ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c < œÄ / (b - a)) B, is_O f (Œª z, expR (B * expR (c * |z.re|)))
    (comap (has_abs.abs ‚àò re) at_top ‚äì ùìü (im ‚Åª¬π' Ioo a b)))
  (hle_a : ‚àÄ z : ‚ÑÇ, im z = a ‚Üí ‚à•f z‚à• ‚â§ C) (hle_b : ‚àÄ z, im z = b ‚Üí ‚à•f z‚à• ‚â§ C)
  (hz : im z ‚àà Icc a b) :
  ‚à•f z‚à• ‚â§ C :=
begin
  -- If `im z = a` or `im z = b`, then we apply `hle_a` or `hle_b`, otherwise `im z ‚àà Ioo a b`.
  rcases eq_endpoints_or_mem_Ioo_of_mem_Icc hz with rfl|rfl|hz',
  { exact hle_a _ rfl }, { exact hle_b _ rfl }, clear hz, rename hz' hz,
  -- WLOG, `0 < C`.
  suffices : ‚àÄ C' : ‚Ñù, 0 < C' ‚Üí (‚àÄ w : ‚ÑÇ, im w = a ‚Üí ‚à•f w‚à• ‚â§ C') ‚Üí
    (‚àÄ w : ‚ÑÇ, im w = b ‚Üí ‚à•f w‚à• ‚â§ C') ‚Üí ‚à•f z‚à• ‚â§ C',
  { refine le_of_forall_le_of_dense (Œª C' hC', this C' _ (Œª w hw, _) (Œª w hw, _)),
    { refine ((norm_nonneg (f (a * I))).trans (hle_a _ _)).trans_lt hC',
      rw [mul_I_im, of_real_re] },
    exacts [(hle_a _ hw).trans hC'.le, (hle_b _ hw).trans hC'.le] },
  clear_dependent C, intros C hC‚ÇÄ hle_a hle_b,
  -- After a change of variables, we deal with an interval `(a - b, a + b)` instead of `(a, b)`
  obtain ‚ü®a, b, rfl, rfl‚ü© : ‚àÉ a' b', a = a' - b' ‚àß b = a' + b',
  { refine ‚ü®(a + b) / 2, (b - a) / 2, _, _‚ü©,
    { rw [‚Üê sub_div, ‚Üê sub_add, add_sub_cancel, ‚Üê two_mul, mul_div_cancel_left a two_ne_zero] },
    { rw [‚Üê add_div, add_comm (a + b), ‚Üê add_assoc, sub_add_cancel, ‚Üê two_mul,
        mul_div_cancel_left b two_ne_zero] } },
  have hab : a - b < a + b, from hz.1.trans hz.2,
  have hb : 0 < b,
    by simpa only [sub_eq_add_neg, add_lt_add_iff_left, neg_lt_self_iff] using hab,
  rw [add_sub_sub_cancel, ‚Üê two_mul, ‚Üê div_div_eq_div_mul] at hB,
  have hœÄb : 0 < œÄ / 2 / b, from div_pos real.pi_div_two_pos hb,
  -- Choose some `c B : ‚Ñù` satisfying `hB`, then choose `max c 0 < r < œÄ / (b - a)`.
  rcases hB with ‚ü®c, hc, B, hO‚ü©,
  obtain ‚ü®d, ‚ü®hcd, hd‚ÇÄ‚ü©, hd‚ü© : ‚àÉ d, (c < d ‚àß 0 < d) ‚àß d < œÄ / 2 / b,
    by simpa only [max_lt_iff] using exists_between (max_lt hc hœÄb),
  have hb' : d * b < œÄ / 2, from (lt_div_iff hb).1 hd,
  set aff : ‚ÑÇ ‚Üí ‚ÑÇ := Œª w, d * (w - a * I),
  set g : ‚Ñù ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ := Œª Œµ w, exp (Œµ * (exp (aff w) + exp (-aff w))),
  /- Since `g Œµ z ‚Üí 1` as `Œµ ‚Üí 0‚Åª`, it suffices to prove that `‚à•g Œµ z ‚Ä¢ f z‚à• ‚â§ C`
  for all negative `Œµ`. -/
  suffices : ‚àÄ·∂† Œµ : ‚Ñù in ùìù[<] 0, ‚à•g Œµ z ‚Ä¢ f z‚à• ‚â§ C,
  { refine le_of_tendsto (tendsto.mono_left _ nhds_within_le_nhds) this,
    apply ((continuous_of_real.mul continuous_const).cexp.smul continuous_const).norm.tendsto',
    simp, apply_instance },
  filter_upwards [self_mem_nhds_within] with Œµ Œµ‚ÇÄ, change Œµ < 0 at Œµ‚ÇÄ,
  -- An upper estimate on `‚à•g Œµ w‚à•` that will be used in two branches of the proof.
  obtain ‚ü®Œ¥, Œ¥‚ÇÄ, hŒ¥‚ü© : ‚àÉ Œ¥ : ‚Ñù, Œ¥ < 0 ‚àß ‚àÄ ‚¶Éw‚¶Ñ, im w ‚àà Icc (a - b) (a + b) ‚Üí
    abs (g Œµ w) ‚â§ expR (Œ¥ * expR (d * |re w|)),
  { have H : Œµ * real.cos (d * b) < 0,
      from mul_neg_of_neg_of_pos Œµ‚ÇÄ (real.cos_pos_of_mem_Ioo $ abs_lt.1 $
        (abs_of_pos (mul_pos hd‚ÇÄ hb)).symm ‚ñ∏ hb'),
    refine ‚ü®_, H, Œª w hw, _‚ü©,
    replace hw : |im (aff w)| ‚â§ d * b,
    { rw [‚Üê real.closed_ball_eq_Icc] at hw,
      rwa [of_real_mul_im, sub_im, mul_I_im, of_real_re, _root_.abs_mul, abs_of_pos hd‚ÇÄ,
        mul_le_mul_left hd‚ÇÄ] },
    simpa only [of_real_mul_re, _root_.abs_mul, abs_of_pos hd‚ÇÄ, sub_re, mul_I_re, of_real_im,
      zero_mul, neg_zero, sub_zero]
      using abs_exp_mul_exp_add_exp_neg_le_of_abs_im_le Œµ‚ÇÄ.le hw hb'.le },
  -- `abs (g Œµ w) ‚â§ 1` on the lines `w.im = ¬±œÄ` (actually, it holds everywhere in the strip)
  have hg‚ÇÅ : ‚àÄ w, (im w = a - b ‚à® im w = a + b) ‚Üí abs (g Œµ w) ‚â§ 1,
  { intros w hw,
    refine (hŒ¥ $ hw.by_cases _ _).trans (real.exp_le_one_iff.2 _),
    exacts [Œª h, h.symm ‚ñ∏ left_mem_Icc.2 hab.le, Œª h, h.symm ‚ñ∏ right_mem_Icc.2 hab.le,
      mul_nonpos_of_nonpos_of_nonneg Œ¥‚ÇÄ.le (real.exp_pos _).le] },
  /- Our apriori estimate on `f` implies that `g Œµ w ‚Ä¢ f w ‚Üí 0` as `|w.re| ‚Üí ‚àû`. In particular,
  its norm is less than or equal to `C` for sufficiently large `|w.re|`. -/
  obtain ‚ü®R, hzR, hR‚ü© : ‚àÉ R : ‚Ñù, |z.re| < R ‚àß ‚àÄ w, |re w| = R ‚Üí im w ‚àà Ioo (a - b) (a + b) ‚Üí
    ‚à•g Œµ w ‚Ä¢ f w‚à• ‚â§ C,
  { refine ((eventually_gt_at_top _).and _).exists,
    rcases hO.exists_pos with ‚ü®A, hA‚ÇÄ, hA‚ü©,
    simp only [is_O_with_iff, eventually_inf_principal, eventually_comap, mem_Ioo, ‚Üê abs_lt,
      mem_preimage, (‚àò), real.norm_eq_abs, abs_of_pos (real.exp_pos _)] at hA,
    suffices : tendsto (Œª R, expR (Œ¥ * expR (d * R) + B * expR (c * R) + real.log A)) at_top (ùìù 0),
    { filter_upwards [this.eventually (ge_mem_nhds hC‚ÇÄ), hA] with R hR Hle w hre him,
      calc ‚à•g Œµ w ‚Ä¢ f w‚à• ‚â§ expR (Œ¥ * expR (d * R) + B * expR (c * R) + real.log A) : _
      ... ‚â§ C : hR,
      rw [norm_smul, real.exp_add, ‚Üê hre, real.exp_add, real.exp_log hA‚ÇÄ, mul_assoc, mul_comm _ A],
      exact mul_le_mul (hŒ¥ $ Ioo_subset_Icc_self him) (Hle _ hre him) (norm_nonneg _)
        (real.exp_pos _).le },
    refine real.tendsto_exp_at_bot.comp _,
    suffices H : tendsto (Œª R, Œ¥ + B * (expR ((d - c) * R))‚Åª¬π) at_top (ùìù (Œ¥ + B * 0)),
    { rw [mul_zero, add_zero] at H,
      refine tendsto.at_bot_add _ tendsto_const_nhds,
      simpa only [id, (‚àò), add_mul, mul_assoc, ‚Üê div_eq_inv_mul, ‚Üê real.exp_sub,
        ‚Üê sub_mul, sub_sub_cancel]
        using H.neg_mul_at_top Œ¥‚ÇÄ (real.tendsto_exp_at_top.comp $
          tendsto_const_nhds.mul_at_top hd‚ÇÄ tendsto_id) },
    refine tendsto_const_nhds.add (tendsto_const_nhds.mul _),
    exact tendsto_inv_at_top_zero.comp (real.tendsto_exp_at_top.comp $
      tendsto_const_nhds.mul_at_top (sub_pos.2 hcd) tendsto_id) },
  have hR‚ÇÄ : 0 < R, from (_root_.abs_nonneg _).trans_lt hzR,
  /- Finally, we apply the bounded version of the maximum modulus principle to the rectangle
  `(-R, R) √ó (-œÄ / 2, œÄ / 2)`. The function is bounded by `C` on the horizontal sides by assumption
  (and because `‚à•g Œµ w‚à• ‚â§ 1`) and on the vertical sides by the choice of `R`. -/
  have hgd : differentiable ‚ÑÇ (g Œµ),
    by convert ((((differentiable_id.sub_const _).const_mul _).cexp.add
      ((differentiable_id.sub_const _).const_mul _).neg.cexp).const_mul _).cexp,
  replace hd : diff_cont_on_cl ‚ÑÇ (Œª w, g Œµ w ‚Ä¢ f w) (Ioo (-R) R √ó‚ÑÇ Ioo (a - b) (a + b)),
    from (hgd.diff_cont_on_cl.smul hfd).mono (Œª w hw, hw.2),
  convert norm_le_of_forall_mem_frontier_norm_le ((bounded_Ioo _ _).re_prod_im (bounded_Ioo _ _))
    hd (Œª w hw, _) _,
  { have hwc := frontier_subset_closure hw,
    rw [frontier_re_prod_im, closure_Ioo (neg_lt_self hR‚ÇÄ).ne, frontier_Ioo hab,
      closure_Ioo hab.ne, frontier_Ioo (neg_lt_self hR‚ÇÄ)] at hw,
    by_cases him : w.im = a - b ‚à® w.im = a + b,
    { rw [closure_re_prod_im, closure_Ioo (neg_lt_self hR‚ÇÄ).ne] at hwc,
      rw [norm_smul, ‚Üê one_mul C],
      exact mul_le_mul (hg‚ÇÅ _ him) (him.by_cases (hle_a _) (hle_b _)) (norm_nonneg _) zero_le_one },
    { replace hw : w ‚àà {-R, R} √ó‚ÑÇ Icc (a - b) (a + b), from hw.resolve_left (Œª h, him h.2),
      have hw' := eq_endpoints_or_mem_Ioo_of_mem_Icc hw.2, rw ‚Üê or.assoc at hw',
      exact hR _ ((abs_eq hR‚ÇÄ.le).2 hw.1.symm) (hw'.resolve_left him) } },
  { rw [closure_re_prod_im, closure_Ioo hab.ne, closure_Ioo (neg_lt_self hR‚ÇÄ).ne],
    exact ‚ü®abs_le.1 hzR.le, Ioo_subset_Icc_self hz‚ü© }
end

/-- **Phragmen-Lindel√∂f principle** in a strip `U = {z : ‚ÑÇ | a < im z < b}`.
Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable on `U` and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * exp(c * |re z|))` on `U` for some `c < œÄ / (b - a)`;
* `f z = 0` on the boundary of `U`.

Then `f` is equal to zero on the closed strip `{z : ‚ÑÇ | a ‚â§ im z ‚â§ b}`.
-/
lemma eq_zero_on_horizontal_strip (hd : diff_cont_on_cl ‚ÑÇ f (im ‚Åª¬π' Ioo a b))
  (hB : ‚àÉ (c < œÄ / (b - a)) B, is_O f (Œª z, expR (B * expR (c * |z.re|)))
    (comap (has_abs.abs ‚àò re) at_top ‚äì ùìü (im ‚Åª¬π' Ioo a b)))
  (ha : ‚àÄ z : ‚ÑÇ, z.im = a ‚Üí f z = 0) (hb : ‚àÄ z : ‚ÑÇ, z.im = b ‚Üí f z = 0) :
  eq_on f 0 (im ‚Åª¬π' Icc a b) :=
Œª z hz, norm_le_zero_iff.1 $ horizontal_strip hd hB
  (Œª z hz, (ha z hz).symm ‚ñ∏ norm_zero.le) (Œª z hz, (hb z hz).symm ‚ñ∏ norm_zero.le) hz

/-- **Phragmen-Lindel√∂f principle** in the first quadrant. Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable in the open first quadrant and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open first quadrant
  for some `c < 2`;
* `‚à•f z‚à•` is bounded from above by a constant `C` on the boundary of the first quadrant.

Then `‚à•f z‚à•` is bounded from above by the same constant on the closed first quadrant. -/
lemma quadrant_I (hd : diff_cont_on_cl ‚ÑÇ f (Ioi 0 √ó‚ÑÇ Ioi 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, is_O f (Œª z, expR (B * (abs z) ^ c))
    (comap abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Ioi 0)))
  (hre : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f x‚à• ‚â§ C) (him : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f (x * I)‚à• ‚â§ C)
  (hz : 0 ‚â§ z.re ‚àß 0 ‚â§ z.im) :
  ‚à•f z‚à• ‚â§ C :=
begin
  rcases eq_or_ne z 0 with rfl|hzne, { exact hre 0 le_rfl },
  obtain ‚ü®z, hz, rfl‚ü© : ‚àÉ Œ∂ : ‚ÑÇ, Œ∂.im ‚àà Icc 0 (œÄ / 2) ‚àß exp Œ∂ = z,
  { refine ‚ü®log z, _, exp_log hzne‚ü©,
    rw log_im,
    exact ‚ü®arg_nonneg_iff.2 hz.2, arg_le_pi_div_two_iff.2 (or.inl hz.1)‚ü© },
  clear hz hzne,
  change ‚à•(f ‚àò exp) z‚à• ‚â§ C,
  have : maps_to exp (im ‚Åª¬π' Ioo 0 (œÄ / 2)) (Ioi 0 √ó‚ÑÇ Ioi 0),
  { intros z hz,
    rw [mem_re_prod_im, exp_re, exp_im, mem_Ioi, mem_Ioi],
    refine ‚ü®mul_pos (real.exp_pos _)
      (real.cos_pos_of_mem_Ioo ‚ü®(neg_lt_zero.2 $ div_pos real.pi_pos two_pos).trans hz.1, hz.2‚ü©),
      mul_pos (real.exp_pos _)
        (real.sin_pos_of_mem_Ioo ‚ü®hz.1, hz.2.trans (half_lt_self real.pi_pos)‚ü©)‚ü© },
  refine horizontal_strip (hd.comp differentiable_exp.diff_cont_on_cl this) _ _ _ hz,
  { rw [sub_zero, div_div_cancel' real.pi_pos.ne'],
    rcases hB with ‚ü®c, hc, B, hO‚ü©,
    refine ‚ü®c, hc, max B 0, _‚ü©,
    rw [‚Üê comap_comap, comap_abs_at_top, comap_sup, inf_sup_right],
    refine is_O.join _ ((hO.comp_tendsto $ tendsto_exp_comap_re_at_top.inf this.tendsto).trans $
      is_O.of_bound 1 _),
    { have hc : continuous_within_at f (Ioi 0 √ó‚ÑÇ Ioi 0) 0,
      { refine (hd.continuous_on _ _).mono subset_closure,
        simp [closure_re_prod_im, mem_re_prod_im] },
      refine (is_O_one_of_tendsto ‚Ñù (hc.tendsto.comp $ tendsto_exp_comap_re_at_bot.inf
        this.tendsto)).trans (is_O_of_le _ (Œª w, _)),
      rw [norm_one, real.norm_of_nonneg (real.exp_pos _).le, real.one_le_exp_iff],
      exact mul_nonneg (le_max_right _ _) (real.exp_pos _).le },
    { simp only [eventually_inf_principal, eventually_comap, comp_app, one_mul,
        real.norm_of_nonneg (real.exp_pos _).le, abs_exp, ‚Üê real.exp_mul, real.exp_le_exp],
      refine (eventually_ge_at_top 0).mono (Œª x hx z hz hz', _),
      rw [hz, _root_.abs_of_nonneg hx, mul_comm _ c],
      exact mul_le_mul_of_nonneg_right (le_max_left _ _) (real.exp_pos _).le } },
  { intros w hw, lift w to ‚Ñù using hw,
    rw [comp_app, ‚Üê of_real_exp],
    exact hre _ (real.exp_pos _).le },
  { rintro ‚ü®x, y‚ü© (rfl : y = œÄ / 2),
    rw [mk_eq_add_mul_I, comp_app, exp_add_mul_I, ‚Üê of_real_cos, ‚Üê of_real_sin, real.cos_pi_div_two,
      real.sin_pi_div_two, of_real_zero, of_real_one, one_mul, zero_add, ‚Üê of_real_exp],
    exact him _ (real.exp_pos _).le }
end

/-- **Phragmen-Lindel√∂f principle** in the second quadrant. Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable in the open second quadrant and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open second quadrant
  for some `c < 2`;
* `‚à•f z‚à•` is bounded from above by a constant `C` on the boundary of the second quadrant.

Then `‚à•f z‚à•` is bounded from above by the same constant on the closed second quadrant. -/
lemma quadrant_II (hd : diff_cont_on_cl ‚ÑÇ f (Iio 0 √ó‚ÑÇ Ioi 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, is_O f (Œª z, expR (B * (abs z) ^ c))
    (comap abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Ioi 0)))
  (hre : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí ‚à•f x‚à• ‚â§ C) (him : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f (x * I)‚à• ‚â§ C)
  (hz : z.re ‚â§ 0 ‚àß 0 ‚â§ z.im) :
  ‚à•f z‚à• ‚â§ C :=
begin
  obtain ‚ü®z, rfl‚ü© : ‚àÉ z', z' * I = z, from ‚ü®z / I, div_mul_cancel _ I_ne_zero‚ü©,
  rw [mul_I_re, mul_I_im, neg_nonpos] at hz,
  change ‚à•(f ‚àò (* I)) z‚à• ‚â§ C,
  have H : maps_to (* I) (Ioi 0 √ó‚ÑÇ Ioi 0) (Iio 0 √ó‚ÑÇ Ioi 0),
  { intros w hw,
    simpa only [mem_re_prod_im, mul_I_re, mul_I_im, neg_lt_zero, mem_Iio] using hw.symm },
  refine quadrant_I (hd.comp (differentiable_id.mul_const _).diff_cont_on_cl H)
    (Exists‚ÇÉ.imp (Œª c hc B hO, _) hB) him (Œª x hx, _) hz.symm,
  { simpa only [(‚àò), complex.abs_mul, abs_I, mul_one]
      using hO.comp_tendsto ((tendsto_mul_right_cobounded I_ne_zero).inf H.tendsto) },
  { rw [comp_app, mul_assoc, I_mul_I, mul_neg_one, ‚Üê of_real_neg],
    exact hre _ (neg_nonpos.2 hx) }
end

/-- **Phragmen-Lindel√∂f principle** in the third quadrant. Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable in the open third quadrant and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open third quadrant
  for some `c < 2`;
* `‚à•f z‚à•` is bounded from above by a constant `C` on the boundary of the third quadrant.

Then `‚à•f z‚à•` is bounded from above by the same constant on the closed third quadrant. -/
lemma quadrant_III (hd : diff_cont_on_cl ‚ÑÇ f (Iio 0 √ó‚ÑÇ Iio 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, is_O f (Œª z, expR (B * (abs z) ^ c))
    (comap abs at_top ‚äì ùìü (Iio 0 √ó‚ÑÇ Iio 0)))
  (hre : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí ‚à•f x‚à• ‚â§ C) (him : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí ‚à•f (x * I)‚à• ‚â§ C)
  (hz : z.re ‚â§ 0 ‚àß z.im ‚â§ 0) :
  ‚à•f z‚à• ‚â§ C :=
begin
  obtain ‚ü®z, rfl‚ü© : ‚àÉ z', -z' = z, from ‚ü®-z, neg_neg z‚ü©,
  rw [neg_re, neg_im, neg_nonpos, neg_nonpos] at hz,
  change ‚à•(f ‚àò has_neg.neg) z‚à• ‚â§ C,
  have H : maps_to has_neg.neg (Ioi 0 √ó‚ÑÇ Ioi 0) (Iio 0 √ó‚ÑÇ Iio 0),
  { intros w hw,
    simpa only [mem_re_prod_im, neg_re, neg_im, neg_lt_zero, mem_Iio] using hw },
  refine quadrant_I (hd.comp differentiable_neg.diff_cont_on_cl H) _ (Œª x hx, _) (Œª x hx, _) hz,
  { refine Exists‚ÇÉ.imp (Œª c hc B hO, _) hB,
    simpa only [(‚àò), complex.abs_neg]
      using hO.comp_tendsto (tendsto_neg_cobounded.inf H.tendsto) },
  { rw [comp_app, ‚Üê of_real_neg],
    exact hre (-x) (neg_nonpos.2 hx) },
  { rw [comp_app, ‚Üê neg_mul, ‚Üê of_real_neg],
    exact him (-x) (neg_nonpos.2 hx) }
end

/-- **Phragmen-Lindel√∂f principle** in the fourth quadrant. Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable in the open fourth quadrant and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open fourth quadrant
  for some `c < 2`;
* `‚à•f z‚à•` is bounded from above by a constant `C` on the boundary of the fourth quadrant.

Then `‚à•f z‚à•` is bounded from above by the same constant on the closed fourth quadrant. -/
lemma quadrant_IV (hd : diff_cont_on_cl ‚ÑÇ f (Ioi 0 √ó‚ÑÇ Iio 0))
  (hB : ‚àÉ (c < (2 : ‚Ñù)) B, is_O f (Œª z, expR (B * (abs z) ^ c))
    (comap abs at_top ‚äì ùìü (Ioi 0 √ó‚ÑÇ Iio 0)))
  (hre : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f x‚à• ‚â§ C) (him : ‚àÄ x : ‚Ñù, x ‚â§ 0 ‚Üí ‚à•f (x * I)‚à• ‚â§ C)
  (hz : 0 ‚â§ z.re ‚àß z.im ‚â§ 0) :
  ‚à•f z‚à• ‚â§ C :=
begin
  obtain ‚ü®z, rfl‚ü© : ‚àÉ z', -z' = z, from ‚ü®-z, neg_neg z‚ü©,
  rw [neg_re, neg_im, neg_nonpos, neg_nonneg] at hz,
  change ‚à•(f ‚àò has_neg.neg) z‚à• ‚â§ C,
  have H : maps_to has_neg.neg (Iio 0 √ó‚ÑÇ Ioi 0) (Ioi 0 √ó‚ÑÇ Iio 0),
  { intros w hw,
    simpa only [mem_re_prod_im, neg_re, neg_im, neg_lt_zero, neg_pos, mem_Ioi, mem_Iio] using hw },
  refine quadrant_II (hd.comp differentiable_neg.diff_cont_on_cl H) _ (Œª x hx, _) (Œª x hx, _) hz,
  { refine Exists‚ÇÉ.imp (Œª c hc B hO, _) hB,
    simpa only [(‚àò), complex.abs_neg]
      using hO.comp_tendsto (tendsto_neg_cobounded.inf H.tendsto) },
  { rw [comp_app, ‚Üê of_real_neg],
    exact hre (-x) (neg_nonneg.2 hx) },
  { rw [comp_app, ‚Üê neg_mul, ‚Üê of_real_neg],
    exact him (-x) (neg_nonpos.2 hx) }
end

/-- **Phragmen-Lindel√∂f principle** in the right half-plane. Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable in the open right half-plane and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane
  for some `c < 2`;
* `‚à•f z‚à•` is bounded from above by a constant `C` on the imaginary axis;
* `f x ‚Üí 0` as `x : ‚Ñù` tends to infinity.

Then `‚à•f z‚à•` is bounded from above by the same constant on the closed right half-plane.
See also `phragmen_lindelof.right_half_plane_of_bounded_on_real` for a stronger version. -/
lemma right_half_plane_of_tendsto_zero_on_real (hd : diff_cont_on_cl ‚ÑÇ f {z | 0 < z.re})
  (hexp : ‚àÉ (c < (2 : ‚Ñù)) B, is_O f (Œª z, expR (B * (abs z) ^ c))
    (comap abs at_top ‚äì ùìü {z | 0 < z.re}))
  (hre : tendsto (Œª x : ‚Ñù, f x) at_top (ùìù 0)) (him : ‚àÄ x : ‚Ñù, ‚à•f (x * I)‚à• ‚â§ C) (hz : 0 ‚â§ z.re) :
  ‚à•f z‚à• ‚â§ C :=
begin
  revert z,
  have hle : ‚àÄ C', (‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí ‚à•f x‚à• ‚â§ C') ‚Üí ‚àÄ z : ‚ÑÇ, 0 ‚â§ z.re ‚Üí ‚à•f z‚à• ‚â§ max C C',
  { intros C' hC' z hz,
    cases le_total z.im 0,
    { refine quadrant_IV (hd.mono $ Œª _, and.left) (Exists‚ÇÉ.imp (Œª c hc B hO, _) hexp)
        (Œª x hx, (hC' x hx).trans $ le_max_right _ _) (Œª x hx, (him x).trans (le_max_left _ _))
        ‚ü®hz, h‚ü©,
      exact hO.mono (inf_le_inf_left _ $ principal_mono.2 $ Œª _, and.left) },
    { refine quadrant_I (hd.mono $ Œª _, and.left) (Exists‚ÇÉ.imp (Œª c hc B hO, _) hexp)
        (Œª x hx, (hC' x hx).trans $ le_max_right _ _) (Œª x hx, (him x).trans (le_max_left _ _))
        ‚ü®hz, h‚ü©,
      exact hO.mono (inf_le_inf_left _ $ principal_mono.2 $ Œª _, and.left) } },
  obtain ‚ü®x, hx‚ÇÄ, hx‚ü© : ‚àÉ x : ‚Ñù, 0 ‚â§ x ‚àß ‚àÄ y : ‚Ñù, 0 ‚â§ y ‚Üí ‚à•f y‚à• ‚â§ ‚à•f x‚à•,
  { have hfc : continuous_on (Œª x : ‚Ñù, f x) (Ici 0),
    { refine hd.continuous_on.comp continuous_of_real.continuous_on (Œª x hx, _),
      rwa closure_set_of_lt_re },
    by_cases h‚ÇÄ : ‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f x = 0,
    { refine ‚ü®0, le_rfl, Œª y hy, _‚ü©, rw [h‚ÇÄ y hy, h‚ÇÄ 0 le_rfl] },
    push_neg at h‚ÇÄ,
    rcases h‚ÇÄ with ‚ü®x‚ÇÄ, hx‚ÇÄ, hne‚ü©,
    have hlt : ‚à•(0 : E)‚à• < ‚à•f x‚ÇÄ‚à•, by rwa [norm_zero, norm_pos_iff],
    simpa only [exists_prop]
      using hfc.norm.exists_forall_ge' is_closed_Ici hx‚ÇÄ _,
    rw [real.cocompact_eq, inf_sup_right, (disjoint_at_bot_principal_Ici (0 : ‚Ñù)).eq_bot,
      bot_sup_eq],
    exact (hre.norm.eventually $ ge_mem_nhds hlt).filter_mono inf_le_left },
  cases le_or_lt (‚à•f x‚à•) C,
  { simpa only [max_eq_left h] using hle _ hx },
  { have : is_max_on (norm ‚àò f) {z | 0 < z.re} x,
    { rintros z (hz : 0 < z.re),
      simpa [max_eq_right h.le] using hle _ hx _ hz.le },
    have : ‚à•f 0‚à• = ‚à•f x‚à•,
    { apply norm_eq_norm_of_is_max_on_of_closed_ball_subset hd this,
      -- move to a lemma?
      intros z hz,
      rw [mem_ball, dist_zero_left, dist_eq, norm_eq_abs, complex.abs_of_nonneg hx‚ÇÄ] at hz,
      rw mem_set_of_eq,
      contrapose! hz,
      calc x ‚â§ x - z.re : (le_sub_self_iff _).2 hz
      ... ‚â§ |x - z.re| : le_abs_self _
      ... = |(z - x).re| : by rw [sub_re, of_real_re, _root_.abs_sub_comm]
      ... ‚â§ abs (z - x) : abs_re_le_abs _ },
    { refine (h.not_le $ this ‚ñ∏ _).elim,
      simpa using him 0 } }
end

/-- **Phragmen-Lindel√∂f principle** in the right half-plane. Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable in the open right half-plane and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane
  for some `c < 2`;
* `‚à•f z‚à•` is bounded from above by a constant `C` on the imaginary axis;
* `‚à•f x‚à•` is bounded from above by a constant for large real values of `x`.

Then `‚à•f z‚à•` is bounded from above by `C` on the closed right half-plane.
See also `phragmen_lindelof.right_half_plane_of_tendsto_zero_on_real` for a weaker version. -/
lemma right_half_plane_of_bounded_on_real (hd : diff_cont_on_cl ‚ÑÇ f {z | 0 < z.re})
  (hexp : ‚àÉ (c < (2 : ‚Ñù)) B, is_O f (Œª z, expR (B * (abs z) ^ c))
    (comap abs at_top ‚äì ùìü {z | 0 < z.re}))
  (hre : is_bounded_under (‚â§) at_top (Œª x : ‚Ñù, ‚à•f x‚à•))
  (him : ‚àÄ x : ‚Ñù, ‚à•f (x * I)‚à• ‚â§ C) (hz : 0 ‚â§ z.re) :
  ‚à•f z‚à• ‚â§ C :=
begin
  suffices : ‚àÄ·∂† Œµ : ‚Ñù in ùìù[<] 0, ‚à•exp (Œµ * z) ‚Ä¢ f z‚à• ‚â§ C,
  { refine le_of_tendsto (tendsto.mono_left _ nhds_within_le_nhds) this,
    apply ((continuous_of_real.mul continuous_const).cexp.smul continuous_const).norm.tendsto',
    simp, apply_instance },
  filter_upwards [self_mem_nhds_within] with Œµ Œµ‚ÇÄ, change Œµ < 0 at Œµ‚ÇÄ,
  set g : ‚ÑÇ ‚Üí E := Œª z, exp (Œµ * z) ‚Ä¢ f z, change ‚à•g z‚à• ‚â§ C,
  replace hd : diff_cont_on_cl ‚ÑÇ g {z : ‚ÑÇ | 0 < z.re},
    from (differentiable_id.const_mul _).cexp.diff_cont_on_cl.smul hd,
  have hgn : ‚àÄ z, ‚à•g z‚à• = expR (Œµ * z.re) * ‚à•f z‚à•,
  { intro z, rw [norm_smul, norm_eq_abs, abs_exp, of_real_mul_re] },
  refine right_half_plane_of_tendsto_zero_on_real hd _ _ (Œª y, _) hz,
  { refine Exists‚ÇÉ.imp (Œª c hc B hO, (is_O.of_bound 1  _).trans hO) hexp,
    refine (eventually_inf_principal.2 $ eventually_of_forall $ Œª z hz, _),
    rw [hgn, one_mul],
    refine mul_le_of_le_one_left (norm_nonneg _) (real.exp_le_one_iff.2 _),
    exact mul_nonpos_of_nonpos_of_nonneg Œµ‚ÇÄ.le (le_of_lt hz) },
  { simp_rw [g, ‚Üê of_real_mul, ‚Üê of_real_exp, coe_smul],
    have h‚ÇÄ : tendsto (Œª x : ‚Ñù, expR (Œµ * x)) at_top (ùìù 0),
      from real.tendsto_exp_at_bot.comp (tendsto_const_nhds.neg_mul_at_top Œµ‚ÇÄ tendsto_id),
    exact h‚ÇÄ.zero_smul_is_bounded_under_le hre },
  { rw [hgn, of_real_mul_re, I_re, mul_zero, mul_zero, real.exp_zero, one_mul],
    exact him y }
end

/-- **Phragmen-Lindel√∂f principle** in the right half-plane. Let `f : ‚ÑÇ ‚Üí E` be a function such that

* `f` is differentiable in the open right half-plane and is continuous on its closure;
* `‚à•f z‚à•` is bounded from above by `A * exp(B * (abs z) ^ c)` on the open right half-plane
  for some `c < 2`;
* `‚à•f z‚à•` is bounded from above by a constant on the imaginary axis;
* `f x`, `x : ‚Ñù`, tends to zero superexponentially fast as `x ‚Üí ‚àû`:
  for any natural `n`, `exp (n * x) * ‚à•f x‚à•` tends to zero as `x ‚Üí ‚àû`.

Then `f` is equal to zero on the closed right half-plane. -/
lemma eq_zero_on_right_half_plane_of_superexponential_decay
  (hd : diff_cont_on_cl ‚ÑÇ f {z | 0 < z.re})
  (hexp : ‚àÉ (c < (2 : ‚Ñù)) B, is_O f (Œª z, expR (B * (abs z) ^ c))
    (comap abs at_top ‚äì ùìü {z | 0 < z.re}))
  (hre : superpolynomial_decay at_top expR (Œª x, ‚à•f x‚à•))
  (him : ‚àÉ C, ‚àÄ x : ‚Ñù, ‚à•f (x * I)‚à• ‚â§ C) (hz : 0 ‚â§ z.re) :
  f z = 0 :=
begin
  rcases him with ‚ü®C, hC‚ü©,
  revert z,
  suffices : ‚àÄ z : ‚ÑÇ, 0 < z.re ‚Üí f z = 0,
  { simpa only [closure_set_of_lt_re] using eq_on.of_subset_closure this hd.continuous_on
      continuous_on_const subset_closure subset.rfl },
  set g : ‚Ñï ‚Üí ‚ÑÇ ‚Üí E := Œª n z, (exp z) ^ n ‚Ä¢ f z,
  have hg : ‚àÄ n z, ‚à•g n z‚à• = (expR z.re) ^ n * ‚à•f z‚à•,
  { intros n z, simp only [norm_smul, norm_eq_abs, complex.abs_pow, abs_exp] },
  intros z hz,
  suffices H : ‚àÄ n : ‚Ñï, ‚à•g n z‚à• ‚â§ C,
  { contrapose! H,
    simp only [hg],
    exact (((tendsto_pow_at_top_at_top_of_one_lt (real.one_lt_exp_iff.2 hz)).at_top_mul
      (norm_pos_iff.2 H) tendsto_const_nhds).eventually (eventually_gt_at_top C)).exists },
  intro n,
  refine right_half_plane_of_tendsto_zero_on_real (differentiable_exp.pow.diff_cont_on_cl.smul hd)
    _ _ (Œª y, _) hz.le,
  { rcases hexp with ‚ü®c, hc, B, hO‚ü©,
    refine ‚ü®max c 1, max_lt hc one_lt_two, n + max B 0, is_O.of_norm_left _‚ü©,
    simp only [hg],
    refine ((is_O_refl (Œª z : ‚ÑÇ, expR z.re ^ n) _).mul hO.norm_left).trans (is_O.of_bound 1 _),
    simp only [‚Üê real.exp_nat_mul, ‚Üê real.exp_add, real.norm_of_nonneg (real.exp_pos _).le,
      real.exp_le_exp, add_mul, eventually_inf_principal, eventually_comap, one_mul],
    filter_upwards [eventually_ge_at_top (1 : ‚Ñù)] with r hr z hzr hre, subst r,
    refine add_le_add (mul_le_mul_of_nonneg_left _ n.cast_nonneg) _,
    { calc z.re ‚â§ abs z : re_le_abs _
      ... = abs z ^ (1 : ‚Ñù) : (real.rpow_one _).symm
      ... ‚â§ abs z ^ (max c 1) : real.rpow_le_rpow_of_exponent_le hr (le_max_right _ _) },
    { exact mul_le_mul (le_max_left _ _) (real.rpow_le_rpow_of_exponent_le hr (le_max_left _ _))
        (real.rpow_nonneg_of_nonneg (abs_nonneg _) _) (le_max_right _ _) } },
  { rw tendsto_zero_iff_norm_tendsto_zero, simp only [hg],
    exact hre n },
  { rw [hg, of_real_mul_re, I_re, mul_zero, real.exp_zero, one_pow, one_mul],
    exact hC y }
end

end phragmen_lindelof
