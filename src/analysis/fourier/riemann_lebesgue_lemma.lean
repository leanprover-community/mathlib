/-
Copyright (c) 2022 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import measure_theory.function.lp_space
import measure_theory.function.continuous_map_dense
import measure_theory.integral.interval_integral
import measure_theory.integral.integral_eq_improper
import measure_theory.group.integration
import topology.continuous_function.zero_at_infty

/-!
# The Riemann-Lebesgue Lemma

In this file we prove a weak form of the Riemann-Lebesgue lemma, stating that for any
compactly-supported continuous function `f` on `‚Ñù` (valued in some complete normed space `E`), the
integral

`‚à´ (x : ‚Ñù), exp (I * t * x) ‚Ä¢ f x`

tends to zero as `t ‚Üí ‚àû`. (The actual lemma is that this holds for all `L¬π` functions `f`, which
follows from the result proved here together with the fact that continuous, compactly-supported
functions are dense in `L¬π(‚Ñù)`, which will be proved in a future iteration.)

## Main results

- `tendsto_integral_mul_exp_at_top_of_continuous_compact_support`: the Riemann-Lebesgue lemma for
  continuous compactly-supported functions on `‚Ñù`.
-/

open measure_theory filter complex set
open_locale filter topology real ennreal

section continuous_compact_support

variables {E : Type*} [normed_add_comm_group E] [normed_space ‚ÑÇ E] {f : ‚Ñù ‚Üí E}

/-- The integrand in the Riemann-Lebesgue lemma is integrable. -/
lemma fourier_integrand_integrable (hf : integrable f) (t : ‚Ñù) :
  integrable (Œª x:‚Ñù, exp (I * t * x) ‚Ä¢ f x) :=
begin
  rw ‚Üêintegrable_norm_iff,
  simp_rw [norm_smul, norm_eq_abs, mul_assoc, ‚Üêof_real_mul, mul_comm I _,
    abs_exp_of_real_mul_I, one_mul],
  exacts [hf.norm, ((continuous_exp.comp $ continuous_const.mul
    continuous_of_real).ae_strongly_measurable).smul hf.1],
end

variable [complete_space E]

/-- Shifting `f` by `œÄ / t` negates the integral in the Riemann-Lebesgue lemma. -/
lemma fourier_integral_half_period_translate {t : ‚Ñù} (ht : t ‚â† 0) :
  ‚à´ x:‚Ñù, exp (I * t * x) ‚Ä¢ f (x + œÄ / t) = -‚à´ x:‚Ñù, exp (I * t * x) ‚Ä¢ f x :=
begin
  have : (Œª x:‚Ñù, exp (I * t * x) ‚Ä¢ f (x + œÄ / t)) =
    (Œª x:‚Ñù, (Œª y:‚Ñù, -exp (I * t * y) ‚Ä¢ f y) (x + œÄ / t)),
  { ext1 x, dsimp only,
    rw [complex.of_real_add, mul_add, add_comm, exp_add, ‚Üêneg_mul],
    replace ht := complex.of_real_ne_zero.mpr ht,
    have : I * ‚Üët * ‚Üë(œÄ / t) = œÄ * I, by { field_simp, ring},
    rw [this, exp_pi_mul_I], ring_nf, },
  rw [this, integral_add_right_eq_self],
  simp_rw [neg_smul, integral_neg],
end

/-- Rewrite the Riemann-Lebesgue integral in a form that allows us to use uniform continuity. -/
lemma fourier_integral_eq_half_sub_half_period_translate
  {t : ‚Ñù} (ht : t ‚â† 0) (hf : integrable f) :
  ‚à´ x:‚Ñù, exp (I * t * x) ‚Ä¢ f x = (1 / (2 : ‚ÑÇ)) ‚Ä¢ ‚à´ x:‚Ñù, exp (I * t * x) ‚Ä¢ (f x - f (x + œÄ / t)) :=
begin
  simp_rw [smul_sub],
  rw [integral_sub, fourier_integral_half_period_translate ht, sub_eq_add_neg, neg_neg,
    ‚Üêtwo_smul ‚ÑÇ _, ‚Üê@smul_assoc _ _ _ _ _ _ (is_scalar_tower.left ‚ÑÇ), smul_eq_mul],
  norm_num,
  exacts [fourier_integrand_integrable hf t,
    fourier_integrand_integrable (hf.comp_add_right (œÄ / t)) t],
end

/-- Riemann-Lebesgue Lemma for continuous and compactly-supported functions: the integral
`‚à´ x, exp (I * t * x) ‚Ä¢ f x` tends to 0 as `t` gets large.  -/
lemma tendsto_integral_mul_exp_at_top_of_continuous_compact_support
  (hf1 : continuous f) (hf2 : has_compact_support f) :
  tendsto (Œª t:‚Ñù, ‚à´ x:‚Ñù, exp (I * t * x) ‚Ä¢ f x) at_top (ùìù 0) :=
begin
  simp_rw [normed_add_comm_group.tendsto_nhds_zero, eventually_at_top, ge_iff_le],
  intros Œµ hŒµ,
  -- Extract an explicit candidate bound on `t` from uniform continuity.
  obtain ‚ü®R, hR1, hR2‚ü© := hf2.exists_pos_le_norm,
  obtain ‚ü®Œ¥, hŒ¥1, hŒ¥2‚ü© := metric.uniform_continuous_iff.mp
    (hf2.uniform_continuous_of_continuous hf1) (Œµ / (1 + 2 * R)) (div_pos hŒµ (by positivity)),
  refine ‚ü®max œÄ (1 + œÄ / Œ¥), Œª t ht, _‚ü©,
  have tpos : 0 < t := lt_of_lt_of_le real.pi_pos ((le_max_left _ _).trans ht),
  -- Rewrite integral in terms of `f x - f (x + œÄ / t)`.
  rw fourier_integral_eq_half_sub_half_period_translate (lt_of_lt_of_le
    (lt_max_of_lt_left real.pi_pos) ht).ne' (hf1.integrable_of_has_compact_support hf2),
  rw [norm_smul, norm_eq_abs, ‚Üêcomplex.of_real_one, ‚Üêof_real_bit0, ‚Üêof_real_div,
    complex.abs_of_nonneg one_half_pos.le],
  have : Œµ = (1 / 2) * (2 * Œµ), by { field_simp, ring, },
  rw [this, mul_lt_mul_left (one_half_pos : (0:‚Ñù) < 1/2)],
  have : ‚Äñ‚à´ (x : ‚Ñù), exp (I * ‚Üët * ‚Üëx) ‚Ä¢ (f x - f (x + œÄ / t))‚Äñ ‚â§ ‚à´ (x : ‚Ñù),
    ‚Äñexp (I * ‚Üët * ‚Üëx) ‚Ä¢ (f x - f (x + œÄ / t))‚Äñ, from norm_integral_le_integral_norm _,
  refine lt_of_le_of_lt this _,
  have : ‚àÄ (x : ‚Ñù), ‚Äñexp (I * t * x)‚Äñ = 1,
  { intro x, rw [mul_assoc, ‚Üêcomplex.of_real_mul, mul_comm, norm_eq_abs, abs_exp_of_real_mul_I], },
  simp_rw [norm_smul, this, one_mul],
  -- Show integral can be taken over `[-(R + 1), R] ‚äÇ ‚Ñù`.
  let A := Icc (-(R + 1)) R,
  have int_Icc :
    ‚à´ (x : ‚Ñù), ‚Äñf x - f (x + œÄ / t)‚Äñ = ‚à´ x in A, ‚Äñf x - f (x + œÄ / t)‚Äñ,
  { rw ‚Üêintegral_indicator (measurable_set_Icc : measurable_set A),
    congr' 1 with x,
    symmetry,
    refine (indicator_apply_eq_self.mpr (Œª hx, _)),
    rw [mem_Icc, not_and_distrib, not_le, not_le, lt_neg] at hx,
    suffices : (f x = 0 ‚àß f (x + œÄ / t) = 0), by { rw [this.1, this.2, sub_zero, norm_zero], },
    have tp := real.pi_pos.trans_le ((le_max_left _ _).trans ht),
    refine ‚ü®hR2 x $ le_abs.mpr _, hR2 _ $ le_abs.mpr _‚ü©,
    { cases hx,
      { exact or.inr ((le_add_of_nonneg_right zero_le_one).trans hx.le) },
      { exact or.inl hx.le } },
    { cases hx,
      { refine or.inr _,
        rw [neg_add, ‚Üêsub_eq_add_neg, le_sub_iff_add_le],
        refine le_trans (add_le_add_left _ R) hx.le,
        exact (div_le_one tp).mpr ((le_max_left _ _).trans ht) },
      { exact or.inl (hx.trans $ lt_add_of_pos_right _ $ div_pos real.pi_pos tp).le } } },
  rw int_Icc,
  -- Bound integral using fact that ‚Äñf x - f (x + œÄ / t)‚Äñ is small.
  have bdA : ‚àÄ x : ‚Ñù, (x ‚àà A) ‚Üí ‚Äñ ‚Äñf x - f (x + œÄ / t) ‚Äñ ‚Äñ ‚â§ Œµ / (1 + 2 * R),
  { simp_rw norm_norm,
    refine (Œª x _, le_of_lt _),
    simp_rw dist_eq_norm at hŒ¥2,
    apply hŒ¥2,
    rw [sub_add_cancel', real.norm_eq_abs, abs_neg, abs_of_pos (div_pos real.pi_pos tpos),
      div_lt_iff tpos, mul_comm, ‚Üêdiv_lt_iff hŒ¥1],
    linarith [(le_max_right œÄ (1 + œÄ / Œ¥)).trans ht] },
  have bdA2 := norm_set_integral_le_of_norm_le_const (measure_Icc_lt_top : volume A < ‚àû) bdA _,
  swap, { apply continuous.ae_strongly_measurable,
    exact (continuous_norm.comp $ continuous.sub hf1 $ continuous.comp hf1 $
    continuous_id'.add continuous_const) },
  have : ‚Äñ _ ‚Äñ = ‚à´ (x : ‚Ñù) in A, ‚Äñf x - f (x + œÄ / t)‚Äñ :=
    real.norm_of_nonneg (set_integral_nonneg measurable_set_Icc (Œª x hx, norm_nonneg _)),
  rw this at bdA2,
  refine lt_of_le_of_lt bdA2 _,
  rw [real.volume_Icc, (by ring : R - (-(R + 1)) = 1 + 2 * R)],
  have hh : 0 < 1 + 2 * R, by positivity,
  rw [ennreal.to_real_of_real hh.le, div_mul_cancel _ hh.ne', two_mul],
  exact lt_add_of_pos_left _ hŒµ,
end

end continuous_compact_support
