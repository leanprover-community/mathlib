/-
Copyright (c) 2022 Jiale Miao. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiale Miao, Kevin Buzzard
-/

import analysis.inner_product_space.projection
import order.well_founded_set
import analysis.inner_product_space.pi_L2

/-!
# Gram-Schmidt Orthogonalization and Orthonormalization

In this file we introduce Gram-Schmidt Orthogonalization and Orthonormalization.

The Gram-Schmidt process takes a set of vectors as input
and outputs a set of orthogonal vectors which have the same span.

## Main results

- `gram_schmidt` : the Gram-Schmidt process
- `gram_schmidt_orthogonal` :
  `gram_schmidt` produces an orthogonal system of vectors.
- `span_gram_schmidt` :
  `gram_schmidt` preserves span of vectors.
- `gram_schmidt_ne_zero` :
  If the input vectors of `gram_schmidt` are linearly independent,
  then the output vectors are non-zero.
- `gram_schmidt_basis` :
  The basis produced by the Gram-Schmidt process when given a basis as input.
- `gram_schmidt_normed` :
  the normalized `gram_schmidt` (i.e each vector in `gram_schmidt_normed` has unit length.)
- `gram_schmidt_orthornormal` :
  `gram_schmidt_normed` produces an orthornormal system of vectors.

## TODO
  Construct a version with an orthonormal basis from Gram-Schmidt process.
-/

open_locale big_operators
open finset

variables (ùïú : Type*) {E : Type*} [is_R_or_C ùïú] [inner_product_space ùïú E]
variables {Œπ : Type*} [linear_order Œπ] [order_bot Œπ]
variables [locally_finite_order Œπ] [is_well_order Œπ (<)]

local attribute [instance] is_well_order.to_has_well_founded

local notation `‚ü™`x`, `y`‚ü´` := @inner ùïú _ _ x y

/-- The Gram-Schmidt process takes a set of vectors as input
and outputs a set of orthogonal vectors which have the same span. -/
noncomputable def gram_schmidt (f : Œπ ‚Üí E) : Œπ ‚Üí E
| n := f n - ‚àë i : Iio n, orthogonal_projection (ùïú ‚àô gram_schmidt i) (f n)
using_well_founded { dec_tac := `[exact (mem_Ico.1 i.2).2] }

/-- This lemma uses `‚àë i in` instead of `‚àë i :`.-/
lemma gram_schmidt_def (f : Œπ ‚Üí E) (n : Œπ):
  gram_schmidt ùïú f n = f n - ‚àë i in Iio n,
    orthogonal_projection (ùïú ‚àô gram_schmidt ùïú f i) (f n) :=
by { rw [‚Üêsum_attach, attach_eq_univ, gram_schmidt], refl }

lemma gram_schmidt_def' (f : Œπ ‚Üí E) (n : Œπ):
  f n = gram_schmidt ùïú f n + ‚àë i in Iio n,
    orthogonal_projection (ùïú ‚àô gram_schmidt ùïú f i) (f n) :=
by rw [gram_schmidt_def, sub_add_cancel]

@[simp] lemma gram_schmidt_zero (f : Œπ ‚Üí E) :
  gram_schmidt ùïú f ‚ä• = f ‚ä• :=
by rw [gram_schmidt_def, Iio, finset.Ico_self, finset.sum_empty, sub_zero]

/-- **Gram-Schmidt Orthogonalisation**:
`gram_schmidt` produces an orthogonal system of vectors. -/
theorem gram_schmidt_orthogonal (f : Œπ ‚Üí E) {a b : Œπ} (h‚ÇÄ : a ‚â† b) :
  ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0 :=
begin
  suffices : ‚àÄ a b : Œπ, a < b ‚Üí ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0,
  { cases h‚ÇÄ.lt_or_lt with ha hb,
    { exact this _ _ ha, },
    { rw inner_eq_zero_sym,
      exact this _ _ hb, }, },
  clear h‚ÇÄ a b,
  intros a b h‚ÇÄ,
  revert a,
  apply well_founded.induction (@is_well_order.wf Œπ (<) _) b,
  intros b ih a h‚ÇÄ,
  simp only [gram_schmidt_def ùïú f b, inner_sub_right, inner_sum,
    orthogonal_projection_singleton, inner_smul_right],
  rw finset.sum_eq_single_of_mem a (finset.mem_Iio.mpr h‚ÇÄ),
  { by_cases h : gram_schmidt ùïú f a = 0,
    { simp only [h, inner_zero_left, zero_div, zero_mul, sub_zero], },
    { rw [‚Üê inner_self_eq_norm_sq_to_K, div_mul_cancel, sub_self],
      rwa [ne.def, inner_self_eq_zero], }, },
  simp_intros i hi hia only [finset.mem_range],
  simp only [mul_eq_zero, div_eq_zero_iff, inner_self_eq_zero],
  right,
  cases hia.lt_or_lt with hia‚ÇÅ hia‚ÇÇ,
  { rw inner_eq_zero_sym,
    exact ih a h‚ÇÄ i hia‚ÇÅ },
  { exact ih i (mem_Ico.1 hi).2 a hia‚ÇÇ }
end

/-- This is another version of `gram_schmidt_orthogonal` using `pairwise` instead. -/
theorem gram_schmidt_pairwise_orthogonal (f : Œπ ‚Üí E) :
  pairwise (Œª a b, ‚ü™gram_schmidt ùïú f a, gram_schmidt ùïú f b‚ü´ = 0) :=
Œª a b, gram_schmidt_orthogonal ùïú f

open submodule set order

lemma mem_span_gram_schmidt (f : Œπ ‚Üí E) (i j : Œπ) (hij : i ‚â§ j) :
  f i ‚àà span ùïú (gram_schmidt ùïú f '' Iic j) :=
begin
  rw [gram_schmidt_def' ùïú f i],
  refine submodule.add_mem _ (subset_span (mem_image_of_mem _ hij)) _,
  apply submodule.sum_mem _ (Œª k hk, _),
  rw [orthogonal_projection_singleton],
  apply smul_mem (span ùïú (gram_schmidt ùïú f '' Iic j)) _
    (subset_span (set.mem_image_of_mem (gram_schmidt ùïú f) _)),
  exact (le_of_lt (finset.mem_Iio.1 hk)).trans hij
end

lemma gram_schmidt_mem_span (f : Œπ ‚Üí E) (j : Œπ) :
  ‚àÄ i, i ‚â§ j ‚Üí gram_schmidt ùïú f i ‚àà span ùïú (f '' Iic j) :=
begin
  apply well_founded.induction (@is_well_order.wf Œπ (<) _) j,
  intros j ih i hij,
  rw [gram_schmidt_def ùïú f i],
  refine submodule.sub_mem _ (subset_span (mem_image_of_mem _ hij))
    (submodule.sum_mem _ (Œª k hk, _)),
  simp only [orthogonal_projection_singleton],
  apply smul_mem _ _ _,
  apply span_mono,
  apply set.image_subset f (Iic_subset_Iic.2 ((le_of_lt (finset.mem_Iio.1 hk)).trans hij)),
  exact ih k (lt_of_lt_of_le (finset.mem_Iio.1 hk) hij) k (le_refl k),
end

lemma span_gram_schmidt_Iic (f : Œπ ‚Üí E) (c : Œπ) :
  span ùïú (gram_schmidt ùïú f '' Iic c) = span ùïú (f '' Iic c) :=
begin
  apply span_eq_span,
  { intros x hx,
    rw set.mem_image at hx,
    rcases hx with ‚ü®i, hi, hix‚ü©,
    rw [‚Üê hix],
    exact gram_schmidt_mem_span _ _ c i hi },
  { intros x hx,
    rw set.mem_image at hx,
    rcases hx with ‚ü®i, hi, hix‚ü©,
    rw [‚Üê hix],
    exact mem_span_gram_schmidt _ _ i c hi }
end

lemma span_gram_schmidt_Iio (f : Œπ ‚Üí E) (c : Œπ) :
  span ùïú (gram_schmidt ùïú f '' Iio c) = span ùïú (f '' Iio c) :=
begin
  apply span_eq_span,
  { intros x hx,
    rw set.mem_image at hx,
    rcases hx with ‚ü®i, hi, hix‚ü©,
    rw [‚Üê hix],
    exact span_mono (set.image_subset f (Iic_subset_Iio.2 hi))
      (gram_schmidt_mem_span ùïú f i i (le_refl i)) },
  { intros x hx,
    rw set.mem_image at hx,
    rcases hx with ‚ü®i, hi, hix‚ü©,
    rw [‚Üê hix],
    exact span_mono (set.image_subset _ (Iic_subset_Iio.2 hi))
      (mem_span_gram_schmidt ùïú f i i (le_refl i)) }
end

/-- `gram_schmidt` preserves span of vectors. -/
lemma span_gram_schmidt (f : Œπ ‚Üí E) :
  span ùïú (range (gram_schmidt ùïú f)) = span ùïú (range f) :=
begin
  apply span_eq_span,
  { intros x hx,
    rw set.mem_range at hx,
    rcases hx with ‚ü®i, hix‚ü©,
    rw [‚Üê hix],
    exact span_mono (image_subset_range _ (Iic i)) (gram_schmidt_mem_span ùïú f i i (le_refl i)) },
  { intros x hx,
    rw set.mem_range at hx,
    rcases hx with ‚ü®i, hix‚ü©,
    rw [‚Üê hix],
    exact span_mono (image_subset_range _ (Iic i)) (mem_span_gram_schmidt ùïú f i i (le_refl i)) }
end

/-- If the input vectors of `gram_schmidt` are linearly independent,
then the output vectors are non-zero. -/
lemma gram_schmidt_ne_zero (f : Œπ ‚Üí E) (n : Œπ) (h‚ÇÄ : linear_independent ùïú f) :
  gram_schmidt ùïú f n ‚â† 0 :=
begin
  by_contra h,
  have h‚ÇÉ : f n ‚àà span ùïú (f '' Iio n),
  { rw [‚Üê span_gram_schmidt_Iio ùïú f n, gram_schmidt_def' _ f, h, zero_add],
    apply submodule.sum_mem _ _,
    simp_intros a ha only [finset.mem_Ico],
    simp only [set.mem_image, set.mem_Iio, orthogonal_projection_singleton],
    apply submodule.smul_mem _ _ _,
    rw finset.mem_Iio at ha,
    refine subset_span ‚ü®a, ha, by refl‚ü©, },
  apply linear_independent.not_mem_span_image h‚ÇÄ _ h‚ÇÉ,
  simp only [set.mem_Iio, lt_self_iff_false, not_false_iff]
end

/-- `gram_schmidt` produces a triangular matrix of vectors when given a basis. -/
lemma gram_schmidt_triangular {i j : Œπ} (hij : i < j) (b : basis Œπ ùïú E) :
  b.repr (gram_schmidt ùïú b i) j = 0 :=
begin
  have : gram_schmidt ùïú b i ‚àà span ùïú (gram_schmidt ùïú b '' set.Iio j),
    from subset_span ((set.mem_image _ _ _).2 ‚ü®i, hij, rfl‚ü©),
  have : gram_schmidt ùïú b i ‚àà span ùïú (b '' set.Iio j),
    by rwa [‚Üê span_gram_schmidt_Iio ùïú b j],
  have : ‚Üë(((b.repr) (gram_schmidt ùïú b i)).support) ‚äÜ set.Iio j,
    from basis.repr_support_of_mem_span b (set.Iio j) (gram_schmidt ùïú b i) this,
  exact (finsupp.mem_supported' _ _).1
    ((finsupp.mem_supported ùïú _).2 this) j (not_mem_Iio.2 (le_refl j)),
end

/-- `gram_schmidt` produces linearly independent vectors when given linearly independent vectors. -/
lemma gram_schmidt_linear_independent (f : Œπ ‚Üí E) (h‚ÇÄ : linear_independent ùïú f) :
  linear_independent ùïú (gram_schmidt ùïú f) :=
linear_independent_of_ne_zero_of_inner_eq_zero
    (Œª i, gram_schmidt_ne_zero _ _ _ h‚ÇÄ) (Œª i j, gram_schmidt_orthogonal ùïú f)

/-- When given a basis, `gram_schmidt` produces a basis. -/
noncomputable def gram_schmidt_basis (b : basis Œπ ùïú E) : basis Œπ ùïú E :=
basis.mk
  (gram_schmidt_linear_independent ùïú b b.linear_independent)
  ((span_gram_schmidt ùïú b).trans b.span_eq)

lemma coe_gram_schmidt_basis (b : basis Œπ ùïú E) :
  (gram_schmidt_basis ùïú b : Œπ ‚Üí E) = gram_schmidt ùïú b := basis.coe_mk _ _

/-- the normalized `gram_schmidt`
(i.e each vector in `gram_schmidt_normed` has unit length.) -/
noncomputable def gram_schmidt_normed (f : Œπ ‚Üí E) (n : Œπ) : E :=
(‚à•gram_schmidt ùïú f n‚à• : ùïú)‚Åª¬π ‚Ä¢ (gram_schmidt ùïú f n)

lemma gram_schmidt_normed_unit_length (f : Œπ ‚Üí E) (n : Œπ) (h‚ÇÄ : linear_independent ùïú f) :
  ‚à•gram_schmidt_normed ùïú f n‚à• = 1 :=
by simp only [gram_schmidt_ne_zero ùïú f n h‚ÇÄ,
  gram_schmidt_normed, norm_smul_inv_norm, ne.def, not_false_iff]

/-- **Gram-Schmidt Orthonormalization**:
`gram_schmidt_normed` produces an orthornormal system of vectors. -/
theorem gram_schmidt_orthonormal (f : Œπ ‚Üí E) (h‚ÇÄ : linear_independent ùïú f) :
  orthonormal ùïú (gram_schmidt_normed ùïú f) :=
begin
  unfold orthonormal,
  split,
  { simp only [gram_schmidt_normed_unit_length, h‚ÇÄ, forall_const] },
  { intros i j hij,
    simp only [gram_schmidt_normed, inner_smul_left, inner_smul_right, is_R_or_C.conj_inv,
      is_R_or_C.conj_of_real, mul_eq_zero, inv_eq_zero, is_R_or_C.of_real_eq_zero, norm_eq_zero],
    repeat { right },
    exact gram_schmidt_orthogonal ùïú f hij }
end

lemma span_gram_schmidt_normed (f : Œπ ‚Üí E) (s : set Œπ):
  span ùïú (gram_schmidt_normed ùïú f '' s) = span ùïú (gram_schmidt ùïú f '' s) :=
begin
  apply span_eq_span,
  { intros x hx,
    rw set.mem_image at hx,
    rcases hx with ‚ü®i, hi, hix‚ü©,
    rw [‚Üê hix],
    exact smul_mem (span ùïú _) ((‚Üë‚à•gram_schmidt ùïú f i‚à•)‚Åª¬π)
      (subset_span (set.mem_image_of_mem _ hi)) },
  { intros x hx,
    rw set.mem_image at hx,
    rcases hx with ‚ü®i, hi, hix‚ü©,
    rw [‚Üê hix],
    refine span_mono (image_subset _ (singleton_subset_set_iff.2 hi)) _,
    simp only [coe_singleton, set.image_singleton],
    by_cases h : gram_schmidt ùïú f i = 0,
    { simp [h] },
    haveI : invertible (‚à•gram_schmidt ùïú f i‚à• : ùïú),
    { apply invertible_of_nonzero,
      simpa using h },
    haveI : invertible (‚à•gram_schmidt ùïú f i‚à• : ùïú)‚Åª¬π := invertible_inv,
    rw [gram_schmidt_normed, span_singleton_smul_eq],
    { apply mem_span_singleton_self },
    { apply is_unit_of_invertible } }
end

lemma span_gram_schmidt_normed_range (f : Œπ ‚Üí E) :
  span ùïú (range (gram_schmidt_normed ùïú f)) = span ùïú (range (gram_schmidt ùïú f)) :=
by simpa only [image_univ.symm] using span_gram_schmidt_normed ùïú f univ

/-- When given a basis, `gram_schmidt_normed` produces an orthonormal basis. -/
noncomputable def gram_schmidt_orthonormal_basis [fintype Œπ] (b : basis Œπ ùïú E) :
  orthonormal_basis Œπ ùïú E :=
orthonormal_basis.mk
  (gram_schmidt_orthonormal ùïú b b.linear_independent)
  (((span_gram_schmidt_normed_range ùïú b).trans (span_gram_schmidt ùïú b)).trans b.span_eq)
