/-
Copyright (c) 2021 Devon Tuma. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Devon Tuma
-/
import analysis.asymptotics.asymptotics
import analysis.special_functions.polynomials
import algebra.archimedean

lemma norm_coe_nat_le_coe (R : Type*) [semi_normed_ring R] [norm_one_class R] :
  ‚àÄ (n : ‚Ñï), ‚à•(n : R)‚à• ‚â§ (n : ‚Ñù)
| 0 := by simp
| (n + 1) := begin
  simp only [nat.cast_add, nat.cast_one],
  refine (norm_add_le _ _).trans _,
  refine add_le_add (norm_coe_nat_le_coe n) (le_of_eq _),
  refine norm_one,
end

lemma coe_nat_is_O_coe_nat (R : Type*) [semi_normed_ring R] [norm_one_class R] :
  asymptotics.is_O (coe : ‚Ñï ‚Üí R) (coe : ‚Ñï ‚Üí ‚Ñù) filter.at_top :=
begin
  refine asymptotics.is_O_of_le filter.at_top (Œª n, _),
  refine le_trans (norm_coe_nat_le_coe R n) _,
  simp,
end

-- lemma exists_norm_coe_nat_gt (x : ‚Ñù) : ‚àÉ (n : ‚Ñï), x < ‚à•(n : ‚Ñù)‚à• :=
-- let ‚ü®n, hn‚ü© := exists_nat_gt x in
--   ‚ü®n, lt_of_lt_of_le hn (le_of_eq (real.norm_coe_nat n).symm)‚ü©

-- @[simp]
-- lemma norm_coe_nat_le_iff (n m : ‚Ñï) :
--   ‚à•(n : ‚Ñù)‚à• ‚â§ ‚à•(m : ‚Ñù)‚à• ‚Üî n ‚â§ m :=
-- by simp only [real.norm_coe_nat, nat.cast_le]

lemma real.norm_coe_nat_eventually_ge (c : ‚Ñù) :
  ‚àÄ·∂† (x : ‚Ñï) in filter.at_top, c ‚â§ ‚à•(x : ‚Ñù)‚à• :=
begin
  simp only [filter.eventually_at_top, real.norm_coe_nat, ge_iff_le],
  obtain ‚ü®y, hy‚ü© := exists_nat_ge c,
  exact ‚ü®y, Œª x hx, hy.trans $ nat.cast_le.mpr hx‚ü©,
end

lemma nat_coe_tendsto_at_top (R : Type*) [ordered_ring R] [nontrivial R] [archimedean R] :
  filter.tendsto (Œª (n : ‚Ñï), (‚Üën : R)) filter.at_top filter.at_top :=
begin
  refine filter.tendsto_at_top.2 (Œª x, _),
  obtain ‚ü®m, hm‚ü© := exists_nat_ge x,
  rw filter.eventually_at_top,
  refine ‚ü®m, Œª y hy, hm.trans $ nat.cast_le.2 hy‚ü©,
end

namespace asymptotics

lemma fpow_is_O_fpow_of_le {Œ± ùïú : Type*} [preorder Œ±] [normed_field ùïú]
  {f : Œ± ‚Üí ùïú} {a b : ‚Ñ§} (hab : a ‚â§ b)
  (h : ‚àÄ·∂† (x : Œ±) in filter.at_top, 1 ‚â§ ‚à•f x‚à•):
  (is_O (Œª n, (f n) ^ a) (Œª n, (f n) ^ b) filter.at_top) :=
begin
  refine is_O.of_bound 1 (filter.sets_of_superset filter.at_top h (Œª x hx, _)),
  simp only [one_mul, normed_field.norm_fpow, set.mem_set_of_eq],
  exact fpow_le_of_le hx hab,
end

/-- Definition of negligible functions over an arbitrary `normed_field`.
  Note that the second function always has type `‚Ñï ‚Üí ‚Ñù`, which generally gives better lemmas. -/
def negligible {ùïú : Type*} [normed_ring ùïú] (f : ‚Ñï ‚Üí ùïú) :=
‚àÄ (c : ‚Ñ§), is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top

variables {ùïú : Type*} [normed_field ùïú]
variables {f g : ‚Ñï ‚Üí ùïú}

lemma negligible_of_is_O (hg : negligible g)
  (h : is_O f g filter.at_top) : negligible f :=
Œª c, h.trans $ hg c

lemma negligible_of_eventually_le (hg : negligible g)
  (h : ‚àÄ·∂† n in filter.at_top, ‚à•f n‚à• ‚â§ ‚à•g n‚à•) : negligible f :=
negligible_of_is_O hg $ is_O_iff.2 ‚ü®1, by simpa only [one_mul] using h‚ü©

/-- It suffices to check the negligiblity condition for only sufficiently small exponents -/
lemma negligible_of_eventually_is_O
  (h : ‚àÄ·∂† (c : ‚Ñ§) in filter.at_bot, is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top) :
  negligible f :=
begin
  obtain ‚ü®C, hC‚ü© := filter.eventually_at_bot.mp h,
  intro c,
  by_cases hc : c ‚â§ C,
  { exact hC c hc },
  { exact (hC C le_rfl).trans
      (fpow_is_O_fpow_of_le (le_of_not_le hc) (real.norm_coe_nat_eventually_ge 1)) }
end

lemma negligible_of_is_O_fpow_le (C : ‚Ñ§)
  (h : ‚àÄ c ‚â§ C, is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top) :
  negligible f :=
begin
  refine negligible_of_eventually_is_O _,
  rw filter.eventually_at_bot,
  refine ‚ü®C, h‚ü©,
end

lemma negligible_of_is_O_fpow_lt (C : ‚Ñ§)
  (h : ‚àÄ c < C, is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top) :
  negligible f :=
begin
  refine negligible_of_is_O_fpow_le C.pred (Œª c hc, _),
  refine h c _,
  refine lt_of_le_of_lt hc _,
  refine int.pred_self_lt C,
end

lemma tendsto_zero_of_negligible (hf : negligible f) :
  filter.tendsto f filter.at_top (nhds 0) :=
begin
  refine is_O.trans_tendsto (hf (-1)) _,
  have : (Œª (n : ‚Ñï), (n : ‚Ñù) ^ (-1 : ‚Ñ§)) = (has_inv.inv : ‚Ñù ‚Üí ‚Ñù) ‚àò (coe : ‚Ñï ‚Üí ‚Ñù),
  by simp only [gpow_one, fpow_neg],
  rw this,
  refine filter.tendsto.comp (tendsto_inv_at_top_zero) (nat_coe_tendsto_at_top ‚Ñù),
end

lemma norm_eventually_le_of_negligible
  (hf : negligible f) (x‚ÇÄ : ‚Ñù) (hx‚ÇÄ : 0 < x‚ÇÄ) :
  ‚àÄ·∂† (n : ‚Ñï) in filter.at_top, ‚à•f n‚à• ‚â§ x‚ÇÄ :=
begin
  specialize hf (-1),
  rw is_O_iff at hf,
  obtain ‚ü®c, hc‚ü© := hf,
  refine filter.eventually.mp hc _,
  have : ‚àÄ·∂† (n : ‚Ñï) in filter.at_top, c * ‚à•(n : ‚Ñù) ^ (-1 : ‚Ñ§)‚à• ‚â§ x‚ÇÄ,
  {
    rw filter.eventually_at_top,
    obtain ‚ü®a, ha‚ü© := exists_nat_ge (c * x‚ÇÄ‚Åª¬π),
    rw mul_inv_le_iff hx‚ÇÄ at ha,
    use (max a 1),
    intros b hb,
    have : 0 < (b : ‚Ñù) := nat.cast_pos.2 (le_trans (le_max_right a 1) hb),
    simp,
    rw [mul_inv_le_iff this, mul_comm _ x‚ÇÄ],
    refine le_trans ha _,
    refine mul_le_mul le_rfl _ (nat.cast_nonneg a) (le_of_lt hx‚ÇÄ),
    refine nat.cast_le.2 (le_trans _ hb),
    refine le_max_left a 1,
  },
  refine filter.eventually.mono this _,
  refine (Œª x hx hx', le_trans hx' hx),
end

@[simp]
lemma negligible_zero : negligible (function.const ‚Ñï (0 : ùïú)) :=
Œª c, is_O_zero _ _

@[simp]
lemma negligable_const_iff [t1_space ùïú] (x : ùïú) :
  negligible (function.const ‚Ñï x) ‚Üî x = 0 :=
begin
  refine ‚ü®Œª h, not_not.1 (Œª hx, _), Œª h, h.symm ‚ñ∏ negligible_zero‚ü©,
  have := tendsto_zero_of_negligible h,
  rw tendsto_nhds at this,
  specialize this {x}·∂ú (is_open_ne) (ne.symm hx),
  have h' : function.const ‚Ñï x ‚Åª¬π' {x}·∂ú = ‚àÖ,
  { refine set.preimage_eq_empty _,
    rw set.range_const,
    exact disjoint_compl_left },
  rw h' at this,
  exact filter.at_top.empty_not_mem this,
end

lemma negligible_add (hf : negligible f) (hg : negligible g) :
  negligible (f + g) :=
Œª c, (hf c).add $ hg c

lemma negligible_mul (hf : negligible f) (hg : negligible g) :
  negligible (f * g) :=
begin
  suffices : is_O (f * g) f filter.at_top,
  from Œª c, this.trans (hf c),
  refine is_O.of_bound 1 _,
  have := norm_eventually_le_of_negligible hg 1 (zero_lt_one),
  refine this.mono (Œª x hx, _),
  rw [pi.mul_apply, normed_field.norm_mul, mul_comm 1 ‚à•f x‚à•],
  refine mul_le_mul le_rfl hx (norm_nonneg $ g x) (norm_nonneg $ f x),
end

lemma negligible_const_mul_iff (f : ‚Ñï ‚Üí ùïú) {c : ùïú} (hc : c ‚â† 0) :
  negligible (Œª n, c * f n) ‚Üî negligible f :=
forall_congr (Œª x, ‚ü®Œª h, is_O.trans (is_O_self_const_mul c hc f filter.at_top) h,
  Œª h, is_O.trans (is_O_const_mul_self c f filter.at_top) h‚ü©)

lemma negligable_const_mul_of_negligable {f : ‚Ñï ‚Üí ùïú} (c : ùïú)
  (hf : negligible f) : negligible (Œª n, c * f n) :=
begin
  by_cases hc : c = 0,
  { simpa only [hc, zero_mul] using negligible_zero },
  { simpa only [hc, ne.def, not_false_iff, negligible_const_mul_iff] using hf }
end

@[simp]
lemma negligible_x_mul_iff [norm_one_class ùïú] (f : ‚Ñï ‚Üí ùïú) :
  negligible (Œª n, n ‚Ä¢ f n) ‚Üî negligible f :=
begin
  refine ‚ü®Œª h, _, Œª h, _‚ü©,
  {
    refine negligible_of_is_O h _,
    sorry,
  },
  { refine negligible_of_is_O_fpow_lt 0 (Œª c hc, _),
    specialize h (c - 1),
    have := is_O.mul (coe_nat_is_O_coe_nat ùïú) h,
    simp at this,
    simp [nsmul_eq_mul],
    refine this.trans _,
    refine is_O_of_le _ (Œª x, le_of_eq (congr_arg _ _)),
    by_cases hx : (x : ‚Ñù) = 0,
    {
      simp [hx, this],
      refine symm (zero_fpow c (ne_of_lt hc)),
    },
    calc (x : ‚Ñù) * ‚Üëx ^ (c - 1) = (‚Üëx ^ (1 : ‚Ñ§)) * (‚Üëx ^ (c - 1)) : by rw gpow_one
      ... = ‚Üëx ^ (1 + (c - 1)) : (fpow_add hx 1 (c - 1)).symm
      ... = ‚Üëx ^ c : congr_arg (Œª g, gpow g (x : ‚Ñù)) (by linarith)
  }

    -- refine is_O.trans (is_O.mul _ _) _,
    -- refine (is_O.mul (is_O_refl (coe : ‚Ñï ‚Üí ùïú) filter.at_top) (h (c - 1))).trans (_),
    -- refine is_O_of_le filter.at_top (Œª x, _),
    -- simp only [one_mul, normed_field.norm_mul, normed_field.norm_fpow, set.mem_set_of_eq],
    -- by_cases hx : (x : ‚Ñù) = 0,
    -- { by_cases hc : c = 0,
    --   { simp [hx, hc, zero_le_one] },
    --   { simp [hx, zero_fpow c hc] } },
    -- {
    --   have : ‚à•(x : ‚Ñù)‚à• ‚â† 0,
    --   by rwa ‚Üê norm_eq_zero at hx,
    --   rw [mul_comm ‚à•(x : ‚Ñù)‚à•, fpow_sub_one this, mul_assoc, inv_mul_cancel this, mul_one],
    --    } }
end


end asymptotics
