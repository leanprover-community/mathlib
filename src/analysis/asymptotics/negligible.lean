/-
Copyright (c) 2021 Devon Tuma. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Devon Tuma
-/
import analysis.asymptotics.asymptotics
import analysis.asymptotics.specific_asymptotics
import data.polynomial.eval

/-!
# Negligible Functions

This file defines a predicate `negligible f` on functions `f` from `‚Ñï` to a normed field `ùïú`.

The main theorem is `negligible_polynomial_mul` that says the product of a polynomial
  and a negligible function is still a negligible function
-/

namespace asymptotics

/-- Definition of negligible functions over an arbitrary `normed_field`.
  Note that the second function always has type `‚Ñï ‚Üí ‚Ñù`, which generally gives better lemmas. -/
def negligible {ùïú : Type*} [normed_ring ùïú] (f : ‚Ñï ‚Üí ùïú) :=
‚àÄ (c : ‚Ñ§), is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top

section normed_ring

variables {R : Type*} [normed_ring R]
variables {f g : ‚Ñï ‚Üí R}

lemma negligible_of_is_O (hg : negligible g)
  (h : is_O f g filter.at_top) : negligible f :=
Œª c, h.trans $ hg c

lemma negligible_of_le (hg : negligible g)
  (h : ‚àÄ n, ‚à•f n‚à• ‚â§ ‚à•g n‚à•) : negligible f :=
negligible_of_is_O hg (is_O_of_le filter.at_top h)

lemma negligible_of_eventually_le (hg : negligible g)
  (h : ‚àÄ·∂† n in filter.at_top, ‚à•f n‚à• ‚â§ ‚à•g n‚à•) : negligible f :=
negligible_of_is_O hg $ is_O_iff.2 ‚ü®1, by simpa only [one_mul] using h‚ü©

/-- It suffices to check the negligiblity condition for only sufficiently small exponents `c`.
  See `negligible_of_is_O_fpow_le` for a version with explicit bounds -/
lemma negligible_of_eventually_is_O
  (h : ‚àÄ·∂† (c : ‚Ñ§) in filter.at_bot, is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top) :
  negligible f :=
begin
  obtain ‚ü®C, hC‚ü© := filter.eventually_at_bot.mp h,
  intro c,
  by_cases hc : c ‚â§ C,
  { exact hC c hc },
  { refine (hC C le_rfl).trans (is_O.of_bound 1 (filter.eventually_at_top.2 ‚ü®1, (Œª b hb, _)‚ü©)),
    simp_rw [one_mul, normed_field.norm_fpow, real.norm_coe_nat],
    have hb : 1 ‚â§ (b : ‚Ñù) := le_trans (le_of_eq nat.cast_one.symm) (nat.cast_le.2 hb),
    exact fpow_le_of_le hb (le_of_not_le hc) }
end

lemma negligible_of_is_O_fpow_le (C : ‚Ñ§)
  (h : ‚àÄ c ‚â§ C, is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top) :
  negligible f :=
negligible_of_eventually_is_O (filter.eventually_at_bot.2 ‚ü®C, h‚ü©)

lemma negligible_of_is_O_fpow_lt (C : ‚Ñ§)
  (h : ‚àÄ c < C, is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top) :
  negligible f :=
negligible_of_is_O_fpow_le C.pred
  (Œª c hc, h c (lt_of_le_of_lt hc (int.pred_self_lt C)))

/-- A negligible function must tend to zero in the base ring (not just in norm) -/
lemma tendsto_zero_of_negligible (hf : negligible f) :
  filter.tendsto f filter.at_top (nhds 0) :=
begin
  refine is_O.trans_tendsto (hf (-1)) _,
  have : (has_inv.inv : ‚Ñù ‚Üí ‚Ñù) ‚àò (coe : ‚Ñï ‚Üí ‚Ñù) = (Œª (n : ‚Ñï), (n : ‚Ñù) ^ (-1 : ‚Ñ§)),
  by simp only [gpow_one, fpow_neg],
  exact this ‚ñ∏ filter.tendsto.comp (tendsto_inv_at_top_zero) (coe_nat_tendsto_at_top ‚Ñù),
end

/-- A negligible function eventually has norm less than any positive bound -/
lemma norm_eventually_le_of_negligible
  (hf : negligible f) (Œµ : ‚Ñù) (hŒµ : 0 < Œµ) :
  ‚àÄ·∂† (n : ‚Ñï) in filter.at_top, ‚à•f n‚à• ‚â§ Œµ :=
begin
  obtain ‚ü®c, hc‚ü© := is_O_iff.1 (hf (-1)),
  have : ‚àÄ·∂† (n : ‚Ñï) in filter.at_top, c * ‚à•(n : ‚Ñù) ^ (-1 : ‚Ñ§)‚à• ‚â§ Œµ,
  { obtain ‚ü®a, ha‚ü© := exists_nat_ge (c * Œµ‚Åª¬π),
    refine filter.eventually_at_top.2 ‚ü®max a 1, Œª b hb, _‚ü©,
    have hb0 : 0 < (b : ‚Ñù) := nat.cast_pos.2 (le_trans (le_max_right a 1) hb),
    have hba : (a : ‚Ñù) ‚â§ (b : ‚Ñù) := nat.cast_le.2 (le_trans (le_max_left a 1) hb),
    rw [fpow_neg, gpow_one, normed_field.norm_inv, real.norm_coe_nat,
      mul_inv_le_iff hb0, mul_comm _ Œµ],
    calc c ‚â§ Œµ * (a : ‚Ñù) : (mul_inv_le_iff hŒµ).1 ha
      ... ‚â§ Œµ * (b : ‚Ñù) : mul_le_mul le_rfl hba (nat.cast_nonneg a) (le_of_lt hŒµ) },
  exact filter.eventually.mp hc (filter.eventually.mono this (Œª x hx hx', le_trans hx' hx)),
end

@[simp]
lemma negligible_zero : negligible (function.const ‚Ñï (0 : R)) :=
Œª c, is_O_zero _ _

lemma negligible_add (hf : negligible f) (hg : negligible g) :
  negligible (f + g) :=
Œª c, is_O.add (hf c) (hg c)

lemma negligible_mul (hf : negligible f) (hg : negligible g) :
  negligible (f * g) :=
begin
  suffices : is_O (f * g) f filter.at_top,
  from Œª c, this.trans (hf c),
  refine is_O.of_bound 1 ((norm_eventually_le_of_negligible hg 1 (zero_lt_one)).mono (Œª x hx, _)),
  rw [pi.mul_apply, mul_comm 1 ‚à•f x‚à•],
  refine le_trans (normed_ring.norm_mul (f x) (g x)) _,
  exact mul_le_mul le_rfl hx (norm_nonneg $ g x) (norm_nonneg $ f x),
end

@[simp]
lemma negligible_const_iff [t1_space R] (x : R) :
  negligible (function.const ‚Ñï x) ‚Üî x = 0 :=
begin
  refine ‚ü®Œª h, not_not.1 (Œª hx, _), Œª h, h.symm ‚ñ∏ negligible_zero‚ü©,
  have : (function.const ‚Ñï x ‚Åª¬π' {x}·∂ú) ‚àà filter.at_top :=
    (tendsto_nhds.1 $ tendsto_zero_of_negligible h) {x}·∂ú (is_open_ne) (ne.symm hx),
  rw [set.preimage_const_of_not_mem (by simp : x ‚àâ ({x} : set R)·∂ú)] at this,
  exact filter.at_top.empty_not_mem this,
end

lemma negligible_const_mul (hf : negligible f) (c : R) :
  negligible (Œª n, c * f n) :=
(negligible_of_is_O hf (is_O_const_mul_self c f filter.at_top))

lemma negligible_const_mul_iff_of_is_unit {c : R} (hc : is_unit c) :
  negligible (Œª n, c * f n) ‚Üî (negligible f) :=
begin
  refine ‚ü®Œª h, _, Œª h, _‚ü©,
  { exact (negligible_of_is_O h (is_O_self_const_mul' hc f filter.at_top)) },
  { exact negligible_const_mul h c },
end

end normed_ring

section normed_field

variables {ùïú : Type*} [normed_field ùïú]
variables {f g : ‚Ñï ‚Üí ùïú}

@[simp]
lemma negligible_const_mul_iff (f : ‚Ñï ‚Üí ùïú) (c : ùïú) :
  negligible (Œª n, c * f n) ‚Üî (c = 0) ‚à® (negligible f) :=
begin
  by_cases hc0 : c = 0,
  { simp [hc0] },
  { exact (negligible_const_mul_iff_of_is_unit (is_unit.mk0 c hc0)).trans
      ‚ü®or.inr, or.rec (Œª hc0', absurd hc0' hc0) id‚ü© }
end

-- TODO: The lemmas below can be generalized to `iff` statements if `‚à•(n : ùïú)‚à•` doesn't tend to 0

lemma negligible_coe_nat_mul (hf : negligible f) :
  negligible (Œª n, (n : ùïú) * f n) :=
begin
  refine negligible_of_is_O_fpow_lt 0 (Œª c hc, _),
  refine is_O.trans (is_O.mul (coe_nat_is_O_coe_nat_real ùïú) (hf (c - 1)))
    (is_O_of_le _ (Œª x, le_of_eq (congr_arg _ _))),
  by_cases hx : (x : ‚Ñù) = 0,
  { simp_rw [hx, zero_mul],
    refine symm (zero_fpow c (ne_of_lt hc)) },
  { calc (x : ‚Ñù) * ‚Üëx ^ (c - 1) = (‚Üëx ^ (1 : ‚Ñ§)) * (‚Üëx ^ (c - 1)) : by rw gpow_one
      ... = ‚Üëx ^ (1 + (c - 1)) : (fpow_add hx 1 (c - 1)).symm
      ... = ‚Üëx ^ c : congr_arg (Œª g, gpow g (x : ‚Ñù)) (by linarith) }
end

lemma negligible_coe_nat_pow_mul (hf : negligible f) (p : ‚Ñï) :
  negligible (Œª n, (n : ùïú) ^ p * f n) :=
begin
  induction p with p hp,
  { simp_rw [pow_zero, one_mul],
    exact hf },
  { simp_rw [pow_succ, mul_assoc],
    exact negligible_coe_nat_mul hp }
end

lemma negligible_nsmul (hf : negligible f) :
  negligible (Œª n, n ‚Ä¢ f n) :=
by simpa [nsmul_eq_mul] using negligible_coe_nat_mul hf

lemma negligible_pow_nsmul (hf : negligible f) (p : ‚Ñï) :
  negligible (Œª n, (n ^ p) ‚Ä¢ f n) :=
by simpa [nsmul_eq_mul] using negligible_coe_nat_pow_mul hf p

theorem negligible_polynomial_mul {ùïú : Type*} [normed_field ùïú]
  {f : ‚Ñï ‚Üí ùïú} (hf : negligible f) (p : polynomial ùïú) :
  negligible (Œª n, (p.eval n) * f n) :=
begin
  refine polynomial.induction_on' p (Œª p q hp hq, _) (Œª m x, _),
  { simp_rw [polynomial.eval_add, add_mul],
    exact negligible_add hp hq },
  { simp_rw [polynomial.eval_monomial, mul_assoc],
    exact negligible_const_mul (negligible_coe_nat_pow_mul hf m) x }
end

end normed_field

end asymptotics
