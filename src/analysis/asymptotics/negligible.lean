/-
Copyright (c) 2021 Devon Tuma. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Devon Tuma
-/
import analysis.asymptotics.asymptotics
import analysis.special_functions.polynomials
import algebra.archimedean

@[simp]
lemma real.norm_nat_cast : ‚àÄ (n : ‚Ñï), ‚à•(n : ‚Ñù)‚à• = (n : ‚Ñù)
| 0 := norm_zero.trans (nat.cast_zero).symm
| (n + 1) := abs_eq_self.2 (nat.cast_nonneg (n + 1))

-- TODO: Not sure the best name for this lemma
lemma exists_nat_norm_gt (x : ‚Ñù) : ‚àÉ (n : ‚Ñï), x < ‚à•(n : ‚Ñù)‚à• :=
let ‚ü®n, hn‚ü© := exists_nat_gt x in
  ‚ü®n, lt_of_lt_of_le hn (le_of_eq (real.norm_nat_cast n).symm)‚ü©

@[simp]
lemma norm_nat_cast_le_iff (n m : ‚Ñï) :
  ‚à•(n : ‚Ñù)‚à• ‚â§ ‚à•(m : ‚Ñù)‚à• ‚Üî n ‚â§ m :=
by simp only [real.norm_nat_cast, nat.cast_le]

namespace asymptotics

variables {ùïú : Type*} [normed_field ùïú]

def negligible (f : ‚Ñï ‚Üí ùïú) :=
‚àÄ (c : ‚Ñ§), is_O f (Œª n, (n : ‚Ñù) ^ c) filter.at_top

variables {f g : ‚Ñï ‚Üí ùïú}

lemma negligible_of_is_O_negligible (h : is_O f g filter.at_top)
  (hg : negligible g) : negligible f :=
Œª c, h.trans $ hg c

@[simp]
lemma negligible_zero : negligible (function.const ‚Ñï (0 : ùïú)) :=
Œª c, is_O_zero _ _

@[simp]
lemma negligable_const_iff {ùïú : Type*} [nondiscrete_normed_field ùïú]
  (x : ùïú) : negligible (function.const ‚Ñï x) ‚Üî x = 0 :=
begin
  refine ‚ü®Œª h, _, Œª h, h.symm ‚ñ∏ negligible_zero‚ü©,
  refine (not_not.1 (Œª hx, _)),
  specialize h (-1),

  rw is_O_iff at h,
  obtain ‚ü®c, hc‚ü© := h,
  simp only [filter.eventually_at_top, function.const_apply, gpow_one, ge_iff_le,
    fpow_neg, normed_field.norm_inv] at hc,
  -- by_contradiction hx,
  obtain ‚ü®a, ha‚ü© := hc,
  obtain ‚ü®n, hn‚ü© := exists_nat_norm_gt (c * ‚à•x‚à•‚Åª¬π),
  specialize ha (max a (max n 1)) (le_max_left a (max n 1)),
  rw mul_inv_lt_iff (norm_pos_iff.2 hx) at hn,
  rw [‚Üê not_lt, (mul_inv_lt_iff (norm_pos_iff.2 _))] at ha,
  refine ha (lt_of_lt_of_le hn _),
  {
    rw mul_comm (‚à•x‚à•),
    refine mul_le_mul_of_nonneg_right _ _,
    refine (norm_nat_cast_le_iff _ _).2 _,
    refine le_trans (le_max_right a n) _,
    refine max_le_max le_rfl (le_max_left _ _),
    refine norm_nonneg x,
  },
  {
    suffices : 0 < max a (max n 1),
    {
      refine ne.symm (ne_of_lt _),
      refine nat.cast_pos.2 this,
    },
    refine lt_max_of_lt_right _,
    refine lt_max_of_lt_right _,
    refine zero_lt_one,
  }
end

lemma negligible_add (hf : negligible f) (hg : negligible g) :
  negligible (f + g) :=
Œª c, (hf c).add $ hg c

end asymptotics
