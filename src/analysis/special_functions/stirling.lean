/-
Copyright (c) 2022. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Moritz Firsching, Fabian Kruse, Nikolas Kuhn
-/
import analysis.p_series
import analysis.special_functions.log.deriv
import tactic.positivity

/-!
# Stirling's formula

This file proves Stirling's formula for the factorial.
It states that $n!$ grows asymptotically like $\sqrt{2\pi n}(\frac{n}{e})^n$.
TODO: Add Part 2 to complete the proof

## Proof outline

The proof follows: <https://proofwiki.org/wiki/Stirling%27s_Formula>.

### Part 1
We consider the fraction sequence $a_n$ of fractions $\frac{n!}{\sqrt{2n}(\frac{n}{e})^n}$ and
prove that this sequence converges against a real, positive number $a$. For this the two main
ingredients are
 - taking the logarithm of the sequence and
 - use the series expansion of $\log(1 + x)$.
-/

open_locale topological_space big_operators
open finset filter nat real

/-!
 ### Part 1
 https://proofwiki.org/wiki/Stirling%27s_Formula#Part_1
-/

/--
Define `stirling_seq n` as $\frac{n!}{\sqrt{2n}/(\frac{n}{e})^n$.
Stirling's formula states that this sequence has limit $\sqrt(œÄ)$.
-/
noncomputable def stirling_seq (n : ‚Ñï) : ‚Ñù :=
n.factorial / (sqrt (2 * n) * (n / exp 1) ^ n)

@[simp] lemma stirling_seq_zero : stirling_seq 0 = 0 :=
by rw [stirling_seq, cast_zero, mul_zero, real.sqrt_zero, zero_mul, div_zero]

@[simp] lemma stirling_seq_one : stirling_seq 1 = exp 1 / sqrt 2 :=
by rw [stirling_seq, pow_one, factorial_one, cast_one, mul_one, mul_one_div, one_div_div]

/--
We have the expression
`log (stirling_seq (n + 1)) = log(n + 1)! - 1 / 2 * log(2 * n) - n * log ((n + 1) / e)`.
-/
lemma log_stirling_seq_formula (n : ‚Ñï) : log (stirling_seq n.succ) =
  log n.succ.factorial - 1 / 2 * log (2 * n.succ) - n.succ * log (n.succ / exp 1) :=
begin
  have h1 : (0 : ‚Ñù) < n.succ.factorial := cast_pos.mpr n.succ.factorial_pos,
  have h2 : (0 : ‚Ñù) < (2 * n.succ) := mul_pos two_pos (cast_pos.mpr (succ_pos n)),
  have h3 := real.sqrt_pos.mpr h2,
  have h4 := pow_pos (div_pos (cast_pos.mpr n.succ_pos ) (exp_pos 1)) n.succ,
  have h5 := mul_pos h3 h4,
  rw [stirling_seq, log_div, log_mul, sqrt_eq_rpow, log_rpow, log_pow]; linarith,
end

/--
The sequence `log (stirling_seq (m + 1)) - log (stirling_seq (m + 2))` has the series expansion
   `‚àë 1 / (2 * (k + 1) + 1) * (1 / 2 * (m + 1) + 1)^(2 * (k + 1))`
-/
lemma log_stirling_seq_diff_has_sum (m : ‚Ñï) :
  has_sum (Œª k : ‚Ñï, (1 : ‚Ñù) / (2 * k.succ + 1) * ((1 / (2 * m.succ + 1)) ^ 2) ^ k.succ)
  (log (stirling_seq m.succ) - log (stirling_seq m.succ.succ)) :=
begin
  change has_sum ((Œª b : ‚Ñï, 1 / (2 * (b : ‚Ñù) + 1) * ((1 / (2 * m.succ + 1)) ^ 2) ^ b) ‚àò succ) _,
  refine (has_sum_nat_add_iff 1).mpr _,
  convert (has_sum_log_one_add_inv $ cast_pos.mpr (succ_pos m)).mul_left ((m.succ : ‚Ñù) + 1 / 2),
  { ext k,
    rw [‚Üê pow_mul, pow_add],
    push_cast,
    have : 2 * (k : ‚Ñù) + 1 ‚â† 0, {norm_cast, exact succ_ne_zero (2*k)},
    have : 2 * ((m : ‚Ñù) + 1) + 1 ‚â† 0, {norm_cast, exact succ_ne_zero (2*m.succ)},
    field_simp,
    ring },
  { have h : ‚àÄ (x : ‚Ñù) (hx : x ‚â† 0), 1 + x‚Åª¬π = (x + 1) / x,
    { intros, rw [_root_.add_div, div_self hx, inv_eq_one_div], },
    simp only [log_stirling_seq_formula, log_div, log_mul, log_exp, factorial_succ, cast_mul,
      cast_succ, cast_zero, range_one, sum_singleton, h] { discharger :=
      `[norm_cast, apply_rules [mul_ne_zero, succ_ne_zero, factorial_ne_zero, exp_ne_zero]] },
    ring },
end

/-- The sequence `log ‚àò stirling_seq ‚àò succ` is monotone decreasing -/
lemma log_stirling_seq'_antitone : antitone (log ‚àò stirling_seq ‚àò succ) :=
begin
    have : ‚àÄ {k : ‚Ñï}, 0 < (1 : ‚Ñù) / (2 * k.succ + 1) :=
  Œª k, one_div_pos.mpr (add_pos (mul_pos two_pos (cast_pos.mpr k.succ_pos)) one_pos),
  exact antitone_nat_of_succ_le (Œª n, sub_nonneg.mp ((log_stirling_seq_diff_has_sum n).nonneg
    (Œª m, (mul_pos this (pow_pos (pow_pos this 2) m.succ)).le))),
end

/--
We have a bound for successive elements in the sequence `log (stirling_seq k)`.
-/
lemma log_stirling_seq_diff_le_geo_sum (n : ‚Ñï) :
  log (stirling_seq n.succ) - log (stirling_seq n.succ.succ) ‚â§
  (1 / (2 * n.succ + 1)) ^ 2 / (1 - (1 / (2 * n.succ + 1)) ^ 2) :=
begin
  have h_nonneg : 0 ‚â§ ((1 / (2 * (n.succ : ‚Ñù) + 1)) ^ 2) := sq_nonneg _,
  have g : has_sum (Œª k : ‚Ñï, ((1 / (2 * (n.succ : ‚Ñù) + 1)) ^ 2) ^ k.succ)
    ((1 / (2 * n.succ + 1)) ^ 2 / (1 - (1 / (2 * n.succ + 1)) ^ 2)),
  { refine (has_sum_geometric_of_lt_1 h_nonneg _).mul_left ((1 / (2 * (n.succ : ‚Ñù) + 1)) ^ 2),
    rw [one_div, inv_pow],
    refine inv_lt_one (one_lt_pow ((lt_add_iff_pos_left 1).mpr
      (mul_pos two_pos (cast_pos.mpr n.succ_pos))) two_ne_zero) },
  have hab : ‚àÄ (k : ‚Ñï), (1 / (2 * (k.succ : ‚Ñù) + 1)) * ((1 / (2 * n.succ + 1)) ^ 2) ^ k.succ ‚â§
    ((1 / (2 * n.succ + 1)) ^ 2) ^ k.succ,
  { refine Œª k, mul_le_of_le_one_left (pow_nonneg h_nonneg k.succ) _,
    rw one_div,
    exact inv_le_one (le_add_of_nonneg_left (mul_pos two_pos (cast_pos.mpr k.succ_pos)).le) },
  exact has_sum_le hab (log_stirling_seq_diff_has_sum n) g,
end

/--
We have the bound  `log (stirling_seq n) - log (stirling_seq (n+1))` ‚â§ 1/(4 n^2)
-/
lemma log_stirling_seq_sub_log_stirling_seq_succ (n : ‚Ñï) :
  log (stirling_seq n.succ) - log (stirling_seq n.succ.succ) ‚â§ 1 / (4 * n.succ ^ 2) :=
begin
  have h‚ÇÅ : 0 < 4 * ((n : ‚Ñù) + 1) ^ 2 := by nlinarith [@cast_nonneg ‚Ñù _ n],
  have h‚ÇÉ : 0 < (2 * ((n : ‚Ñù) + 1) + 1) ^ 2 := by nlinarith [@cast_nonneg ‚Ñù _ n],
  have h‚ÇÇ : 0 < 1 - (1 / (2 * ((n : ‚Ñù) + 1) + 1)) ^ 2,
  { rw ‚Üê mul_lt_mul_right h‚ÇÉ,
    have H : 0 < (2 * ((n : ‚Ñù) + 1) + 1) ^ 2 - 1 := by nlinarith [@cast_nonneg ‚Ñù _ n],
    convert H using 1; field_simp [h‚ÇÉ.ne'] },
  refine (log_stirling_seq_diff_le_geo_sum n).trans _,
  push_cast,
  rw div_le_div_iff h‚ÇÇ h‚ÇÅ,
  field_simp [h‚ÇÉ.ne'],
  rw div_le_div_right h‚ÇÉ,
  ring_nf,
  norm_cast,
  linarith,
end

/-- For any `n`, we have `log_stirling_seq 1 - log_stirling_seq n ‚â§ 1/4 * ‚àë' 1/k^2`  -/
lemma log_stirling_seq_bounded_aux :
  ‚àÉ (c : ‚Ñù), ‚àÄ (n : ‚Ñï), log (stirling_seq 1) - log (stirling_seq n.succ) ‚â§ c :=
begin
  let d := ‚àë' k : ‚Ñï, (1 : ‚Ñù) / k.succ ^ 2,
  use (1 / 4 * d : ‚Ñù),
  let log_stirling_seq' : ‚Ñï ‚Üí ‚Ñù := Œª k, log (stirling_seq k.succ),
  intro n,
  have h‚ÇÅ : ‚àÄ k, log_stirling_seq' k - log_stirling_seq' (k + 1) ‚â§ 1 / 4 * (1 / k.succ ^ 2) :=
  by { intro k, convert log_stirling_seq_sub_log_stirling_seq_succ k using 1, field_simp, },
  have h‚ÇÇ : ‚àë (k : ‚Ñï) in range n, (1 : ‚Ñù) / (k.succ) ^ 2 ‚â§ d := by
  { refine sum_le_tsum (range n) (Œª k _, _)
      ((summable_nat_add_iff 1).mpr (real.summable_one_div_nat_pow.mpr one_lt_two)),
    apply le_of_lt,
    rw [one_div_pos, sq_pos_iff],
    exact nonzero_of_invertible (succ k), },
  calc
  log (stirling_seq 1) - log (stirling_seq n.succ) = log_stirling_seq' 0 - log_stirling_seq' n : rfl
  ... = ‚àë k in range n, (log_stirling_seq' k - log_stirling_seq' (k + 1)) : by
    rw ‚Üê sum_range_sub' log_stirling_seq' n
  ... ‚â§ ‚àë k in range n, (1/4) * (1 / k.succ^2) : sum_le_sum (Œª k _, h‚ÇÅ k)
  ... = 1 / 4 * ‚àë k in range n, 1 / k.succ ^ 2 : by rw mul_sum
  ... ‚â§ 1 / 4 * d : (mul_le_mul_left (one_div_pos.mpr four_pos)).mpr h‚ÇÇ,
end

/-- The sequence `log_stirling_seq` is bounded below for `n ‚â• 1`. -/
lemma log_stirling_seq_bounded_by_constant : ‚àÉ c, ‚àÄ (n : ‚Ñï), c ‚â§ log (stirling_seq n.succ) :=
begin
  obtain ‚ü®d, h‚ü© := log_stirling_seq_bounded_aux,
  exact ‚ü®log (stirling_seq 1) - d, Œª n, sub_le.mp (h n)‚ü©,
end

/-- The sequence `stirling_seq` is positive for `n > 0`  -/
lemma stirling_seq'_pos (n : ‚Ñï) : 0 < stirling_seq n.succ :=
div_pos (cast_pos.mpr n.succ.factorial_pos) (mul_pos (real.sqrt_pos.mpr (mul_pos two_pos
  (cast_pos.mpr n.succ_pos))) (pow_pos (div_pos (cast_pos.mpr n.succ_pos) (exp_pos 1)) n.succ))

/--
The sequence `stirling_seq` has a positive lower bound.
-/
lemma stirling_seq'_bounded_by_pos_constant : ‚àÉ a, 0 < a ‚àß ‚àÄ n : ‚Ñï, a ‚â§ stirling_seq n.succ :=
begin
  cases log_stirling_seq_bounded_by_constant with c h,
  refine ‚ü®exp c, exp_pos _, Œª n, _‚ü©,
  rw ‚Üê le_log_iff_exp_le (stirling_seq'_pos n),
  exact h n,
end

/-- The sequence `stirling_seq ‚àò succ` is monotone decreasing -/
lemma stirling_seq'_antitone : antitone (stirling_seq ‚àò succ) :=
Œª n m h, (log_le_log (stirling_seq'_pos m) (stirling_seq'_pos n)).mp (log_stirling_seq'_antitone h)

/-- The limit `a` of the sequence `stirling_seq` satisfies `0 < a` -/
lemma stirling_seq_has_pos_limit_a :
  ‚àÉ (a : ‚Ñù), 0 < a ‚àß tendsto stirling_seq at_top (ùìù a) :=
begin
  obtain ‚ü®x, x_pos, hx‚ü© := stirling_seq'_bounded_by_pos_constant,
  have hx' : x ‚àà lower_bounds (set.range (stirling_seq ‚àò succ)) := by simpa [lower_bounds] using hx,
  refine ‚ü®_, lt_of_lt_of_le x_pos (le_cInf (set.range_nonempty _) hx'), _‚ü©,
  rw ‚Üêfilter.tendsto_add_at_top_iff_nat 1,
  exact tendsto_at_top_cinfi stirling_seq'_antitone ‚ü®x, hx'‚ü©,
end
