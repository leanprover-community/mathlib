/-
Copyright (c) 2018 Chris Hughes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle S√∂nne, Benjamin Davidson
-/
import analysis.special_functions.trigonometric.complex_deriv

/-!
# The `arctan` function.

Inequalities, derivatives,
and `real.tan` as a `local_homeomorph` between `(-(œÄ / 2), œÄ / 2)` and the whole line.
-/

noncomputable theory

namespace real

open set filter
open_locale topological_space real

lemma tan_add {x y : ‚Ñù}
  (h : ((‚àÄ k : ‚Ñ§, x ‚â† (2 * k + 1) * œÄ / 2) ‚àß ‚àÄ l : ‚Ñ§, y ‚â† (2 * l + 1) * œÄ / 2)
     ‚à® ((‚àÉ k : ‚Ñ§, x = (2 * k + 1) * œÄ / 2) ‚àß ‚àÉ l : ‚Ñ§, y = (2 * l + 1) * œÄ / 2)) :
  tan (x + y) = (tan x + tan y) / (1 - tan x * tan y) :=
by simpa only [‚Üê complex.of_real_inj, complex.of_real_sub, complex.of_real_add, complex.of_real_div,
              complex.of_real_mul, complex.of_real_tan]
    using @complex.tan_add (x:‚ÑÇ) (y:‚ÑÇ) (by convert h; norm_cast)

lemma tan_add' {x y : ‚Ñù}
  (h : ((‚àÄ k : ‚Ñ§, x ‚â† (2 * k + 1) * œÄ / 2) ‚àß ‚àÄ l : ‚Ñ§, y ‚â† (2 * l + 1) * œÄ / 2)) :
  tan (x + y) = (tan x + tan y) / (1 - tan x * tan y) :=
tan_add (or.inl h)

lemma tan_two_mul {x:‚Ñù} : tan (2 * x) = 2 * tan x / (1 - tan x ^ 2) :=
by simpa only [‚Üê complex.of_real_inj, complex.of_real_sub, complex.of_real_div, complex.of_real_pow,
              complex.of_real_mul, complex.of_real_tan, complex.of_real_bit0, complex.of_real_one]
    using complex.tan_two_mul

lemma tan_ne_zero_iff {Œ∏ : ‚Ñù} : tan Œ∏ ‚â† 0 ‚Üî ‚àÄ k : ‚Ñ§, Œ∏ ‚â† k * œÄ / 2 :=
by rw [‚Üê complex.of_real_ne_zero, complex.of_real_tan, complex.tan_ne_zero_iff]; norm_cast

lemma tan_eq_zero_iff {Œ∏ : ‚Ñù} : tan Œ∏ = 0 ‚Üî ‚àÉ k : ‚Ñ§, Œ∏ = k * œÄ / 2 :=
by rw [‚Üê not_iff_not, not_exists, ‚Üê ne, tan_ne_zero_iff]

lemma tan_int_mul_pi_div_two (n : ‚Ñ§) : tan (n * œÄ/2) = 0 :=
tan_eq_zero_iff.mpr (by use n)


lemma has_strict_deriv_at_tan {x : ‚Ñù} (h : cos x ‚â† 0) :
  has_strict_deriv_at tan (1 / (cos x)^2) x :=
by exact_mod_cast (complex.has_strict_deriv_at_tan (by exact_mod_cast h)).real_of_complex

lemma has_deriv_at_tan {x : ‚Ñù} (h : cos x ‚â† 0) :
  has_deriv_at tan (1 / (cos x)^2) x :=
by exact_mod_cast (complex.has_deriv_at_tan (by exact_mod_cast h)).real_of_complex

lemma tendsto_abs_tan_of_cos_eq_zero {x : ‚Ñù} (hx : cos x = 0) :
  tendsto (Œª x, abs (tan x)) (ùìù[{x}·∂ú] x) at_top :=
begin
  have hx : complex.cos x = 0, by exact_mod_cast hx,
  simp only [‚Üê complex.abs_of_real, complex.of_real_tan],
  refine (complex.tendsto_abs_tan_of_cos_eq_zero hx).comp _,
  refine tendsto.inf complex.continuous_of_real.continuous_at _,
  exact tendsto_principal_principal.2 (Œª y, mt complex.of_real_inj.1)
end

lemma tendsto_abs_tan_at_top (k : ‚Ñ§) :
  tendsto (Œª x, abs (tan x)) (ùìù[{(2 * k + 1) * œÄ / 2}·∂ú] ((2 * k + 1) * œÄ / 2)) at_top :=
tendsto_abs_tan_of_cos_eq_zero $ cos_eq_zero_iff.2 ‚ü®k, rfl‚ü©

lemma continuous_at_tan {x : ‚Ñù} : continuous_at tan x ‚Üî cos x ‚â† 0 :=
begin
  refine ‚ü®Œª hc h‚ÇÄ, _, Œª h, (has_deriv_at_tan h).continuous_at‚ü©,
  exact not_tendsto_nhds_of_tendsto_at_top (tendsto_abs_tan_of_cos_eq_zero h‚ÇÄ) _
    (hc.norm.tendsto.mono_left inf_le_left)
end

lemma differentiable_at_tan {x : ‚Ñù} : differentiable_at ‚Ñù tan x ‚Üî cos x ‚â† 0 :=
‚ü®Œª h, continuous_at_tan.1 h.continuous_at, Œª h, (has_deriv_at_tan h).differentiable_at‚ü©

@[simp] lemma deriv_tan (x : ‚Ñù) : deriv tan x = 1 / (cos x)^2 :=
if h : cos x = 0 then
  have ¬¨differentiable_at ‚Ñù tan x := mt differentiable_at_tan.1 (not_not.2 h),
  by simp [deriv_zero_of_not_differentiable_at this, h, sq]
else (has_deriv_at_tan h).deriv

@[simp] lemma times_cont_diff_at_tan {n x} : times_cont_diff_at ‚Ñù n tan x ‚Üî cos x ‚â† 0 :=
‚ü®Œª h, continuous_at_tan.1 h.continuous_at,
  Œª h, (complex.times_cont_diff_at_tan.2 $ by exact_mod_cast h).real_of_complex‚ü©

lemma continuous_on_tan : continuous_on tan {x | cos x ‚â† 0} :=
Œª x hx, (continuous_at_tan.2 hx).continuous_within_at

@[continuity]
lemma continuous_tan : continuous (Œª x : {x | cos x ‚â† 0}, tan x) :=
continuous_on_iff_continuous_restrict.1 continuous_on_tan

lemma has_deriv_at_tan_of_mem_Ioo {x : ‚Ñù} (h : x ‚àà Ioo (-(œÄ/2):‚Ñù) (œÄ/2)) :
  has_deriv_at tan (1 / (cos x)^2) x :=
has_deriv_at_tan (cos_pos_of_mem_Ioo h).ne'

lemma differentiable_at_tan_of_mem_Ioo {x : ‚Ñù} (h : x ‚àà Ioo (-(œÄ/2):‚Ñù) (œÄ/2)) :
  differentiable_at ‚Ñù tan x :=
(has_deriv_at_tan_of_mem_Ioo h).differentiable_at

lemma continuous_on_tan_Ioo : continuous_on tan (Ioo (-(œÄ/2)) (œÄ/2)) :=
Œª x hx, (differentiable_at_tan_of_mem_Ioo hx).continuous_at.continuous_within_at

lemma surj_on_tan : surj_on tan (Ioo (-(œÄ / 2)) (œÄ / 2)) univ :=
have _ := neg_lt_self pi_div_two_pos,
continuous_on_tan_Ioo.surj_on_of_tendsto (nonempty_Ioo.2 this)
  (by simp [tendsto_tan_neg_pi_div_two, this]) (by simp [tendsto_tan_pi_div_two, this])

lemma tan_surjective : function.surjective tan :=
Œª x, surj_on_tan.subset_range trivial

lemma image_tan_Ioo : tan '' (Ioo (-(œÄ / 2)) (œÄ / 2)) = univ :=
univ_subset_iff.1 surj_on_tan

/-- `real.tan` as an `order_iso` between `(-(œÄ / 2), œÄ / 2)` and `‚Ñù`. -/
def tan_order_iso : Ioo (-(œÄ / 2)) (œÄ / 2) ‚âÉo ‚Ñù :=
(strict_mono_on_tan.order_iso _ _).trans $ (order_iso.set_congr _ _ image_tan_Ioo).trans
  order_iso.set.univ

/-- Inverse of the `tan` function, returns values in the range `-œÄ / 2 < arctan x` and
`arctan x < œÄ / 2` -/
@[pp_nodot] noncomputable def arctan (x : ‚Ñù) : ‚Ñù :=
tan_order_iso.symm x

@[simp] lemma tan_arctan (x : ‚Ñù) : tan (arctan x) = x :=
tan_order_iso.apply_symm_apply x

lemma arctan_mem_Ioo (x : ‚Ñù) : arctan x ‚àà Ioo (-(œÄ / 2)) (œÄ / 2) :=
subtype.coe_prop _

lemma arctan_tan {x : ‚Ñù} (hx‚ÇÅ : -(œÄ / 2) < x) (hx‚ÇÇ : x < œÄ / 2) : arctan (tan x) = x :=
subtype.ext_iff.1 $ tan_order_iso.symm_apply_apply ‚ü®x, hx‚ÇÅ, hx‚ÇÇ‚ü©

lemma cos_arctan_pos (x : ‚Ñù) : 0 < cos (arctan x) :=
cos_pos_of_mem_Ioo $ arctan_mem_Ioo x

lemma cos_sq_arctan (x : ‚Ñù) : cos (arctan x) ^ 2 = 1 / (1 + x ^ 2) :=
by rw [one_div, ‚Üê inv_one_add_tan_sq (cos_arctan_pos x).ne', tan_arctan]

lemma sin_arctan (x : ‚Ñù) : sin (arctan x) = x / sqrt (1 + x ^ 2) :=
by rw [‚Üê tan_div_sqrt_one_add_tan_sq (cos_arctan_pos x), tan_arctan]

lemma cos_arctan (x : ‚Ñù) : cos (arctan x) = 1 / sqrt (1 + x ^ 2) :=
by rw [one_div, ‚Üê inv_sqrt_one_add_tan_sq (cos_arctan_pos x), tan_arctan]

lemma arctan_lt_pi_div_two (x : ‚Ñù) : arctan x < œÄ / 2 :=
(arctan_mem_Ioo x).2

lemma neg_pi_div_two_lt_arctan (x : ‚Ñù) : -(œÄ / 2) < arctan x :=
(arctan_mem_Ioo x).1

lemma arctan_eq_arcsin (x : ‚Ñù) : arctan x = arcsin (x / sqrt (1 + x ^ 2)) :=
eq.symm $ arcsin_eq_of_sin_eq (sin_arctan x) (mem_Icc_of_Ioo $ arctan_mem_Ioo x)

lemma arcsin_eq_arctan {x : ‚Ñù} (h : x ‚àà Ioo (-(1:‚Ñù)) 1) :
  arcsin x = arctan (x / sqrt (1 - x ^ 2)) :=
begin
  rw [arctan_eq_arcsin, div_pow, sq_sqrt, one_add_div, div_div_eq_div_mul,
      ‚Üê sqrt_mul, mul_div_cancel', sub_add_cancel, sqrt_one, div_one];
  nlinarith [h.1, h.2],
end

@[simp] lemma arctan_zero : arctan 0 = 0 :=
by simp [arctan_eq_arcsin]

lemma arctan_eq_of_tan_eq {x y : ‚Ñù} (h : tan x = y) (hx : x ‚àà Ioo (-(œÄ / 2)) (œÄ / 2)) :
  arctan y = x :=
inj_on_tan (arctan_mem_Ioo _) hx (by rw [tan_arctan, h])

@[simp] lemma arctan_one : arctan 1 = œÄ / 4 :=
arctan_eq_of_tan_eq tan_pi_div_four $ by split; linarith [pi_pos]

@[simp] lemma arctan_neg (x : ‚Ñù) : arctan (-x) = - arctan x :=
by simp [arctan_eq_arcsin, neg_div]

@[continuity]
lemma continuous_arctan : continuous arctan :=
continuous_subtype_coe.comp tan_order_iso.to_homeomorph.continuous_inv_fun

lemma continuous_at_arctan {x : ‚Ñù} : continuous_at arctan x := continuous_arctan.continuous_at

/-- `real.tan` as a `local_homeomorph` between `(-(œÄ / 2), œÄ / 2)` and the whole line. -/
def tan_local_homeomorph : local_homeomorph ‚Ñù ‚Ñù :=
{ to_fun := tan,
  inv_fun := arctan,
  source := Ioo (-(œÄ / 2)) (œÄ / 2),
  target := univ,
  map_source' := maps_to_univ _ _,
  map_target' := Œª y hy, arctan_mem_Ioo y,
  left_inv' := Œª x hx, arctan_tan hx.1 hx.2,
  right_inv' := Œª y hy, tan_arctan y,
  open_source := is_open_Ioo,
  open_target := is_open_univ,
  continuous_to_fun := continuous_on_tan_Ioo,
  continuous_inv_fun := continuous_arctan.continuous_on }

@[simp] lemma coe_tan_local_homeomorph : ‚áëtan_local_homeomorph = tan := rfl
@[simp] lemma coe_tan_local_homeomorph_symm : ‚áëtan_local_homeomorph.symm = arctan := rfl

lemma has_strict_deriv_at_arctan (x : ‚Ñù) : has_strict_deriv_at arctan (1 / (1 + x^2)) x :=
have A : cos (arctan x) ‚â† 0 := (cos_arctan_pos x).ne',
by simpa [cos_sq_arctan]
  using tan_local_homeomorph.has_strict_deriv_at_symm trivial (by simpa) (has_strict_deriv_at_tan A)

lemma has_deriv_at_arctan (x : ‚Ñù) : has_deriv_at arctan (1 / (1 + x^2)) x :=
(has_strict_deriv_at_arctan x).has_deriv_at

lemma differentiable_at_arctan (x : ‚Ñù) : differentiable_at ‚Ñù arctan x :=
(has_deriv_at_arctan x).differentiable_at

lemma differentiable_arctan : differentiable ‚Ñù arctan := differentiable_at_arctan

@[simp] lemma deriv_arctan : deriv arctan = (Œª x, 1 / (1 + x^2)) :=
funext $ Œª x, (has_deriv_at_arctan x).deriv

lemma times_cont_diff_arctan {n : with_top ‚Ñï} : times_cont_diff ‚Ñù n arctan :=
times_cont_diff_iff_times_cont_diff_at.2 $ Œª x,
have cos (arctan x) ‚â† 0 := (cos_arctan_pos x).ne',
tan_local_homeomorph.times_cont_diff_at_symm_deriv (by simpa) trivial (has_deriv_at_tan this)
  (times_cont_diff_at_tan.2 this)

end real

section
/-!
### Lemmas for derivatives of the composition of `real.arctan` with a differentiable function

In this section we register lemmas for the derivatives of the composition of `real.arctan` with a
differentiable function, for standalone use and use with `simp`. -/

open real

section deriv

variables {f : ‚Ñù ‚Üí ‚Ñù} {f' x : ‚Ñù} {s : set ‚Ñù}

lemma has_strict_deriv_at.arctan (hf : has_strict_deriv_at f f' x) :
  has_strict_deriv_at (Œª x, arctan (f x)) ((1 / (1 + (f x)^2)) * f') x :=
(real.has_strict_deriv_at_arctan (f x)).comp x hf

lemma has_deriv_at.arctan (hf : has_deriv_at f f' x) :
  has_deriv_at (Œª x, arctan (f x)) ((1 / (1 + (f x)^2)) * f') x :=
(real.has_deriv_at_arctan (f x)).comp x hf

lemma has_deriv_within_at.arctan (hf : has_deriv_within_at f f' s x) :
  has_deriv_within_at (Œª x, arctan (f x)) ((1 / (1 + (f x)^2)) * f') s x :=
(real.has_deriv_at_arctan (f x)).comp_has_deriv_within_at x hf

lemma deriv_within_arctan (hf : differentiable_within_at ‚Ñù f s x)
  (hxs : unique_diff_within_at ‚Ñù s x) :
  deriv_within (Œª x, arctan (f x)) s x = (1 / (1 + (f x)^2)) * (deriv_within f s x) :=
hf.has_deriv_within_at.arctan.deriv_within hxs

@[simp] lemma deriv_arctan (hc : differentiable_at ‚Ñù f x) :
  deriv (Œª x, arctan (f x)) x = (1 / (1 + (f x)^2)) * (deriv f x) :=
hc.has_deriv_at.arctan.deriv

end deriv

section fderiv

variables {E : Type*} [normed_group E] [normed_space ‚Ñù E] {f : E ‚Üí ‚Ñù} {f' : E ‚ÜíL[‚Ñù] ‚Ñù} {x : E}
  {s : set E} {n : with_top ‚Ñï}

lemma has_strict_fderiv_at.arctan (hf : has_strict_fderiv_at f f' x) :
  has_strict_fderiv_at (Œª x, arctan (f x)) ((1 / (1 + (f x)^2)) ‚Ä¢ f') x :=
(has_strict_deriv_at_arctan (f x)).comp_has_strict_fderiv_at x hf

lemma has_fderiv_at.arctan (hf : has_fderiv_at f f' x) :
  has_fderiv_at (Œª x, arctan (f x)) ((1 / (1 + (f x)^2)) ‚Ä¢ f') x :=
(has_deriv_at_arctan (f x)).comp_has_fderiv_at x hf

lemma has_fderiv_within_at.arctan (hf : has_fderiv_within_at f f' s x) :
  has_fderiv_within_at (Œª x, arctan (f x)) ((1 / (1 + (f x)^2)) ‚Ä¢ f') s x :=
(has_deriv_at_arctan (f x)).comp_has_fderiv_within_at x hf

lemma fderiv_within_arctan (hf : differentiable_within_at ‚Ñù f s x)
  (hxs : unique_diff_within_at ‚Ñù s x) :
  fderiv_within ‚Ñù (Œª x, arctan (f x)) s x = (1 / (1 + (f x)^2)) ‚Ä¢ (fderiv_within ‚Ñù f s x) :=
hf.has_fderiv_within_at.arctan.fderiv_within hxs

@[simp] lemma fderiv_arctan (hc : differentiable_at ‚Ñù f x) :
  fderiv ‚Ñù (Œª x, arctan (f x)) x = (1 / (1 + (f x)^2)) ‚Ä¢ (fderiv ‚Ñù f x) :=
hc.has_fderiv_at.arctan.fderiv

lemma differentiable_within_at.arctan (hf : differentiable_within_at ‚Ñù f s x) :
  differentiable_within_at ‚Ñù (Œª x, real.arctan (f x)) s x :=
hf.has_fderiv_within_at.arctan.differentiable_within_at

@[simp] lemma differentiable_at.arctan (hc : differentiable_at ‚Ñù f x) :
  differentiable_at ‚Ñù (Œª x, arctan (f x)) x :=
hc.has_fderiv_at.arctan.differentiable_at

lemma differentiable_on.arctan (hc : differentiable_on ‚Ñù f s) :
  differentiable_on ‚Ñù (Œª x, arctan (f x)) s :=
Œª x h, (hc x h).arctan

@[simp] lemma differentiable.arctan (hc : differentiable ‚Ñù f) :
  differentiable ‚Ñù (Œª x, arctan (f x)) :=
Œª x, (hc x).arctan

lemma times_cont_diff_at.arctan (h : times_cont_diff_at ‚Ñù n f x) :
  times_cont_diff_at ‚Ñù n (Œª x, arctan (f x)) x :=
times_cont_diff_arctan.times_cont_diff_at.comp x h

lemma times_cont_diff.arctan (h : times_cont_diff ‚Ñù n f) :
  times_cont_diff ‚Ñù n (Œª x, arctan (f x)) :=
times_cont_diff_arctan.comp h

lemma times_cont_diff_within_at.arctan (h : times_cont_diff_within_at ‚Ñù n f s x) :
  times_cont_diff_within_at ‚Ñù n (Œª x, arctan (f x)) s x :=
times_cont_diff_arctan.comp_times_cont_diff_within_at h

lemma times_cont_diff_on.arctan (h : times_cont_diff_on ‚Ñù n f s) :
  times_cont_diff_on ‚Ñù n (Œª x, arctan (f x)) s :=
times_cont_diff_arctan.comp_times_cont_diff_on h

end fderiv
end
