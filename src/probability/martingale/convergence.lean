/-
Copyright (c) 2022 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import probability.martingale.upcrossing
import measure_theory.function.uniform_integrable
import measure_theory.constructions.polish

/-!

# Martingale convergence theorems

The martingale convergence theorems are a collection of theorems characterizing the convergence
of a martingale provided it satisfies some boundedness conditions. This file contains the
almost everywhere martingale convergence theorem which provides an almost everywhere limit to
an L¬π bounded submartingale.

## Main definitions

* `measure_theory.limit_process`: given a process `f` and a filtration `‚Ñ±`, the limit process of
  `f` is the almost everywhere limit of `f` if it exists and is measurable with respect to
  `‚®Ü n, ‚Ñ± n`, and is 0 otherwise.

## Main results

* `measure_theory.submartingale.ae_tendsto_limit_process`: the almost everywhere martingale
  convergence theorem: an L¬π-bounded submartingale adapted to the filtration `‚Ñ±` converges almost
  everywhere to its limit process.
* `measure_theory.submartingale.mem_‚Ñí1_limit_process`: the limit process of an L¬π-bounded
  submartingale is integrable.

-/

open topological_space filter
open_locale nnreal ennreal measure_theory probability_theory big_operators topological_space

namespace measure_theory

variables {Œ© Œπ : Type*} {m0 : measurable_space Œ©} {Œº : measure Œ©} {‚Ñ± : filtration ‚Ñï m0}
variables {a b : ‚Ñù} {f : ‚Ñï ‚Üí Œ© ‚Üí ‚Ñù} {œâ : Œ©} {R : ‚Ñù‚â•0}

section ae_convergence

/-!

### Almost everywhere martingale convergence theorem

We will now prove the almost everywhere martingale convergence theorem.

The a.e. martingale convergence theorem states: if `f` is an L¬π-bounded `‚Ñ±`-submartingale, then
it converges almost everywhere to an integrable function which is measurable with respect to
the œÉ-algebra `‚Ñ±‚àû := ‚®Ü n, ‚Ñ± n`.

Mathematically, we proceed by first noting that a real sequence $(x_n)$ converges if
(a) $\limsup_{n \to \infty} |x_n| < \infty$, (b) for all $a < b \in \mathbb{Q}$ we have the
number of upcrossings of $(x_n)$ from below $a$ to above $b$ is finite.
Thus, for all $\omega$ satisfying $\limsup_{n \to \infty} |f_n(\omega)| < \infty$ and the number of
upcrossings of $(f_n(\omega))$ from below $a$ to above $b$ is finite for all $a < b \in \mathbb{Q}$,
we have $(f_n(\omega))$ is convergent.

Hence, assuming $(f_n)$ is L¬π-bounded, using Fatou's lemma, we have
$$
  \mathbb{E] \limsup_{n \to \infty} |f_n| \le \limsup_{n \to \infty} \mathbb{E}|f_n| < \infty
$$
implying $\limsup_{n \to \infty} |f_n| < \infty$ a.e. Furthermore, by the upcrossing estimate,
the number of upcrossings is finite almost everywhere implying $f$ converges pointwise almost
everywhere.

Thus, denoting $g$ the a.e. limit of $(f_n)$, $g$ is $\mathcal{F}_\infty$-measurable as for all
$n$, $f_n$ is $\mathcal{F}_n$-measurable and $\mathcal{F}_n \le \mathcal{F}_\infty$. Finally, $g$
is integrable as $|g| \le \liminf_{n \to \infty} |f_n|$ so
$$
  \mathbb{E}|g| \le \mathbb{E} \limsup_{n \to \infty} |f_n| \le
    \limsup_{n \to \infty} \mathbb{E}|f_n| < \infty
$$
as required.

Implementation wise, we have `tendsto_of_no_upcrossings` which showed that
a bounded sequence converges if it does not visit below $a$ and above $b$ infinitely often
for all $a, b ‚àà s$ for some dense set $s$. So, we may skip the first step provided we can prove
that the realizations are bounded almost everywhere. Indeed, suppose $(|f_n(\omega)|)$ is not
bounded, then either $f_n(\omega) \to \pm \infty$ or one of $\limsup f_n(\omega)$ or
$\liminf f_n(\omega)$ equals $\pm \infty$ while the other is finite. But the first case
contradicts $\liminf |f_n(\omega)| < \infty$ while the second case contradicts finite upcrossings.

-/

/-- If a stochastic process has bounded upcrossing from below `a` to above `b`,
then it does not frequently visit both below `a` and above `b`. -/
lemma not_frequently_of_upcrossings_lt_top (hab : a < b) (hœâ : upcrossings a b f œâ ‚â† ‚àû) :
  ¬¨((‚àÉ·∂† n in at_top, f n œâ < a) ‚àß (‚àÉ·∂† n in at_top, b < f n œâ)) :=
begin
  rw [‚Üê lt_top_iff_ne_top, upcrossings_lt_top_iff] at hœâ,
  replace hœâ : ‚àÉ k, ‚àÄ N, upcrossings_before a b f N œâ < k,
  { obtain ‚ü®k, hk‚ü© := hœâ,
    exact ‚ü®k + 1, Œª N, lt_of_le_of_lt (hk N) k.lt_succ_self‚ü© },
  rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  rw frequently_at_top at h‚ÇÅ h‚ÇÇ,
  refine not_not.2 hœâ _,
  push_neg,
  intro k,
  induction k with k ih,
  { simp only [zero_le', exists_const] },
  { obtain ‚ü®N, hN‚ü© := ih,
    obtain ‚ü®N‚ÇÅ, hN‚ÇÅ, hN‚ÇÅ'‚ü© := h‚ÇÅ N,
    obtain ‚ü®N‚ÇÇ, hN‚ÇÇ, hN‚ÇÇ'‚ü© := h‚ÇÇ N‚ÇÅ,
    exact ‚ü®(N‚ÇÇ + 1), nat.succ_le_of_lt $ lt_of_le_of_lt hN
      (upcrossings_before_lt_of_exists_upcrossing hab hN‚ÇÅ hN‚ÇÅ' hN‚ÇÇ hN‚ÇÇ')‚ü© }
end

/-- A stochastic process that frequently visits below `a` and above `b` have infinite
upcrossings. -/
lemma upcrossings_eq_top_of_frequently_lt (hab : a < b)
  (h‚ÇÅ : ‚àÉ·∂† n in at_top, f n œâ < a) (h‚ÇÇ : ‚àÉ·∂† n in at_top, b < f n œâ) :
  upcrossings a b f œâ = ‚àû :=
classical.by_contradiction (Œª h, not_frequently_of_upcrossings_lt_top hab h ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©)

lemma exists_frequently_lt_of_liminf_ne_top
  {Œπ : Type*} {l : filter Œπ} {x : Œπ ‚Üí ‚Ñù} (hx : liminf l (Œª n, (‚à•x n‚à•‚Çä : ‚Ñù‚â•0‚àû)) ‚â† ‚àû) :
  ‚àÉ R, ‚àÉ·∂† n in l, x n < R :=
begin
  by_contra h,
  simp_rw [not_exists, not_frequently, not_lt] at h,
  refine hx (ennreal.eq_top_of_forall_nnreal_le $ Œª r, le_Liminf_of_le (by is_bounded_default) _),
  simp only [eventually_map, ennreal.coe_le_coe],
  filter_upwards [h r] with i hi using hi.trans ((coe_nnnorm (x i)).symm ‚ñ∏ le_abs_self (x i)),
end

lemma exists_frequently_lt_of_liminf_ne_top'
  {Œπ : Type*} {l : filter Œπ} {x : Œπ ‚Üí ‚Ñù} (hx : liminf l (Œª n, (‚à•x n‚à•‚Çä : ‚Ñù‚â•0‚àû)) ‚â† ‚àû) :
  ‚àÉ R, ‚àÉ·∂† n in l, R < x n :=
begin
  by_contra h,
  simp_rw [not_exists, not_frequently, not_lt] at h,
  refine hx (ennreal.eq_top_of_forall_nnreal_le $ Œª r, le_Liminf_of_le (by is_bounded_default) _),
  simp only [eventually_map, ennreal.coe_le_coe],
  filter_upwards [h (-r)] with i hi using (le_neg.1 hi).trans (neg_le_abs_self _),
end

lemma exists_upcrossings_of_not_bounded_under
  {Œπ : Type*} [semilattice_sup Œπ] [nonempty Œπ] {l : filter Œπ} {x : Œπ ‚Üí ‚Ñù}
  (hf : liminf l (Œª i, (‚à•x i‚à•‚Çä : ‚Ñù‚â•0‚àû)) ‚â† ‚àû)
  (hbdd : ¬¨ is_bounded_under (‚â§) l (Œª i, |x i|)) :
  ‚àÉ a b : ‚Ñö, a < b ‚àß (‚àÉ·∂† i in l, x i < a) ‚àß (‚àÉ·∂† i in l, ‚Üëb < x i) :=
begin
  rw [is_bounded_under_le_abs, not_and_distrib] at hbdd,
  obtain hbdd | hbdd := hbdd,
  { obtain ‚ü®R, hR‚ü© := exists_frequently_lt_of_liminf_ne_top hf,
    obtain ‚ü®q, hq‚ü© := exists_rat_gt R,
    refine ‚ü®q, q + 1, (lt_add_iff_pos_right _).2 zero_lt_one, _, _‚ü©,
    { refine Œª hcon, hR _,
      filter_upwards [hcon] with x hx using not_lt.2 (lt_of_lt_of_le hq (not_lt.1 hx)).le },
    { simp only [is_bounded_under, is_bounded, eventually_map, eventually_at_top,
        ge_iff_le, not_exists, not_forall, not_le, exists_prop] at hbdd,
      refine Œª hcon, hbdd ‚Üë(q + 1) _,
      filter_upwards [hcon] with x hx using not_lt.1 hx } },
  { obtain ‚ü®R, hR‚ü© := exists_frequently_lt_of_liminf_ne_top' hf,
    obtain ‚ü®q, hq‚ü© := exists_rat_lt R,
    refine ‚ü®q - 1, q, (sub_lt_self_iff _).2 zero_lt_one, _, _‚ü©,
    { simp only [is_bounded_under, is_bounded, eventually_map, eventually_at_top,
        ge_iff_le, not_exists, not_forall, not_le, exists_prop] at hbdd,
      refine Œª hcon, hbdd ‚Üë(q - 1) _,
      filter_upwards [hcon] with x hx using not_lt.1 hx },
    { refine Œª hcon, hR _,
      filter_upwards [hcon] with x hx using not_lt.2 ((not_lt.1 hx).trans hq.le) } }
end

/-- A realization of a stochastic process with bounded upcrossings and bounded liminfs is
convergent.

We use the spelling `< ‚àû` instead of the standard `‚â† ‚àû` in the assumptions since it is not as easy
to change `<` to `‚â†` under binders. -/
lemma tendsto_of_uncrossing_lt_top
  (hf‚ÇÅ : liminf at_top (Œª n, (‚à•f n œâ‚à•‚Çä : ‚Ñù‚â•0‚àû)) < ‚àû)
  (hf‚ÇÇ : ‚àÄ a b : ‚Ñö, a < b ‚Üí upcrossings a b f œâ < ‚àû) :
  ‚àÉ c, tendsto (Œª n, f n œâ) at_top (ùìù c) :=
begin
  by_cases h : is_bounded_under (‚â§) at_top (Œª n, |f n œâ|),
  { rw is_bounded_under_le_abs at h,
    refine tendsto_of_no_upcrossings rat.dense_range_cast _ h.1 h.2,
    { intros a ha b hb hab,
      obtain ‚ü®‚ü®a, rfl‚ü©, ‚ü®b, rfl‚ü©‚ü© := ‚ü®ha, hb‚ü©,
      exact not_frequently_of_upcrossings_lt_top hab (hf‚ÇÇ a b (rat.cast_lt.1 hab)).ne } },
  { obtain ‚ü®a, b, hab, h‚ÇÅ, h‚ÇÇ‚ü© := exists_upcrossings_of_not_bounded_under hf‚ÇÅ.ne h,
    exact false.elim ((hf‚ÇÇ a b hab).ne
      (upcrossings_eq_top_of_frequently_lt (rat.cast_lt.2 hab) h‚ÇÅ h‚ÇÇ)) }
end

lemma liminf_at_top_ae_bdd_of_snorm_bdd {p : ‚Ñù‚â•0‚àû} (hp : p ‚â† 0) (hp' : p ‚â† ‚àû)
  (hfmeas : ‚àÄ n, measurable (f n)) (hbdd : ‚àÄ n, snorm (f n) p Œº ‚â§ R) :
  ‚àÄ·µê œâ ‚àÇŒº, liminf at_top (Œª n, (‚à•f n œâ‚à•‚Çä ^ p.to_real : ‚Ñù‚â•0‚àû)) < ‚àû :=
begin
  refine ae_lt_top
    (measurable_liminf (Œª n, (hfmeas n).nnnorm.coe_nnreal_ennreal.pow_const p.to_real))
    (lt_of_le_of_lt (lintegral_liminf_le
      (Œª n, (hfmeas n).nnnorm.coe_nnreal_ennreal.pow_const p.to_real))
      (lt_of_le_of_lt _ (ennreal.rpow_lt_top_of_nonneg
        ennreal.to_real_nonneg ennreal.coe_ne_top : ‚ÜëR ^ p.to_real < ‚àû))).ne,
  simp_rw snorm_eq_lintegral_rpow_nnnorm hp hp' at hbdd,
  simp_rw [liminf_eq, eventually_at_top],
  exact Sup_le (Œª b ‚ü®a, ha‚ü©, (ha a le_rfl).trans
    ((ennreal.rpow_one_div_le_iff (ennreal.to_real_pos hp hp')).1 (hbdd _))),
end

lemma liminf_at_top_ae_bdd_of_snorm_one_bdd
  (hfmeas : ‚àÄ n, measurable (f n)) (hbdd : ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÄ·µê œâ ‚àÇŒº, liminf at_top (Œª n, (‚à•f n œâ‚à•‚Çä : ‚Ñù‚â•0‚àû)) < ‚àû :=
begin
  filter_upwards [liminf_at_top_ae_bdd_of_snorm_bdd one_ne_zero ennreal.one_ne_top hfmeas hbdd]
    with œâ hœâ,
  simp_rw [ennreal.one_to_real, ennreal.rpow_one] at hœâ,
  assumption
end

variables [is_finite_measure Œº]

/-- An L¬π-bounded submartingale has bounded upcrossings almost everywhere. -/
lemma submartingale.upcrossings_ae_lt_top'
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) (hab : a < b) :
  ‚àÄ·µê œâ ‚àÇŒº, upcrossings a b f œâ < ‚àû :=
begin
  refine ae_lt_top (hf.adapted.measurable_upcrossings hab) _,
  have := hf.mul_lintegral_upcrossings_le_lintegral_pos_part a b,
  rw [mul_comm, ‚Üê ennreal.le_div_iff_mul_le] at this,
  { refine (lt_of_le_of_lt this (ennreal.div_lt_top _ _)).ne,
    { have hR' : ‚àÄ n, ‚à´‚Åª œâ, ‚à•f n œâ - a‚à•‚Çä ‚àÇŒº ‚â§ R + ‚à•a‚à•‚Çä * Œº set.univ,
      { simp_rw snorm_one_eq_lintegral_nnnorm at hbdd,
        intro n,
        refine (lintegral_mono _ : ‚à´‚Åª œâ, ‚à•f n œâ - a‚à•‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª œâ, ‚à•f n œâ‚à•‚Çä + ‚à•a‚à•‚Çä ‚àÇŒº).trans _,
        { intro œâ,
          simp_rw [sub_eq_add_neg, ‚Üê nnnorm_neg a, ‚Üê ennreal.coe_add, ennreal.coe_le_coe],
          exact nnnorm_add_le _ _ },
        { simp_rw [ lintegral_add_right _ measurable_const, lintegral_const],
          exact add_le_add (hbdd _) le_rfl } },
      refine ne_of_lt (supr_lt_iff.2 ‚ü®R + ‚à•a‚à•‚Çä * Œº set.univ, ennreal.add_lt_top.2
          ‚ü®ennreal.coe_lt_top, ennreal.mul_lt_top ennreal.coe_lt_top.ne (measure_ne_top _ _)‚ü©,
          Œª n, le_trans _ (hR' n)‚ü©),
      refine lintegral_mono (Œª œâ, _),
      rw [ennreal.of_real_le_iff_le_to_real, ennreal.coe_to_real, coe_nnnorm],
      by_cases hnonneg : 0 ‚â§ f n œâ - a,
      { rw [lattice_ordered_comm_group.pos_of_nonneg _ hnonneg,
          real.norm_eq_abs, abs_of_nonneg hnonneg] },
      { rw lattice_ordered_comm_group.pos_of_nonpos _ (not_le.1 hnonneg).le,
        exact norm_nonneg _ },
      { simp only [ne.def, ennreal.coe_ne_top, not_false_iff] } },
    { simp only [hab, ne.def, ennreal.of_real_eq_zero, sub_nonpos, not_le] } },
  { simp only [hab, ne.def, ennreal.of_real_eq_zero, sub_nonpos, not_le, true_or]},
  { simp only [ne.def, ennreal.of_real_ne_top, not_false_iff, true_or] }
end

lemma submartingale.upcrossings_ae_lt_top
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÄ·µê œâ ‚àÇŒº, ‚àÄ a b : ‚Ñö, a < b ‚Üí upcrossings a b f œâ < ‚àû :=
begin
  simp only [ae_all_iff, eventually_imp_distrib_left],
  rintro a b hab,
  exact hf.upcrossings_ae_lt_top' hbdd (rat.cast_lt.2 hab),
end

/-- An L¬π-bounded submartingale converges almost everywhere. -/
lemma submartingale.exists_ae_tendsto_of_bdd
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÄ·µê œâ ‚àÇŒº, ‚àÉ c, tendsto (Œª n, f n œâ) at_top (ùìù c) :=
begin
  filter_upwards [hf.upcrossings_ae_lt_top hbdd, liminf_at_top_ae_bdd_of_snorm_one_bdd
    (Œª n, (hf.strongly_measurable n).measurable.mono (‚Ñ±.le n) le_rfl) hbdd] with œâ h‚ÇÅ h‚ÇÇ,
  exact tendsto_of_uncrossing_lt_top h‚ÇÇ h‚ÇÅ,
end

lemma submartingale.exists_ae_trim_tendsto_of_bdd
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÄ·µê œâ ‚àÇ(Œº.trim (Sup_le (Œª m ‚ü®n, hn‚ü©, hn ‚ñ∏ ‚Ñ±.le _) : (‚®Ü n, ‚Ñ± n) ‚â§ m0)),
    ‚àÉ c, tendsto (Œª n, f n œâ) at_top (ùìù c) :=
begin
  rw [ae_iff, trim_measurable_set_eq],
  { exact hf.exists_ae_tendsto_of_bdd hbdd },
  { exact measurable_set.compl (@measurable_set_exists_tendsto _ _ _ _ _ _ (‚®Ü n, ‚Ñ± n) _ _ _ _ _
    (Œª n, ((hf.strongly_measurable n).measurable.mono (le_Sup ‚ü®n, rfl‚ü©) le_rfl))) }
end

section limit

open_locale classical

variables [preorder Œπ] {E : Type*} [has_zero E] [topological_space E]

/-- Given a process `f` and a filtration `‚Ñ±`, if `f` converges to some `g` almost everywhere and
`g` is `‚®Ü n, ‚Ñ± n`-measurable, then `limit_process f ‚Ñ±` chooses said `g`, else it returns 0.

This definition is used to phrase the a.e. martingale convergence theorem
`submartingale.ae_tendsto_limit_process` where an L¬π-bounded submartingale `f` adapted to `‚Ñ±`
converges to `limit_process f ‚Ñ± Œº` `Œº`-almost everywhere. -/
noncomputable
def limit_process (f : Œπ ‚Üí Œ© ‚Üí E) (‚Ñ± : filtration Œπ m0) (Œº : measure Œ©) :=
if h : ‚àÉ g : Œ© ‚Üí E, strongly_measurable[‚®Ü n, ‚Ñ± n] g ‚àß
  ‚àÄ·µê œâ ‚àÇŒº, tendsto (Œª n, f n œâ) at_top (ùìù (g œâ)) then classical.some h else 0

lemma limit_process_measurable {f : Œπ ‚Üí Œ© ‚Üí E} {‚Ñ± : filtration Œπ m0} :
  strongly_measurable[‚®Ü n, ‚Ñ± n] (limit_process f ‚Ñ± Œº) :=
begin
  rw limit_process,
  split_ifs with h h,
  exacts [(classical.some_spec h).1, strongly_measurable_zero]
end

lemma limit_process_measurable' {f : Œπ ‚Üí Œ© ‚Üí E} {‚Ñ± : filtration Œπ m0} :
  strongly_measurable[m0] (limit_process f ‚Ñ± Œº) :=
limit_process_measurable.mono (Sup_le (Œª m ‚ü®n, hn‚ü©, hn ‚ñ∏ ‚Ñ±.le _))

end limit

/-- **Almost everywhere martingale convergence theorem**: An L¬π-bounded submartingale converges
almost everywhere to a `‚®Ü n, ‚Ñ± n`-measurable function. -/
lemma submartingale.ae_tendsto_limit_process
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  ‚àÄ·µê œâ ‚àÇŒº, tendsto (Œª n, f n œâ) at_top (ùìù (limit_process f ‚Ñ± Œº œâ)) :=
begin
  classical,
  suffices : ‚àÉ g, strongly_measurable[‚®Ü n, ‚Ñ± n] g ‚àß ‚àÄ·µê œâ ‚àÇŒº, tendsto (Œª n, f n œâ) at_top (ùìù (g œâ)),
  { rw [limit_process, dif_pos this],
    exact (classical.some_spec this).2 },
  set g' : Œ© ‚Üí ‚Ñù := Œª œâ, if h : ‚àÉ c, tendsto (Œª n, f n œâ) at_top (ùìù c) then h.some else 0,
  have hle : (‚®Ü n, ‚Ñ± n) ‚â§ m0 := Sup_le (Œª m ‚ü®n, hn‚ü©, hn ‚ñ∏ ‚Ñ±.le _),
  have hg' : ‚àÄ·µê œâ ‚àÇ(Œº.trim hle), tendsto (Œª n, f n œâ) at_top (ùìù (g' œâ)),
  { filter_upwards [hf.exists_ae_trim_tendsto_of_bdd hbdd] with œâ hœâ,
    simp_rw [g', dif_pos hœâ],
    exact hœâ.some_spec },
  have hg'm : @ae_strongly_measurable _ _ _ (‚®Ü n, ‚Ñ± n) g' (Œº.trim hle) :=
    (@ae_measurable_of_tendsto_metrizable_ae' _ _ (‚®Ü n, ‚Ñ± n) _ _ _ _ _ _ _
      (Œª n, ((hf.strongly_measurable n).measurable.mono
      (le_Sup ‚ü®n, rfl‚ü© : ‚Ñ± n ‚â§ ‚®Ü n, ‚Ñ± n) le_rfl).ae_measurable) hg').ae_strongly_measurable,
  obtain ‚ü®g, hgm, hae‚ü© := hg'm,
  have hg : ‚àÄ·µê œâ ‚àÇŒº.trim hle, tendsto (Œª n, f n œâ) at_top (ùìù (g œâ)),
  { filter_upwards [hae, hg'] with œâ hœâ hg'œâ,
    exact hœâ ‚ñ∏ hg'œâ },
  exact ‚ü®g, hgm, measure_eq_zero_of_trim_eq_zero hle hg‚ü©,
end

/-- The limiting process of an L¬π-bounded submartingale is integrable. -/
lemma submartingale.mem_‚Ñí1_limit_process
  (hf : submartingale f ‚Ñ± Œº) (hbdd : ‚àÄ n, snorm (f n) 1 Œº ‚â§ R) :
  mem_‚Ñíp (limit_process f ‚Ñ± Œº) 1 Œº :=
begin
  refine ‚ü®limit_process_measurable'.ae_strongly_measurable,
    lt_of_le_of_lt (Lp.snorm_lim_le_liminf_snorm
      (Œª n, ((hf.strongly_measurable n).measurable.mono (‚Ñ±.le n) le_rfl).ae_strongly_measurable)
      (limit_process f ‚Ñ± Œº) (hf.ae_tendsto_limit_process hbdd))
      (lt_of_le_of_lt _ (ennreal.coe_lt_top : ‚ÜëR < ‚àû))‚ü©,
  simp_rw [liminf_eq, eventually_at_top],
  exact Sup_le (Œª b ‚ü®a, ha‚ü©, (ha a le_rfl).trans (hbdd _))
end

end ae_convergence

end measure_theory
