import probability.martingale.borel_cantelli
import probability.independence

open_locale measure_theory probability_theory ennreal big_operators topological_space

open measure_theory probability_theory measurable_space

namespace probability_theory

variables {Œ© : Type*} {m0 : measurable_space Œ©} {Œº : measure Œ©} {s : ‚Ñï ‚Üí set Œ©}

section pi_system

lemma Indep_set.indep_sets_pi_Union_Inter (hs : Indep_set s Œº) (n : ‚Ñï) :
  indep_sets {s n} (pi_Union_Inter (Œª k : ‚Ñï, {s k}) {T | T ‚â§ finset.range n}) Œº :=
begin
  rintro a b ha ‚ü®I, hI, f, hf, rfl‚ü©,
  simp only [set.mem_singleton_iff] at hf,
  rw [set.mem_singleton_iff.1 ha, (set.Inter_congr (Œª i, set.Inter_congr $ hf i) :
    (‚ãÇ i ‚àà I, f i) = ‚ãÇ i ‚àà I, s i), ‚Üê finset.set_bInter_insert, hs, finset.prod_insert, ‚Üê hs],
  { exact Œª i hi, measurable_set_generate_from (set.mem_singleton _) },
  { exact Œª hn, finset.not_mem_range_self (hI hn) },
  { exact Œª i hi, measurable_set_generate_from (set.mem_singleton _) }
end

lemma generate_from_pi_Union_Inter_range_eq (n : ‚Ñï) :
  generate_from (pi_Union_Inter (Œª k : ‚Ñï, {s k}) {T | T ‚â§ finset.range n}) =
  generate_from {t | ‚àÉ k < n, s k = t} :=
begin
  refine le_antisymm (generate_from_le _) (generate_from_mono _),
  { rintro _ ‚ü®I, hI, f, hf, rfl‚ü©,
    exact finset.measurable_set_bInter _ (Œª m hm,
      measurable_set_generate_from ‚ü®m, finset.mem_range.1 $ hI hm, (hf m hm).symm‚ü©) },
  { rintro _ ‚ü®k, hk, rfl‚ü©,
    exact ‚ü®{k}, Œª m hm, (finset.mem_singleton.1 hm).symm ‚ñ∏ finset.mem_range.2 hk, s,
      Œª m hm, (finset.mem_singleton.1 hm).symm ‚ñ∏ rfl, (finset.set_bInter_singleton k s).symm‚ü© }
end

lemma Indep_set.indep_generate_from_lt [is_probability_measure Œº]
  (hsm : ‚àÄ n, measurable_set (s n)) (hs : Indep_set s Œº) (n : ‚Ñï) :
  indep (generate_from {s n}) (generate_from {t | ‚àÉ k < n, s k = t}) Œº :=
begin
  rw ‚Üê generate_from_pi_Union_Inter_range_eq n,
  refine indep_sets.indep' (Œª t ht, (set.mem_singleton_iff.1 ht).symm ‚ñ∏ hsm n)
    (Œª t ht, generate_from_pi_Union_Inter_le _ _ _ _ (measurable_set_generate_from ht))
    (is_pi_system.singleton _) _ (hs.indep_sets_pi_Union_Inter _),
  { exact (Œª k, generate_from_le $ Œª t ht, (set.mem_singleton_iff.1 ht).symm ‚ñ∏ hsm k) },
  { refine is_pi_system_pi_Union_Inter _ (Œª k, is_pi_system.singleton _) _
      (Œª a b ha hb, @finset.union_subset _ (Œª x y, classical.prop_decidable (x = y)) _ _ _ ha hb) }
end

lemma Indep_set.indep_generate_from_le [is_probability_measure Œº]
  (hsm : ‚àÄ n, measurable_set (s n)) (hs : Indep_set s Œº) (n : ‚Ñï) :
  indep (generate_from {s (n + 1)}) (generate_from {t | ‚àÉ k ‚â§ n, s k = t}) Œº :=
begin
  convert hs.indep_generate_from_lt hsm (n + 1),
  simp_rw nat.lt_succ_iff
end

end pi_system

section borel_cantelli

def filtration_of_set {s : ‚Ñï ‚Üí set Œ©} (hsm : ‚àÄ n, measurable_set (s n)) : filtration ‚Ñï m0 :=
{ seq := Œª n, generate_from {t | ‚àÉ k ‚â§ n, s k = t},
  mono' := Œª n m hnm, generate_from_mono (Œª t ‚ü®k, hk‚ÇÅ, hk‚ÇÇ‚ü©, ‚ü®k, hk‚ÇÅ.trans hnm, hk‚ÇÇ‚ü©),
  le' := Œª n, generate_from_le (Œª t ‚ü®k, hk‚ÇÅ, hk‚ÇÇ‚ü©, hk‚ÇÇ ‚ñ∏ hsm k) }

lemma measurable_set_filtration_of_set {s : ‚Ñï ‚Üí set Œ©}
  (hsm : ‚àÄ n, measurable_set[m0] (s n)) (n : ‚Ñï) {k : ‚Ñï} (hk : k ‚â§ n) :
  measurable_set[filtration_of_set hsm n] (s k) :=
measurable_set_generate_from ‚ü®k, hk, rfl‚ü©

lemma measurable_set_filtration_of_set' {s : ‚Ñï ‚Üí set Œ©}
  (hsm : ‚àÄ n, measurable_set[m0] (s n)) (n : ‚Ñï) :
  measurable_set[filtration_of_set hsm n] (s n) :=
measurable_set_filtration_of_set hsm n le_rfl

variables [is_probability_measure Œº]

lemma Indep_set.filt_indep
  (hsm : ‚àÄ n, measurable_set (s n)) (hs : Indep_set s Œº) (n : ‚Ñï) :
  indep (generate_from {s (n + 1)}) (filtration_of_set hsm n) Œº :=
hs.indep_generate_from_le hsm _

lemma Indep_set.condexp_indicator_filt_ae_eq
  (hsm : ‚àÄ n, measurable_set (s n)) (hs : Indep_set s Œº) (n : ‚Ñï) :
  Œº[(s (n + 1)).indicator (Œª œâ, 1 : Œ© ‚Üí ‚Ñù) | filtration_of_set hsm n] =·µê[Œº]
    Œª œâ, (Œº (s (n + 1))).to_real :=
begin
  refine (condexp_indep_eq (generate_from_le
    (Œª t ht, (set.mem_singleton_iff.1 ht).symm ‚ñ∏ hsm _) : generate_from {s (n + 1)} ‚â§ m0)
    ((filtration_of_set hsm).le n)
    (strongly_measurable_one.indicator (measurable_set_generate_from (set.mem_singleton _)))
    (hs.indep_generate_from_le hsm n)).trans (ae_of_all Œº (Œª œâ, _)),
  convert integral_indicator_const (1 : ‚Ñù) (hsm (n + 1)),
  rw [smul_eq_mul, mul_one],
end

lemma Indep_set.condexp_indicator_filt_ae_eq'
  (hsm : ‚àÄ n, measurable_set (s n)) (hs : Indep_set s Œº) :
  ‚àÄ·µê œâ ‚àÇŒº, ‚àÄ n, Œº[(s (n + 1)).indicator (1 : Œ© ‚Üí ‚Ñù) | filtration_of_set hsm n] œâ =
    (Œº (s (n + 1))).to_real :=
ae_all_iff.2 (hs.condexp_indicator_filt_ae_eq hsm)

open filter

section tsum

variables {Œ± Œ≤ : Type*} [add_comm_monoid Œ±] [topological_space Œ±] [t2_space Œ±]

@[simp]
lemma tsum_univ (f : Œ≤ ‚Üí Œ±) :
  ‚àë' x : (set.univ : set Œ≤), f x = ‚àë' x, f x :=
by simp [tsum_subtype]

@[simp]
lemma tsum_singleton (b : Œ≤) (f : Œ≤ ‚Üí Œ±) :
  ‚àë' x : ({b} : set Œ≤), f x = f b :=
begin
  rw [tsum_subtype, tsum_eq_single b],
  { simp },
  { intros b' hb',
    rw set.indicator_of_not_mem,
    rwa set.mem_singleton_iff },
  { apply_instance }
end

lemma ennreal.tsum_le_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} {c : ‚Ñù‚â•0‚àû}
  (h : ‚àÄ n, ‚àë i in finset.range n, f i ‚â§ c) :
  ‚àë' n, f n ‚â§ c :=
le_of_tendsto' ((ennreal.has_sum_iff_tendsto_nat _).1 ennreal.summable.has_sum) h

lemma ennreal.tsum_add_one_eq_top {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' n, f n = ‚àû) (hf0 : f 0 ‚â† ‚àû) :
  ‚àë' n, f (n + 1) = ‚àû :=
begin
  classical,
  suffices : f 0 + ‚àë' (n : ‚Ñï), f (n + 1) = ‚ä§,
  { obtain h | h := ennreal.add_eq_top.1 this,
    { exact false.elim (hf0 h) },
    { assumption } },
  { rw [‚Üê tsum_univ, (_ : set.univ = {0} ‚à™ set.range nat.succ)] at hf,
    swap,
    { rw [eq_comm, set.eq_univ_iff_forall],
      rintro ‚ü®-, x‚ü©,
      { exact or.inl rfl },
      { exact or.inr ‚ü®x, rfl‚ü© } },
    rw [‚Üê top_le_iff, ‚Üê hf],
    refine (ennreal.tsum_union_le _ _ _).trans _,
    rw [tsum_singleton, ennreal.add_le_add_iff_left hf0, tsum_subtype],
    refine ennreal.tsum_le_of_sum_range_le (Œª n, _),
    cases n,
    { simp only [finset.range_zero, finset.sum_empty, zero_le'] },
    { refine le_trans _ (sum_le_tsum (finset.range n) (Œª _ _, bot_le) ennreal.summable),
      set i : ‚Ñï ‚Ü™ ‚Ñï := ‚ü®(+1), nat.succ_injective‚ü©,
      rw [(_ : ‚àë k in finset.range n, f (k + 1) = ‚àë k in finset.range n, f (i k)),
        ‚Üê finset.sum_map (finset.range n) i f, finset.sum_indicator_eq_sum_filter],
      swap, { refl },
      refine le_of_eq (finset.sum_congr _ (Œª _ _, rfl)),
      ext m,
      rw [finset.mem_filter, finset.mem_map],
      split,
      { rintro ‚ü®hk, k, rfl‚ü©,
        rw [finset.mem_range, nat.succ_lt_succ_iff] at hk,
        exact ‚ü®k, finset.mem_range.2 hk, rfl‚ü© },
      { rintro ‚ü®k, hk, rfl‚ü©,
        exact ‚ü®finset.mem_range.2 $ nat.succ_lt_succ $ finset.mem_range.1 hk, k, rfl‚ü© } } }
end

end tsum

/-- **The second Borel-Cantelli lemma**: Given a sequence of independent sets `(s‚Çô)` such that
`‚àë n, Œº s‚Çô = ‚àû`, `limsup s‚Çô` has measure 1. -/
lemma measure_limsup_eq_one
  (hsm : ‚àÄ n, measurable_set (s n)) (hs : Indep_set s Œº) (hs' : ‚àë' n, Œº (s n) = ‚àû) :
  Œº (limsup at_top s) = 1 :=
begin
  rw measure_congr (eventually_eq_set.2 (ae_mem_limsup_at_top_iff Œº $
    measurable_set_filtration_of_set' hsm) :
      (limsup at_top s : set Œ©) =·µê[Œº] {œâ | tendsto (Œª n, ‚àë k in finset.range n,
        Œº[(s (k + 1)).indicator (1 : Œ© ‚Üí ‚Ñù) | filtration_of_set hsm k] œâ) at_top at_top}),
  suffices : {œâ | tendsto (Œª n, ‚àë k in finset.range n,
    Œº[(s (k + 1)).indicator (1 : Œ© ‚Üí ‚Ñù) | filtration_of_set hsm k] œâ) at_top at_top} =·µê[Œº] set.univ,
  { rw [measure_congr this, measure_univ] },
  filter_upwards [hs.condexp_indicator_filt_ae_eq' hsm] with œâ hœâ,
  refine eq_true_intro (_ : tendsto _ _ _),
  simp_rw hœâ,
  have htends : tendsto (Œª n, ‚àë k in finset.range n, Œº (s (k + 1))) at_top (ùìù ‚àû),
  { rw ‚Üê ennreal.tsum_add_one_eq_top hs' (measure_ne_top _ _),
    exact ennreal.tendsto_nat_tsum _ },
  rw ennreal.tendsto_nhds_top_iff_nnreal at htends,
  refine tendsto_at_top_at_top_of_monotone' _ _,
  { refine monotone_nat_of_le_succ (Œª n, _),
    rw [‚Üê sub_nonneg, finset.sum_range_succ_sub_sum],
    exact ennreal.to_real_nonneg },
  { rintro ‚ü®B, hB‚ü©,
    refine not_eventually.2 _ (htends B.to_nnreal),
    refine frequently_of_forall (Œª n, not_lt.2 _),
    rw mem_upper_bounds at hB,
    specialize hB (‚àë (k : ‚Ñï) in finset.range n, Œº (s (k + 1))).to_real _,
    { refine ‚ü®n, _‚ü©,
      rw ennreal.to_real_sum,
      exact Œª _ _, measure_ne_top _ _ },
    { rw ‚Üê ennreal.to_real_le_to_real (ennreal.sum_lt_top _).ne ennreal.coe_ne_top,
      { exact hB.trans (by simp) },
      { exact Œª _ _, measure_ne_top _ _ } } }
end

end borel_cantelli

end probability_theory
