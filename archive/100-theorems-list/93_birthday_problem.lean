/-
Copyright (c) 2020 Eric Rodriguez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Eric Rodriguez
-/
import data.fintype.card
import data.nat.factorial
import tactic
open_locale classical nat

open finset function nat
local notation `|` x `|` := finset.card x
local notation `‚Äñ` x `‚Äñ` := fintype.card x

/-- desc_fac n k = (n + k)! / n! with no divisions -/
def desc_fac (n : ‚Ñï) : ‚Ñï ‚Üí ‚Ñï
| 0 := 1
| (k + 1) := (n + k + 1) * desc_fac k

@[simp] lemma desc_fac_zero (n : ‚Ñï) : desc_fac n 0 = 1 := rfl

@[simp] lemma zero_desc_fac (k : ‚Ñï) : desc_fac 0 k = k! :=
begin
  induction k with t ht, refl,
  unfold desc_fac, rw [ht, zero_add, factorial_succ]
end

lemma desc_fac_succ {n k : ‚Ñï} : desc_fac n k.succ = (n + k + 1) * desc_fac n k := rfl

lemma succ_desc_fac {n k : ‚Ñï} : (n + 1) * desc_fac n.succ k = (n + k + 1) * desc_fac n k :=
begin
  induction k with t ht, simp!, rw desc_fac_succ, rw desc_fac_succ,
  have : (n + 1) * ((n.succ + t + 1) * desc_fac n.succ t)
       = (n.succ + t + 1) * ((n + 1) * desc_fac n.succ t), by ac_refl,
  rw this, rw ht, repeat {rw succ_eq_add_one}, ring
end

theorem eval_desc_fac (n : ‚Ñï) : ‚àÄ k : ‚Ñï, (n + k)! = n! * desc_fac n k
| 0 := by simp!
| (k + 1) := by unfold desc_fac; rw [‚Üêmul_assoc, mul_comm n!, mul_assoc, ‚Üêeval_desc_fac]; simp!

def embedding_of_subtype (Œ± Œ≤) [fintype Œ±] [fintype Œ≤] : (Œ± ‚Ü™ Œ≤) ‚âÉ {f : Œ± ‚Üí Œ≤ // injective f} :=
{ to_fun := Œª f, ‚ü®f, f.injective‚ü©,
  inv_fun := Œª f, ‚ü®f.val, f.property‚ü©,
  left_inv := Œª f, by {ext, simp},
  right_inv := Œª f, by simp }

-- `decidable_pred (@injective Œ± Œ≤)` and various variations didn't give me an instance ü§∑‚Äç‚ôÇÔ∏è
noncomputable instance fintype.embedding {Œ± Œ≤} [fintype Œ±] [fintype Œ≤] : fintype (Œ± ‚Ü™ Œ≤) :=
fintype.of_equiv {f : Œ± ‚Üí Œ≤ // injective f} (embedding_of_subtype Œ± Œ≤).symm

-- I can never quite figure out ‚ñ∏ :(
lemma less_injs {Œ± Œ≤} [fintype Œ±] [fintype Œ≤] : ‚ÄñŒ± ‚Ü™ Œ≤‚Äñ ‚â§ ‚ÄñŒ± ‚Üí Œ≤‚Äñ :=
by {rw fintype.of_equiv_card, exact fintype.card_subtype_le injective}

lemma card_inj' (n : ‚Ñï) (Œ≤) [fintype Œ≤] (h : n ‚â§ ‚ÄñŒ≤‚Äñ) : ‚Äñfin n ‚Ü™ Œ≤‚Äñ = desc_fac (‚ÄñŒ≤‚Äñ - n) n :=
begin
  induction n with n hn,
    rw [desc_fac_zero], nontriviality (fin 0 ‚Ü™ Œ≤),
    obtain ‚ü®f, g, ne‚ü© := exists_pair_ne (fin 0 ‚Ü™ Œ≤),
    exfalso, apply ne, ext x, exact x.elim0,

  let extend : (fin n ‚Üí Œ≤) ‚Üí Œ≤ ‚Üí fin n.succ ‚Üí Œ≤ :=
    Œª f : fin n ‚Üí Œ≤, Œª b : Œ≤, fin.cons b f,

  let equiv_classes : (fin n ‚Ü™ Œ≤) ‚Üí finset (fin n.succ ‚Ü™ Œ≤) :=
    Œª f : fin n ‚Ü™ Œ≤, univ.filter (Œª g : fin n.succ ‚Ü™ Œ≤, ‚àÉ k : Œ≤, extend f k = g),

  have mem_equiv : ‚àÄ f g, g ‚àà equiv_classes f ‚Üî ‚àÉ k : Œ≤, extend f k = g, by simp [equiv_classes],

  have all_injf_covered : univ = univ.bUnion equiv_classes,
    apply subset.antisymm,
    { rintros f -, rw mem_bUnion,
      refine ‚ü®‚ü®fin.tail f, Œª _ _ h, fin.succ_inj.mp $ f.injective h‚ü©, _‚ü©,
      suffices : ‚àÉ (a : Œ≤), extend (fin.tail ‚áëf) a = ‚áëf, by simpa,
      use f 0, simp [extend] },
    { exact subset_univ _ },

  have equiv_class_size : ‚àÄ f : fin n ‚Ü™ Œ≤, |equiv_classes f| = ‚ÄñŒ≤‚Äñ - n,
  {
    intro f, let poss_vals := univ \ finset.map ‚ü®f, f.inj'‚ü© univ,

    have num_poss_vals : |poss_vals| = ‚ÄñŒ≤‚Äñ - n, by simp [poss_vals, card_univ, card_sdiff],
    have mem_poss_vals : ‚àÄ t, t ‚àà poss_vals ‚Üî ‚àÄ (x : fin n), ¬¨f x = t, by simp [poss_vals],

    apply le_antisymm,
    { by_contra card_too_big, let first := Œª g : fin n.succ ‚Ü™ Œ≤, g 0,
      -- (if I just write down x 0 = y 0, it won't work! need this shim)
      suffices : ‚àÉ x ‚àà equiv_classes f, ‚àÉ y ‚àà equiv_classes f, x ‚â† y ‚àß first x = first y,
      { obtain ‚ü®x, x_equiv, y, y_equiv, x_ne_y, x_y_agree‚ü© := this,
        rw [mem_equiv] at x_equiv y_equiv,
        obtain ‚ü®x_zero, x_equiv‚ü© := x_equiv, obtain ‚ü®y_zero, y_equiv‚ü© := y_equiv,
        simp only [extend, first] at x_y_agree x_equiv y_equiv,

        apply x_ne_y, ext t, revert t,
        refine fin.induction _ _,
          exact x_y_agree,
        rintros t -, rw [‚Üêx_equiv, ‚Üêy_equiv, fin.cons_succ, fin.cons_succ] },

      apply finset.exists_ne_map_eq_of_card_lt_of_maps_to,
      push_neg at card_too_big, rw ‚Üênum_poss_vals at card_too_big, exact card_too_big,

      intros g g_equiv, rw mem_equiv at g_equiv, obtain ‚ü®k, g_equiv‚ü© := g_equiv,
      simp only [first, mem_poss_vals], simp only [extend] at g_equiv,
      have : g 0 = k, by rw [‚Üêg_equiv, fin.cons_zero],
      intros x eq, have : g x.succ = g 0, by rw [‚Üêeq, ‚Üêg_equiv, fin.cons_succ],
      apply fin.succ_ne_zero x, exact g.injective this },

    { let extended : finset (fin n.succ ‚Ü™ Œ≤) :=
        finset.map ‚ü®Œª x : {x // x ‚àà poss_vals}, ‚ü®extend f x, _‚ü©, _‚ü© poss_vals.attach,
      rotate,
      { intros a‚ÇÅ a‚ÇÇ, apply fin.induction_on a‚ÇÅ; apply fin.induction_on a‚ÇÇ,
        -- not sure how to do this `induction_on` using the `induction` tactic
        -- (all variants of `induction using fin.something` didn't work for me)
        { intro _, refl },
        { rintros i - eq, simp only [extend, fin.cons_zero, fin.cons_succ] at eq,
        have := x.prop, rw mem_poss_vals at this, exfalso, apply this i, exact eq.symm},
        { rintros i - eq, simp only [extend, fin.cons_zero, fin.cons_succ] at eq,
        have := x.prop, rw mem_poss_vals at this, exfalso, apply this i, exact eq},
        -- how can I undo this duplication?
        { rintros i‚ÇÇ - i‚ÇÅ -, simp only [extend, fin.cons_succ, fin.succ_inj],
          intro eq, exact f.injective eq } },

      { intros a‚ÇÅ a‚ÇÇ eq, simp only [extend] at eq,
        ext, rw funext_iff at eq,
        specialize eq 0, rwa [fin.cons_zero, fin.cons_zero] at eq },
      -- simp is getting hung up on `bex_def` here sadly, so have to do it manually
      have mem_extended : ‚àÄ {g : fin n.succ ‚Ü™ Œ≤}, g ‚àà extended ‚Üí ‚àÉ a ‚àà poss_vals, extend ‚áëf a = g,
        intros g g_extended, simp only [extended, mem_map] at g_extended,
        obtain ‚ü®‚ü®a, a_poss‚ü©, -, g_extended‚ü© := g_extended,
        simp only [embedding.coe_fn_mk, subtype.coe_mk] at g_extended,
        refine ‚ü®a, a_poss, _‚ü©, rw ‚Üêg_extended, simp,

      have : |extended| = ‚ÄñŒ≤‚Äñ - n, by simp [extended, poss_vals, card_sdiff, card_univ],

      rw ‚Üêthis, apply card_le_of_subset, rintros g g_extended,
      simp only [extend, mem_equiv],
      use g 0, ext t, revert t,
      refine fin.induction (by rw fin.cons_zero) _,
      rintros i -,
      obtain ‚ü®k, untouched, g_extended‚ü© := mem_extended g_extended,
      rw ‚Üêg_extended, simp [extend] } },

  rw [‚Üêcard_univ, all_injf_covered, card_bUnion], swap, -- card_bUnion has a disjointness req
  { rintros g - j - g_ne_j, rw disjoint_iff_ne, intros a a_equiv b b_equiv,
    intro a_eq_b, apply g_ne_j, rw mem_equiv at a_equiv b_equiv,
    obtain ‚ü®k‚ÇÅ, a_equiv‚ü© := a_equiv, obtain ‚ü®k‚ÇÇ, b_equiv‚ü© := b_equiv,
    simp only [extend] at a_equiv b_equiv, subst a_eq_b, rw ‚Üêb_equiv at a_equiv,
    apply_fun fin.tail at a_equiv, repeat { rw fin.tail_cons at a_equiv },
    ext, rw a_equiv },
  unfold desc_fac,

  suffices : ‚Äñfin n ‚Ü™ Œ≤‚Äñ * (‚ÄñŒ≤‚Äñ - n) = (‚ÄñŒ≤‚Äñ - n.succ + n + 1) * desc_fac (‚ÄñŒ≤‚Äñ - n.succ) n,
    by simpa [equiv_class_size, card_univ],

  rw hn (lt_of_succ_le h).le,
  set t := ‚ÄñŒ≤‚Äñ - n.succ with ht,
  have : ‚ÄñŒ≤‚Äñ - n = t.succ,
  { rw [ht, succ_eq_add_one, ‚Üênat.sub_sub_assoc, succ_sub_one], exact h, exact nat.succ_pos _ },
  rw [this, mul_comm, succ_desc_fac]
end

theorem birthday : 2 * ‚Äñfin 23 ‚Ü™ fin 365‚Äñ < ‚Äñfin 23 ‚Üí fin 365‚Äñ :=
  by norm_num [card_inj', desc_fac]

theorem birthday' : 2 * ‚Äñfin 22 ‚Ü™ fin 365‚Äñ > ‚Äñfin 22 ‚Üí fin 365‚Äñ :=
  by norm_num [card_inj', desc_fac]
