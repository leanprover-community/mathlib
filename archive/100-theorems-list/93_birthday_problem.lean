/-
Copyright (c) 2020 Eric Rodriguez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Eric Rodriguez
-/
import data.fintype.card
import data.nat.factorial
import data.equiv.fin
import tactic
open_locale classical nat

open finset function nat
variables {Œ± Œ≤ : Type*} [fintype Œ±] [fintype Œ≤]
local notation `|` x `|` := finset.card x
local notation `‚Äñ` x `‚Äñ` := fintype.card x

/-- desc_fac n k = (n + k)! / n! with no divisions -/
def desc_fac (n : ‚Ñï) : ‚Ñï ‚Üí ‚Ñï
| 0 := 1
| (k + 1) := (n + k + 1) * desc_fac k

@[simp] lemma desc_fac_zero (n : ‚Ñï) : desc_fac n 0 = 1 := rfl

@[simp] lemma zero_desc_fac (k : ‚Ñï) : desc_fac 0 k = k! :=
begin
  induction k with t ht, refl,
  unfold desc_fac, rw [ht, zero_add, factorial_succ]
end

theorem eval_desc_fac (n : ‚Ñï) : ‚àÄ k : ‚Ñï, (n + k)! = n! * desc_fac n k
| 0 := by simp!
| (k + 1) := by unfold desc_fac; rw [‚Üêmul_assoc, mul_comm n!, mul_assoc, ‚Üêeval_desc_fac]; simp!

def embedding_of_subtype (Œ± Œ≤) [fintype Œ±] [fintype Œ≤] : (Œ± ‚Ü™ Œ≤) ‚âÉ {f : Œ± ‚Üí Œ≤ // injective f} :=
{ to_fun := Œª f, ‚ü®f, f.injective‚ü©,
  inv_fun := Œª f, ‚ü®f.val, f.property‚ü©,
  left_inv := Œª f, by {ext, simp},
  right_inv := Œª f, by simp }

-- `decidable_pred (@injective Œ± Œ≤)` and various variations didn't give me an instance ü§∑‚Äç‚ôÇÔ∏è
noncomputable instance fintype.embedding {Œ± Œ≤} [fintype Œ±] [fintype Œ≤] : fintype (Œ± ‚Ü™ Œ≤) :=
fintype.of_equiv {f : Œ± ‚Üí Œ≤ // injective f} (embedding_of_subtype Œ± Œ≤).symm

-- I can never quite figure out ‚ñ∏ :(
lemma less_injs {Œ± Œ≤} [fintype Œ±] [fintype Œ≤] : ‚ÄñŒ± ‚Ü™ Œ≤‚Äñ ‚â§ ‚ÄñŒ± ‚Üí Œ≤‚Äñ :=
by {rw fintype.of_equiv_card, exact fintype.card_subtype_le injective}

lemma card_inj' (n : ‚Ñï) (Œ≤) [fintype Œ≤] (h : n ‚â§ ‚ÄñŒ≤‚Äñ) : ‚Äñfin n ‚Ü™ Œ≤‚Äñ = desc_fac (‚ÄñŒ≤‚Äñ - n) n :=
begin
  induction n with n hn,
    rw [desc_fac_zero], nontriviality (fin 0 ‚Ü™ Œ≤),
    obtain ‚ü®f, g, ne‚ü© := exists_pair_ne (fin 0 ‚Ü™ Œ≤),
    exfalso, apply ne, ext x, exact fin.elim0 x,

  let extend : (fin n ‚Üí Œ≤) ‚Üí Œ≤ ‚Üí fin n.succ ‚Üí Œ≤ :=
    Œª f : fin n ‚Üí Œ≤, Œª b : Œ≤, fin.cons b f,

  let equiv_classes : (fin n ‚Ü™ Œ≤) ‚Üí finset (fin n.succ ‚Ü™ Œ≤) :=
    Œª f : fin n ‚Ü™ Œ≤, univ.filter (Œª g : fin n.succ ‚Ü™ Œ≤, ‚àÉ k : Œ≤, extend f k = g),

  have all_injf_covered : univ = univ.bUnion equiv_classes, sorry, /-
    apply subset.antisymm,
    { rintros f -, rw mem_bUnion,
      refine ‚ü®‚ü®fin.tail f, Œª _ _ h, fin.succ_inj.mp $ f.injective h‚ü©, _‚ü©,
      suffices : ‚àÉ (a : Œ≤), extend (fin.tail ‚áëf) a = ‚áëf, by simpa,
      use f 0, simp only [extend], exact fin.cons_self_tail _ },
    { exact subset_univ _ }, -/

  have equiv_class_size : ‚àÄ f : fin n ‚Ü™ Œ≤, |equiv_classes f| = ‚ÄñŒ≤‚Äñ - n,
  {
    intro f, let poss_vals := univ \ finset.map ‚ü®f, f.inj'‚ü© univ,
    have num_poss_vals : |poss_vals| = ‚ÄñŒ≤‚Äñ - n, by simp [poss_vals, card_univ, card_sdiff],
    apply le_antisymm, sorry, /-
    { by_contra card_too_big, let first := Œª g : fin n.succ ‚Ü™ Œ≤, g 0,
      -- (if I just write down x 0 = y 0, it won't work! need this shim)
      suffices : ‚àÉ x ‚àà equiv_classes f, ‚àÉ y ‚àà equiv_classes f, x ‚â† y ‚àß first x = first y,
      { obtain ‚ü®x, x_equiv, y, y_equiv, x_ne_y, x_y_agree‚ü© := this,
        simp only [true_and, mem_filter, mem_univ, fin.coe_eq_cast_succ] at x_equiv y_equiv,
        obtain ‚ü®x_zero, x_equiv‚ü© := x_equiv, obtain ‚ü®y_zero, y_equiv‚ü© := y_equiv,
        simp only [extend, first] at x_y_agree x_equiv y_equiv,

        apply x_ne_y, ext t, revert t,
        refine fin.induction _ _,
          exact x_y_agree,
        rintros t -, rw [‚Üêx_equiv, ‚Üêy_equiv, fin.cons_succ, fin.cons_succ] },
      apply finset.exists_ne_map_eq_of_card_lt_of_maps_to,
      push_neg at card_too_big, rw ‚Üênum_poss_vals at card_too_big, exact card_too_big,

      intros g g_equiv, simp [first, extend] at g_equiv ‚ä¢, obtain ‚ü®k, g_equiv‚ü© := g_equiv,
      have : g 0 = k, by rw [‚Üêg_equiv, fin.cons_zero],
      intros x eq, have : g x.succ = g 0, by rw [‚Üêeq, ‚Üêg_equiv, fin.cons_succ],
      apply fin.succ_ne_zero x, exact g.injective this }, -/
    {
      let extended : finset (fin n.succ ‚Ü™ Œ≤) :=
        finset.map ‚ü®Œª x : {x // x ‚àà poss_vals}, ‚ü®extend f x, _‚ü©, _‚ü© poss_vals.attach,
      rotate,
      { intros a‚ÇÅ a‚ÇÇ eq, simp only [extend] at eq, sorry },
      { intros a‚ÇÅ a‚ÇÇ eq, simp only [extend] at eq,
        ext, rw funext_iff at eq,
        specialize eq 0, rwa [fin.cons_zero, fin.cons_zero] at eq },
      have : |extended| = ‚ÄñŒ≤‚Äñ - n, by simp [extended, poss_vals, card_sdiff, card_univ],
      rw ‚Üêthis, apply card_le_of_subset, rintros g g_extended,
      simp only [extend, true_and, mem_filter, mem_univ],
      use g 0, ext t, revert t,
      refine fin.induction (by rw fin.cons_zero) _,
      rintros i -, sorry
    }
  },
  rw [‚Üêcard_univ, all_injf_covered, card_bUnion], simp [equiv_class_size], unfold desc_fac,
  -- use hn and stuff
  sorry, sorry,
end

/-
theorem birthday : 2 * ‚Äñfin 23 ‚Ü™ fin 365‚Äñ < ‚Äñfin 23 ‚Üí fin 365‚Äñ :=
begin
  rw [card_inj, fintype.card_fun, fintype.card_fin, fintype.card_fin],
  norm_num [desc_fac],
  norm_num,
end

theorem birthday' : 2 * ‚Äñfin 22 ‚Ü™ fin 365‚Äñ > ‚Äñfin 22 ‚Üí fin 365‚Äñ :=
begin
  rw [card_inj, fintype.card_fun, fintype.card_fin, fintype.card_fin],
  norm_num [desc_fac],
  norm_num,
end

-/
