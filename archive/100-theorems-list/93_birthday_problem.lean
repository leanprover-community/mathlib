/-
Copyright (c) 2020 Eric Rodriguez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Eric Rodriguez
-/
import data.fintype.card
import data.nat.factorial
import data.equiv.fin
import tactic
open_locale classical nat

open finset function nat
variables {Œ± Œ≤ : Type*} [fintype Œ±] [fintype Œ≤]
local notation `|` x `|` := finset.card x
local notation `‚Äñ` x `‚Äñ` := fintype.card x

/-- desc_fac n k = (n + k)! / n! with no divisions -/
def desc_fac (n : ‚Ñï) : ‚Ñï ‚Üí ‚Ñï
| 0 := 1
| (k + 1) := (n + k + 1) * desc_fac k

@[simp] lemma desc_fac_zero (n : ‚Ñï) : desc_fac n 0 = 1 := rfl

@[simp] lemma zero_desc_fac (k : ‚Ñï) : desc_fac 0 k = k! :=
begin
  induction k with t ht, refl,
  unfold desc_fac, rw [ht, zero_add, factorial_succ]
end

theorem eval_desc_fac (n : ‚Ñï) : ‚àÄ k : ‚Ñï, (n + k)! = n! * desc_fac n k
| 0 := by simp!
| (k + 1) := by unfold desc_fac; rw [‚Üêmul_assoc, mul_comm n!, mul_assoc, ‚Üêeval_desc_fac]; simp!

def embedding_of_subtype (Œ± Œ≤) [fintype Œ±] [fintype Œ≤] : (Œ± ‚Ü™ Œ≤) ‚âÉ {f : Œ± ‚Üí Œ≤ // injective f} :=
{ to_fun := Œª f, ‚ü®f, f.injective‚ü©,
  inv_fun := Œª f, ‚ü®f.val, f.property‚ü©,
  left_inv := Œª f, by {ext, simp},
  right_inv := Œª f, by simp }

-- `decidable_pred (@injective Œ± Œ≤)` and various variations didn't give me an instance ü§∑‚Äç‚ôÇÔ∏è
noncomputable instance fintype.embedding {Œ± Œ≤} [fintype Œ±] [fintype Œ≤] : fintype (Œ± ‚Ü™ Œ≤) :=
fintype.of_equiv {f : Œ± ‚Üí Œ≤ // injective f} (embedding_of_subtype Œ± Œ≤).symm

-- I can never quite figure out ‚ñ∏ :(
lemma less_injs {Œ± Œ≤} [fintype Œ±] [fintype Œ≤] : ‚ÄñŒ± ‚Ü™ Œ≤‚Äñ ‚â§ ‚ÄñŒ± ‚Üí Œ≤‚Äñ :=
by {rw fintype.of_equiv_card, exact fintype.card_subtype_le injective}

lemma lt_of_ne_last {n : ‚Ñï} {i : fin n.succ} (h : i ‚â† fin.last n) : i.1 < n :=
begin
  rw fin.ne_iff_vne at h,
  simp only [fin.val_eq_coe, fin.coe_last] at h ‚ä¢,
  exact lt_of_le_of_ne (lt_succ_iff.mp i.property) h
end

def fin.cast_ne {n : ‚Ñï} (i : fin n.succ) (h : i ‚â† fin.last n) : fin n := i.cast_lt $ lt_of_ne_last h

@[simp] lemma fin.cast_succ_cast_ne {n : ‚Ñï} (i : fin n.succ) (h : i ‚â† fin.last n)
  : fin.cast_succ (i.cast_ne h) = i := fin.cast_succ_cast_lt i _

lemma card_inj' (n : ‚Ñï) (Œ≤) [fintype Œ≤] (h : n ‚â§ ‚ÄñŒ≤‚Äñ) : ‚Äñfin n ‚Ü™ Œ≤‚Äñ = desc_fac (‚ÄñŒ≤‚Äñ - n) n :=
begin
  induction n with n hn,
    rw [desc_fac_zero], nontriviality (fin 0 ‚Ü™ Œ≤),
    obtain ‚ü®f, g, ne‚ü© := exists_pair_ne (fin 0 ‚Ü™ Œ≤),
    exfalso, apply ne, ext x, exact fin.elim0 x,

  let equiv_classes : (fin n ‚Ü™ Œ≤) ‚Üí finset (fin n.succ ‚Ü™ Œ≤) :=
    Œª f : fin n ‚Ü™ Œ≤, univ.filter (Œª g : fin n.succ ‚Ü™ Œ≤, ‚àÄ k : fin n, f k = g k),

  have all_injf_covered : univ = univ.bUnion equiv_classes, sorry, /-
    apply subset.antisymm,
    { rintros f -, rw mem_bUnion, use (Œª x : fin n, f x),
      { intros a b hab, replace hab := f.inj' hab,
        simp only [fin.coe_eq_cast_succ, order_embedding.eq_iff_eq] at hab, exact hab },
      simp only [mem_filter, embedding.coe_fn_mk, mem_univ,
                 implies_true_iff, eq_self_iff_true, and_self] }, -- check this simp only after
    { exact subset_univ _ }, -/

  have equiv_class_size : ‚àÄ f : fin n ‚Ü™ Œ≤, |equiv_classes f| = ‚ÄñŒ≤‚Äñ - n,
  {
    intro f, let poss_vals := univ \ finset.map ‚ü®f, f.inj'‚ü© univ,
    have num_poss_vals : |poss_vals| = ‚ÄñŒ≤‚Äñ - n, by simp [poss_vals, card_univ, card_sdiff],
    apply le_antisymm, /-
    { by_contra h, push_neg at h, let last := Œª g : fin n.succ ‚Ü™ Œ≤, g (fin.last n),
      suffices : ‚àÉ x ‚àà equiv_classes f, ‚àÉ y ‚àà equiv_classes f, x ‚â† y ‚àß last x = last y,
      {
        obtain ‚ü®x, x_equiv, y, y_equiv, x_ne_y, x_y_agree‚ü© := this,
        apply x_ne_y,
        simp only [true_and, mem_filter, mem_univ, fin.coe_eq_cast_succ] at x_equiv y_equiv,

        rw ‚Üêembedding.ext_iff, intro t,
        by_cases h : t = fin.last n,
        { subst h, exact x_y_agree },
        { specialize x_equiv (t.cast_ne h), specialize y_equiv (t.cast_ne h),
          rw fin.cast_succ_cast_ne at x_equiv y_equiv,
          rw [‚Üêx_equiv, ‚Üêy_equiv] },
      },
      apply finset.exists_ne_map_eq_of_card_lt_of_maps_to,
      rw ‚Üênum_poss_vals at h, exact h,

      intros g g_equiv, simp [last] at g_equiv ‚ä¢, by_contra not_inj, push_neg at not_inj,
      -- change simps here
      obtain ‚ü®a, not_inj‚ü© := not_inj, rw g_equiv at not_inj,
      have := g.injective not_inj,
      suffices : fin.cast_succ a ‚â† fin.last n, by contradiction,
      exact (fin.cast_succ_lt_last a).ne }, -/
    sorry,
    {
      let my_fun : {x // x ‚àà poss_vals} ‚Ü™ (fin n.succ ‚Ü™ Œ≤)
       := ‚ü®Œª val, ‚ü®Œª t, if h : t = fin.last n then val else f (t.cast_ne h), _‚ü©, _‚ü©, rotate,
      { intros a‚ÇÅ a‚ÇÇ f_eq, dsimp only at f_eq, split_ifs at f_eq with h‚ÇÅ h‚ÇÇ h‚ÇÇ,
        { substs h‚ÇÅ h‚ÇÇ },
        { sorry }, -- working on making these not `tidy`! but it works for now
        { sorry }, -- these just unfold stuff about `coe`s basically
        { have := f.injective f_eq, sorry } },
      { intros a‚ÇÅ a‚ÇÇ f_eq, dsimp only at f_eq,
        rw ‚Üêembedding.ext_iff at f_eq, specialize f_eq (fin.last n),
        simp only [dif_pos, embedding.coe_fn_mk] at f_eq, ext, assumption },
      let some_embeds : finset (fin n.succ ‚Ü™ Œ≤)
        := finset.map my_fun poss_vals.attach,
      have : |some_embeds| = ‚ÄñŒ≤‚Äñ - n, by simpa, rw ‚Üêthis, apply finset.card_le_of_subset,
      intros one two, simp at two, simp [two],
    }
  },
  rw [‚Üêcard_univ, all_injf_covered, card_bUnion], simp [equiv_class_size], unfold desc_fac,
  -- use hn and stuff
  sorry, sorry,
end

/-
theorem birthday : 2 * ‚Äñfin 23 ‚Ü™ fin 365‚Äñ < ‚Äñfin 23 ‚Üí fin 365‚Äñ :=
begin
  rw [card_inj, fintype.card_fun, fintype.card_fin, fintype.card_fin],
  norm_num [desc_fac],
  norm_num,
end

theorem birthday' : 2 * ‚Äñfin 22 ‚Ü™ fin 365‚Äñ > ‚Äñfin 22 ‚Üí fin 365‚Äñ :=
begin
  rw [card_inj, fintype.card_fun, fintype.card_fin, fintype.card_fin],
  norm_num [desc_fac],
  norm_num,
end

-/
