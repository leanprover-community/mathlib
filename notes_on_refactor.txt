Advantages of the bare function and typeclass approach:

1) if f is a ring hom and the lemma needs an add monoid hom
then you can get one with a coercion (f : R \to+ S) but
`⇑↑f` is not syntactically `⇑f` so rewrites can fail
(but erw might work)

2) If S is a subring but the lemma needs a submonoid
then the same sort of story (you write S.to_submonoid
but this is not syntactically S so you need more rewrites).

3) Even worse than (2) -- if S is a subring but is first
defined as an additive subgroup and then later on you prove
it's closed under multiplication then the promotion now
needs `S' : subring R`, and now S and S' are fighting
with each other. Example: Kenny's work on fixed fields.

Still needs to be done:

I added some `[fact (is_subring S)]` stuff. Should I remove
all of these? Why are they there? Because sometimes `S : set R`
gets treated as a ring with e.g. `S \to+* T` after an `is_subring`
instance has been proved. Adding it as a `fact` saved me the refactor
is_subring -> subring. But should these refactors be taking place anyway?

 I added them in

algebra.algebra.basic
algebra.algebra.tower
deprecated.subgroup
deprecated.submonoid

***

src/deprecated/subgroup.lean line 493 should I just delete monoid_hom.range_subtype_val ?


