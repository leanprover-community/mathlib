Advantages of the bare function and typeclass approach:

1) if f is a ring hom and the lemma needs an add monoid hom
then you can get one with a coercion (f : R \to+ S) but
`⇑↑f` is not syntactically `⇑f` so rewrites can fail
(but erw might work)

2) If S is a subring but the lemma needs a submonoid
then the same sort of story. I

3) Even worse than (2) -- if S is a subring but is first
defined as an additive subgroup and then later on you prove
it's closed under multiplication then the promotion now
needs `S' : subring R`. Say S is an add_subgroup_closure
and `S'` is then the subring, and you're trying to prove
an inclusion of the set S' into another add_subgroup
you need to rewrite

TODO : find examples where this is happening.

Still needs to be done:

I added some `[fact (is_subring S)]` stuff. Should I remove
all of these? Why are they there? Because sometimes `S : set R`
gets treated as a ring with e.g. `S \to+* T` after an `is_subring`
instance has been proved. Adding it as a `fact` saved me the refactor
is_subring -> subring. But should these refactors be taking place anyway?

 I added them in

algebra.algebra.basic
algebra.algebra.tower

***

src/field_theory/fixed.lean move line 32 to the right place

***

algebra.group_power.lemmas : random section lines 170-176 should be removed

src/deprecated/group.lean is_monoid_hom.of_mul and is_mul_hom.to_is_monoid_hom
are the same? Delete `of_mul` version? is_group_hom.inv <- inv.is_group_hom o linw 294.
Can I remove @ on line 355?

The only "fact" in deprecated/subfield is line 29 -- can we just delete it?

src/deprecated/subgroup.lean mention main defs in module docstring. Do we ever use subtype.group?
It has a fact in. Line 174 can I get rid of the @ ? line 493 shoudl I just delete monoid_hom.range_subtype_val ?

src/deprecated/submonoid.lean add #main definitions. Lines 227 and 237 have facts:
can we delete? Or just change to lemmas? also 259, 265, 274, 280...



src/ring_theory/subring.lean do I need to_is_submonoid etc on lnioes 174-179?
